
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c60  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a04c  0800a04c  0001a04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000004  0800a050  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000024  0800a070  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000042  200000c0  0800a109  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800a14b  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000090  20000118  0800a15c  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000004c0  200001a8  0800a1ec  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000668  0800a1ec  00020668  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0003a0f5  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006459  00000000  00000000  0005a2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002508  00000000  00000000  00060728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000022b0  00000000  00000000  00062c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002cdd2  00000000  00000000  00064ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00027003  00000000  00000000  00091cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00101011  00000000  00000000  000b8cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001b9cc6  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000099e0  00000000  00000000  001b9d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a8 	.word	0x200001a8
 8000158:	00000000 	.word	0x00000000
 800015c:	08009d84 	.word	0x08009d84

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001ac 	.word	0x200001ac
 8000178:	08009d84 	.word	0x08009d84

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	468c      	mov	ip, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	f040 8083 	bne.w	80002d2 <__udivmoddi4+0x116>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d947      	bls.n	8000262 <__udivmoddi4+0xa6>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b142      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d8:	f1c2 0020 	rsb	r0, r2, #32
 80001dc:	fa24 f000 	lsr.w	r0, r4, r0
 80001e0:	4091      	lsls	r1, r2
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea40 0c01 	orr.w	ip, r0, r1
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6f8 	udiv	r6, ip, r8
 80001f4:	fa1f fe87 	uxth.w	lr, r7
 80001f8:	fb08 c116 	mls	r1, r8, r6, ip
 80001fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000200:	fb06 f10e 	mul.w	r1, r6, lr
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18fb      	adds	r3, r7, r3
 800020a:	f106 30ff 	add.w	r0, r6, #4294967295
 800020e:	f080 8119 	bcs.w	8000444 <__udivmoddi4+0x288>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8116 	bls.w	8000444 <__udivmoddi4+0x288>
 8000218:	3e02      	subs	r6, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	45a6      	cmp	lr, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8105 	bcs.w	8000448 <__udivmoddi4+0x28c>
 800023e:	45a6      	cmp	lr, r4
 8000240:	f240 8102 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	eba4 040e 	sub.w	r4, r4, lr
 8000250:	2600      	movs	r6, #0
 8000252:	b11d      	cbz	r5, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c5 4300 	strd	r4, r3, [r5]
 800025c:	4631      	mov	r1, r6
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	b902      	cbnz	r2, 8000266 <__udivmoddi4+0xaa>
 8000264:	deff      	udf	#255	; 0xff
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	2a00      	cmp	r2, #0
 800026c:	d150      	bne.n	8000310 <__udivmoddi4+0x154>
 800026e:	1bcb      	subs	r3, r1, r7
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f f887 	uxth.w	r8, r7
 8000278:	2601      	movs	r6, #1
 800027a:	fbb3 fcfe 	udiv	ip, r3, lr
 800027e:	0c21      	lsrs	r1, r4, #16
 8000280:	fb0e 331c 	mls	r3, lr, ip, r3
 8000284:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000288:	fb08 f30c 	mul.w	r3, r8, ip
 800028c:	428b      	cmp	r3, r1
 800028e:	d907      	bls.n	80002a0 <__udivmoddi4+0xe4>
 8000290:	1879      	adds	r1, r7, r1
 8000292:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000296:	d202      	bcs.n	800029e <__udivmoddi4+0xe2>
 8000298:	428b      	cmp	r3, r1
 800029a:	f200 80e9 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 800029e:	4684      	mov	ip, r0
 80002a0:	1ac9      	subs	r1, r1, r3
 80002a2:	b2a3      	uxth	r3, r4
 80002a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002b0:	fb08 f800 	mul.w	r8, r8, r0
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0x10c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x10a>
 80002c0:	45a0      	cmp	r8, r4
 80002c2:	f200 80d9 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002c6:	4618      	mov	r0, r3
 80002c8:	eba4 0408 	sub.w	r4, r4, r8
 80002cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d0:	e7bf      	b.n	8000252 <__udivmoddi4+0x96>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80b1 	beq.w	800043e <__udivmoddi4+0x282>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x1cc>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b8 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	468c      	mov	ip, r1
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0a8      	beq.n	800025c <__udivmoddi4+0xa0>
 800030a:	e9c5 4c00 	strd	r4, ip, [r5]
 800030e:	e7a5      	b.n	800025c <__udivmoddi4+0xa0>
 8000310:	f1c2 0320 	rsb	r3, r2, #32
 8000314:	fa20 f603 	lsr.w	r6, r0, r3
 8000318:	4097      	lsls	r7, r2
 800031a:	fa01 f002 	lsl.w	r0, r1, r2
 800031e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000322:	40d9      	lsrs	r1, r3
 8000324:	4330      	orrs	r0, r6
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	fbb1 f6fe 	udiv	r6, r1, lr
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	fb0e 1116 	mls	r1, lr, r6, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb06 f108 	mul.w	r1, r6, r8
 800033c:	4299      	cmp	r1, r3
 800033e:	fa04 f402 	lsl.w	r4, r4, r2
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f106 3cff 	add.w	ip, r6, #4294967295
 800034a:	f080 808d 	bcs.w	8000468 <__udivmoddi4+0x2ac>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 808a 	bls.w	8000468 <__udivmoddi4+0x2ac>
 8000354:	3e02      	subs	r6, #2
 8000356:	443b      	add	r3, r7
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b281      	uxth	r1, r0
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000368:	fb00 f308 	mul.w	r3, r0, r8
 800036c:	428b      	cmp	r3, r1
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	1879      	adds	r1, r7, r1
 8000372:	f100 3cff 	add.w	ip, r0, #4294967295
 8000376:	d273      	bcs.n	8000460 <__udivmoddi4+0x2a4>
 8000378:	428b      	cmp	r3, r1
 800037a:	d971      	bls.n	8000460 <__udivmoddi4+0x2a4>
 800037c:	3802      	subs	r0, #2
 800037e:	4439      	add	r1, r7
 8000380:	1acb      	subs	r3, r1, r3
 8000382:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000386:	e778      	b.n	800027a <__udivmoddi4+0xbe>
 8000388:	f1c6 0c20 	rsb	ip, r6, #32
 800038c:	fa03 f406 	lsl.w	r4, r3, r6
 8000390:	fa22 f30c 	lsr.w	r3, r2, ip
 8000394:	431c      	orrs	r4, r3
 8000396:	fa20 f70c 	lsr.w	r7, r0, ip
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003a2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003a6:	431f      	orrs	r7, r3
 80003a8:	0c3b      	lsrs	r3, r7, #16
 80003aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ae:	fa1f f884 	uxth.w	r8, r4
 80003b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003ba:	fb09 fa08 	mul.w	sl, r9, r8
 80003be:	458a      	cmp	sl, r1
 80003c0:	fa02 f206 	lsl.w	r2, r2, r6
 80003c4:	fa00 f306 	lsl.w	r3, r0, r6
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x220>
 80003ca:	1861      	adds	r1, r4, r1
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	d248      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 80003d2:	458a      	cmp	sl, r1
 80003d4:	d946      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4421      	add	r1, r4
 80003dc:	eba1 010a 	sub.w	r1, r1, sl
 80003e0:	b2bf      	uxth	r7, r7
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003ee:	fb00 f808 	mul.w	r8, r0, r8
 80003f2:	45b8      	cmp	r8, r7
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x24a>
 80003f6:	19e7      	adds	r7, r4, r7
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d22e      	bcs.n	800045c <__udivmoddi4+0x2a0>
 80003fe:	45b8      	cmp	r8, r7
 8000400:	d92c      	bls.n	800045c <__udivmoddi4+0x2a0>
 8000402:	3802      	subs	r0, #2
 8000404:	4427      	add	r7, r4
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	eba7 0708 	sub.w	r7, r7, r8
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	454f      	cmp	r7, r9
 8000414:	46c6      	mov	lr, r8
 8000416:	4649      	mov	r1, r9
 8000418:	d31a      	bcc.n	8000450 <__udivmoddi4+0x294>
 800041a:	d017      	beq.n	800044c <__udivmoddi4+0x290>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x27a>
 800041e:	ebb3 020e 	subs.w	r2, r3, lr
 8000422:	eb67 0701 	sbc.w	r7, r7, r1
 8000426:	fa07 fc0c 	lsl.w	ip, r7, ip
 800042a:	40f2      	lsrs	r2, r6
 800042c:	ea4c 0202 	orr.w	r2, ip, r2
 8000430:	40f7      	lsrs	r7, r6
 8000432:	e9c5 2700 	strd	r2, r7, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e70b      	b.n	800025c <__udivmoddi4+0xa0>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e9      	b.n	800021c <__udivmoddi4+0x60>
 8000448:	4618      	mov	r0, r3
 800044a:	e6fd      	b.n	8000248 <__udivmoddi4+0x8c>
 800044c:	4543      	cmp	r3, r8
 800044e:	d2e5      	bcs.n	800041c <__udivmoddi4+0x260>
 8000450:	ebb8 0e02 	subs.w	lr, r8, r2
 8000454:	eb69 0104 	sbc.w	r1, r9, r4
 8000458:	3801      	subs	r0, #1
 800045a:	e7df      	b.n	800041c <__udivmoddi4+0x260>
 800045c:	4608      	mov	r0, r1
 800045e:	e7d2      	b.n	8000406 <__udivmoddi4+0x24a>
 8000460:	4660      	mov	r0, ip
 8000462:	e78d      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000464:	4681      	mov	r9, r0
 8000466:	e7b9      	b.n	80003dc <__udivmoddi4+0x220>
 8000468:	4666      	mov	r6, ip
 800046a:	e775      	b.n	8000358 <__udivmoddi4+0x19c>
 800046c:	4630      	mov	r0, r6
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0x14a>
 8000470:	f1ac 0c02 	sub.w	ip, ip, #2
 8000474:	4439      	add	r1, r7
 8000476:	e713      	b.n	80002a0 <__udivmoddi4+0xe4>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	e724      	b.n	80002c8 <__udivmoddi4+0x10c>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <APPD_EnableCPU2+0x34>)
 800048c:	1d3c      	adds	r4, r7, #4
 800048e:	461d      	mov	r5, r3
 8000490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000494:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000498:	c403      	stmia	r4!, {r0, r1}
 800049a:	8022      	strh	r2, [r4, #0]
 800049c:	3402      	adds	r4, #2
 800049e:	0c13      	lsrs	r3, r2, #16
 80004a0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004a2:	f007 ff9f 	bl	80083e4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f007 fafe 	bl	8007aaa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004ae:	bf00      	nop
}
 80004b0:	3720      	adds	r7, #32
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bdb0      	pop	{r4, r5, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	08009d9c 	.word	0x08009d9c

080004bc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80004c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ca:	f023 0207 	bic.w	r2, r3, #7
 80004ce:	4905      	ldr	r1, [pc, #20]	; (80004e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	58000400 	.word	0x58000400

080004e8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	608b      	str	r3, [r1, #8]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000514:	f000 f824 	bl	8000560 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000518:	4903      	ldr	r1, [pc, #12]	; (8000528 <APPE_Init+0x18>)
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fce0 	bl	8000ee0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000520:	f000 f82c 	bl	800057c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000524:	bf00      	nop
}
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000444 	.word	0x20000444

0800052c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN FD */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )

{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]

switch  (GPIO_Pin)
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	2b10      	cmp	r3, #16
 800053a:	d10c      	bne.n	8000556 <HAL_GPIO_EXTI_Callback+0x2a>
{

case SW1_Pin:

//	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	HAL_ResumeTick();
 800053c:	f001 fc66 	bl	8001e0c <HAL_ResumeTick>
	UTIL_SEQ_SetTask( 1<<CFG_TASK_ADV_RESTART,CFG_SCH_PRIO_0);
 8000540:	2100      	movs	r1, #0
 8000542:	2020      	movs	r0, #32
 8000544:	f009 face 	bl	8009ae4 <UTIL_SEQ_SetTask>
	HAL_ResumeTick();
 8000548:	f001 fc60 	bl	8001e0c <HAL_ResumeTick>
		UTIL_SEQ_SetTask( 1<<CFG_TASK_ADV_RESTART,CFG_SCH_PRIO_0);
 800054c:	2100      	movs	r1, #0
 800054e:	2020      	movs	r0, #32
 8000550:	f009 fac8 	bl	8009ae4 <UTIL_SEQ_SetTask>
//	HAL_Delay(500);

//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);


break;
 8000554:	e000      	b.n	8000558 <HAL_GPIO_EXTI_Callback+0x2c>

default:

break;
 8000556:	bf00      	nop

}

return;
 8000558:	bf00      	nop

}
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000564:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000568:	f7ff ffbe 	bl	80004e8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800056c:	f009 f972 	bl	8009854 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000570:	2004      	movs	r0, #4
 8000572:	f7ff ffa3 	bl	80004bc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000576:	bf00      	nop
}
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000582:	f007 fd79 	bl	8008078 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <appe_Tl_Init+0x50>)
 8000588:	2100      	movs	r1, #0
 800058a:	2040      	movs	r0, #64	; 0x40
 800058c:	f009 fa88 	bl	8009aa0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <appe_Tl_Init+0x54>)
 8000592:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <appe_Tl_Init+0x58>)
 8000596:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	480e      	ldr	r0, [pc, #56]	; (80005d8 <appe_Tl_Init+0x5c>)
 800059e:	f007 fc31 	bl	8007e04 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <appe_Tl_Init+0x60>)
 80005a4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <appe_Tl_Init+0x64>)
 80005a8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <appe_Tl_Init+0x68>)
 80005ac:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005ae:	f240 533c 	movw	r3, #1340	; 0x53c
 80005b2:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	4618      	mov	r0, r3
 80005ba:	f007 fe9f 	bl	80082fc <TL_MM_Init>

  TL_Enable();
 80005be:	f007 fd55 	bl	800806c <TL_Enable>

  return;
 80005c2:	bf00      	nop
}
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08007e3d 	.word	0x08007e3d
 80005d0:	20030724 	.word	0x20030724
 80005d4:	080005e9 	.word	0x080005e9
 80005d8:	080005ff 	.word	0x080005ff
 80005dc:	2003093c 	.word	0x2003093c
 80005e0:	20030830 	.word	0x20030830
 80005e4:	200301e8 	.word	0x200301e8

080005e8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80005f2:	bf00      	nop
}
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000606:	f7ff ff3d 	bl	8000484 <APPD_EnableCPU2>

  APP_BLE_Init( );
 800060a:	f008 f881 	bl	8008710 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800060e:	2100      	movs	r1, #0
 8000610:	2001      	movs	r0, #1
 8000612:	f009 f931 	bl	8009878 <UTIL_LPM_SetOffMode>
  return;
 8000616:	bf00      	nop
}
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000622:	bf00      	nop
}
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000636:	f04f 30ff 	mov.w	r0, #4294967295
 800063a:	f009 f94d 	bl	80098d8 <UTIL_SEQ_Run>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800064e:	2100      	movs	r1, #0
 8000650:	2040      	movs	r0, #64	; 0x40
 8000652:	f009 fa47 	bl	8009ae4 <UTIL_SEQ_SetTask>
  return;
 8000656:	bf00      	nop
}
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000666:	2002      	movs	r0, #2
 8000668:	f009 faa8 	bl	8009bbc <UTIL_SEQ_SetEvt>
  return;
 800066c:	bf00      	nop
}
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800067c:	2002      	movs	r0, #2
 800067e:	f009 fabd 	bl	8009bfc <UTIL_SEQ_WaitEvt>
  return;
 8000682:	bf00      	nop
}
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8000696:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800069a:	4905      	ldr	r1, [pc, #20]	; (80006b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4313      	orrs	r3, r2
 80006a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	58000800 	.word	0x58000800

080006b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4904      	ldr	r1, [pc, #16]	; (80006d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	600b      	str	r3, [r1, #0]

}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	58000800 	.word	0x58000800

080006d8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <ReadRtcSsrValue+0x3c>)
 80006e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <ReadRtcSsrValue+0x3c>)
 80006e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006ee:	e005      	b.n	80006fc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <ReadRtcSsrValue+0x3c>)
 80006f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	429a      	cmp	r2, r3
 8000702:	d1f5      	bne.n	80006f0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000704:	683b      	ldr	r3, [r7, #0]
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40002800 	.word	0x40002800

08000718 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	491d      	ldr	r1, [pc, #116]	; (80007a0 <LinkTimerAfter+0x88>)
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	440b      	add	r3, r1
 8000736:	3315      	adds	r3, #21
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	2b06      	cmp	r3, #6
 8000740:	d009      	beq.n	8000756 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000742:	7bfa      	ldrb	r2, [r7, #15]
 8000744:	4916      	ldr	r1, [pc, #88]	; (80007a0 <LinkTimerAfter+0x88>)
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	440b      	add	r3, r1
 8000750:	3314      	adds	r3, #20
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	4911      	ldr	r1, [pc, #68]	; (80007a0 <LinkTimerAfter+0x88>)
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	440b      	add	r3, r1
 8000764:	3315      	adds	r3, #21
 8000766:	7bfa      	ldrb	r2, [r7, #15]
 8000768:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <LinkTimerAfter+0x88>)
 800076e:	4613      	mov	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4413      	add	r3, r2
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	440b      	add	r3, r1
 8000778:	3314      	adds	r3, #20
 800077a:	79ba      	ldrb	r2, [r7, #6]
 800077c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800077e:	79ba      	ldrb	r2, [r7, #6]
 8000780:	4907      	ldr	r1, [pc, #28]	; (80007a0 <LinkTimerAfter+0x88>)
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	440b      	add	r3, r1
 800078c:	3315      	adds	r3, #21
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	701a      	strb	r2, [r3, #0]

  return;
 8000792:	bf00      	nop
}
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000024 	.word	0x20000024

080007a4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <LinkTimerBefore+0xb8>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	79ba      	ldrb	r2, [r7, #6]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d032      	beq.n	8000826 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80007c0:	79ba      	ldrb	r2, [r7, #6]
 80007c2:	4927      	ldr	r1, [pc, #156]	; (8000860 <LinkTimerBefore+0xbc>)
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	440b      	add	r3, r1
 80007ce:	3314      	adds	r3, #20
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007d4:	7bfa      	ldrb	r2, [r7, #15]
 80007d6:	4922      	ldr	r1, [pc, #136]	; (8000860 <LinkTimerBefore+0xbc>)
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	440b      	add	r3, r1
 80007e2:	3315      	adds	r3, #21
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	491d      	ldr	r1, [pc, #116]	; (8000860 <LinkTimerBefore+0xbc>)
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	440b      	add	r3, r1
 80007f6:	3315      	adds	r3, #21
 80007f8:	79ba      	ldrb	r2, [r7, #6]
 80007fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	4918      	ldr	r1, [pc, #96]	; (8000860 <LinkTimerBefore+0xbc>)
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	440b      	add	r3, r1
 800080a:	3314      	adds	r3, #20
 800080c:	7bfa      	ldrb	r2, [r7, #15]
 800080e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	4913      	ldr	r1, [pc, #76]	; (8000860 <LinkTimerBefore+0xbc>)
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	440b      	add	r3, r1
 800081e:	3314      	adds	r3, #20
 8000820:	79fa      	ldrb	r2, [r7, #7]
 8000822:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000824:	e014      	b.n	8000850 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	490d      	ldr	r1, [pc, #52]	; (8000860 <LinkTimerBefore+0xbc>)
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3315      	adds	r3, #21
 8000836:	79ba      	ldrb	r2, [r7, #6]
 8000838:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800083a:	79ba      	ldrb	r2, [r7, #6]
 800083c:	4908      	ldr	r1, [pc, #32]	; (8000860 <LinkTimerBefore+0xbc>)
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3314      	adds	r3, #20
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	701a      	strb	r2, [r3, #0]
  return;
 800084e:	bf00      	nop
}
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	200000b4 	.word	0x200000b4
 8000860:	20000024 	.word	0x20000024

08000864 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800086e:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <linkTimer+0x144>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b06      	cmp	r3, #6
 8000876:	d118      	bne.n	80008aa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000878:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <linkTimer+0x144>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <linkTimer+0x148>)
 8000880:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000882:	4a49      	ldr	r2, [pc, #292]	; (80009a8 <linkTimer+0x144>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	4949      	ldr	r1, [pc, #292]	; (80009b0 <linkTimer+0x14c>)
 800088c:	4613      	mov	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	440b      	add	r3, r1
 8000896:	3315      	adds	r3, #21
 8000898:	2206      	movs	r2, #6
 800089a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800089c:	4b45      	ldr	r3, [pc, #276]	; (80009b4 <linkTimer+0x150>)
 800089e:	f04f 32ff 	mov.w	r2, #4294967295
 80008a2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	81fb      	strh	r3, [r7, #14]
 80008a8:	e078      	b.n	800099c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80008aa:	f000 f909 	bl	8000ac0 <ReturnTimeElapsed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80008b2:	79fa      	ldrb	r2, [r7, #7]
 80008b4:	493e      	ldr	r1, [pc, #248]	; (80009b0 <linkTimer+0x14c>)
 80008b6:	4613      	mov	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	440b      	add	r3, r1
 80008c0:	3308      	adds	r3, #8
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	89fb      	ldrh	r3, [r7, #14]
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	4419      	add	r1, r3
 80008ca:	4839      	ldr	r0, [pc, #228]	; (80009b0 <linkTimer+0x14c>)
 80008cc:	4613      	mov	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4403      	add	r3, r0
 80008d6:	3308      	adds	r3, #8
 80008d8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	4934      	ldr	r1, [pc, #208]	; (80009b0 <linkTimer+0x14c>)
 80008de:	4613      	mov	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	440b      	add	r3, r1
 80008e8:	3308      	adds	r3, #8
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <linkTimer+0x144>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	4a2e      	ldr	r2, [pc, #184]	; (80009b0 <linkTimer+0x14c>)
 80008f8:	460b      	mov	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	440b      	add	r3, r1
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	4413      	add	r3, r2
 8000902:	3308      	adds	r3, #8
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	429a      	cmp	r2, r3
 800090a:	d337      	bcc.n	800097c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <linkTimer+0x144>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000912:	7b7a      	ldrb	r2, [r7, #13]
 8000914:	4926      	ldr	r1, [pc, #152]	; (80009b0 <linkTimer+0x14c>)
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	440b      	add	r3, r1
 8000920:	3315      	adds	r3, #21
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000926:	e013      	b.n	8000950 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000928:	7b7a      	ldrb	r2, [r7, #13]
 800092a:	4921      	ldr	r1, [pc, #132]	; (80009b0 <linkTimer+0x14c>)
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	440b      	add	r3, r1
 8000936:	3315      	adds	r3, #21
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800093c:	7b7a      	ldrb	r2, [r7, #13]
 800093e:	491c      	ldr	r1, [pc, #112]	; (80009b0 <linkTimer+0x14c>)
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	440b      	add	r3, r1
 800094a:	3315      	adds	r3, #21
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000950:	7b3b      	ldrb	r3, [r7, #12]
 8000952:	2b06      	cmp	r3, #6
 8000954:	d00b      	beq.n	800096e <linkTimer+0x10a>
 8000956:	7b3a      	ldrb	r2, [r7, #12]
 8000958:	4915      	ldr	r1, [pc, #84]	; (80009b0 <linkTimer+0x14c>)
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	440b      	add	r3, r1
 8000964:	3308      	adds	r3, #8
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	429a      	cmp	r2, r3
 800096c:	d2dc      	bcs.n	8000928 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800096e:	7b7a      	ldrb	r2, [r7, #13]
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fecf 	bl	8000718 <LinkTimerAfter>
 800097a:	e00f      	b.n	800099c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <linkTimer+0x144>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff0c 	bl	80007a4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <linkTimer+0x144>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <linkTimer+0x148>)
 8000994:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <linkTimer+0x144>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800099c:	89fb      	ldrh	r3, [r7, #14]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000b4 	.word	0x200000b4
 80009ac:	200000b5 	.word	0x200000b5
 80009b0:	20000024 	.word	0x20000024
 80009b4:	200000b8 	.word	0x200000b8

080009b8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	4613      	mov	r3, r2
 80009c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009c8:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <UnlinkTimer+0xf8>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d111      	bne.n	80009f8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <UnlinkTimer+0xf8>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <UnlinkTimer+0xfc>)
 80009dc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	4935      	ldr	r1, [pc, #212]	; (8000ab8 <UnlinkTimer+0x100>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	440b      	add	r3, r1
 80009ec:	3315      	adds	r3, #21
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <UnlinkTimer+0xf8>)
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	e03e      	b.n	8000a76 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	492f      	ldr	r1, [pc, #188]	; (8000ab8 <UnlinkTimer+0x100>)
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	440b      	add	r3, r1
 8000a06:	3314      	adds	r3, #20
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	492a      	ldr	r1, [pc, #168]	; (8000ab8 <UnlinkTimer+0x100>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3315      	adds	r3, #21
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a20:	79f9      	ldrb	r1, [r7, #7]
 8000a22:	7bfa      	ldrb	r2, [r7, #15]
 8000a24:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <UnlinkTimer+0x100>)
 8000a26:	460b      	mov	r3, r1
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	440b      	add	r3, r1
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4403      	add	r3, r0
 8000a30:	3315      	adds	r3, #21
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2d8      	uxtb	r0, r3
 8000a36:	4920      	ldr	r1, [pc, #128]	; (8000ab8 <UnlinkTimer+0x100>)
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	440b      	add	r3, r1
 8000a42:	3315      	adds	r3, #21
 8000a44:	4602      	mov	r2, r0
 8000a46:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a48:	7bbb      	ldrb	r3, [r7, #14]
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d013      	beq.n	8000a76 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a4e:	79f9      	ldrb	r1, [r7, #7]
 8000a50:	7bba      	ldrb	r2, [r7, #14]
 8000a52:	4819      	ldr	r0, [pc, #100]	; (8000ab8 <UnlinkTimer+0x100>)
 8000a54:	460b      	mov	r3, r1
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	440b      	add	r3, r1
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	4403      	add	r3, r0
 8000a5e:	3314      	adds	r3, #20
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2d8      	uxtb	r0, r3
 8000a64:	4914      	ldr	r1, [pc, #80]	; (8000ab8 <UnlinkTimer+0x100>)
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	440b      	add	r3, r1
 8000a70:	3314      	adds	r3, #20
 8000a72:	4602      	mov	r2, r0
 8000a74:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	490f      	ldr	r1, [pc, #60]	; (8000ab8 <UnlinkTimer+0x100>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	440b      	add	r3, r1
 8000a84:	330c      	adds	r3, #12
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <UnlinkTimer+0xf8>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d107      	bne.n	8000aa4 <UnlinkTimer+0xec>
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d104      	bne.n	8000aa4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <UnlinkTimer+0x104>)
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
}
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	200000b4 	.word	0x200000b4
 8000ab4:	200000b5 	.word	0x200000b5
 8000ab8:	20000024 	.word	0x20000024
 8000abc:	200000b8 	.word	0x200000b8

08000ac0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <ReturnTimeElapsed+0x70>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ace:	d026      	beq.n	8000b1e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ad0:	f7ff fe02 	bl	80006d8 <ReadRtcSsrValue>
 8000ad4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <ReturnTimeElapsed+0x70>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d805      	bhi.n	8000aec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <ReturnTimeElapsed+0x70>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	e00a      	b.n	8000b02 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <ReturnTimeElapsed+0x74>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <ReturnTimeElapsed+0x70>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <ReturnTimeElapsed+0x78>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	fb02 f303 	mul.w	r3, r2, r3
 8000b0e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <ReturnTimeElapsed+0x7c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	40d3      	lsrs	r3, r2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	e001      	b.n	8000b22 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	b29b      	uxth	r3, r3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000b8 	.word	0x200000b8
 8000b34:	200001ca 	.word	0x200001ca
 8000b38:	200001c9 	.word	0x200001c9
 8000b3c:	200001c8 	.word	0x200001c8

08000b40 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d108      	bne.n	8000b62 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b50:	f7ff fdc2 	bl	80006d8 <ReadRtcSsrValue>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <RestartWakeupCounter+0xa8>)
 8000b58:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	f002 fcc3 	bl	80034e6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b60:	e03e      	b.n	8000be0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d803      	bhi.n	8000b70 <RestartWakeupCounter+0x30>
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <RestartWakeupCounter+0xac>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d002      	beq.n	8000b76 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b76:	bf00      	nop
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <RestartWakeupCounter+0xb0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f7      	beq.n	8000b78 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <RestartWakeupCounter+0xb0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <RestartWakeupCounter+0xb0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b9c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <RestartWakeupCounter+0xb4>)
 8000ba0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ba4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f002 fcab 	bl	8003502 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <RestartWakeupCounter+0xb8>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	4910      	ldr	r1, [pc, #64]	; (8000bf8 <RestartWakeupCounter+0xb8>)
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bbc:	f7ff fd8c 	bl	80006d8 <ReadRtcSsrValue>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <RestartWakeupCounter+0xa8>)
 8000bc4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <RestartWakeupCounter+0xb0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <RestartWakeupCounter+0xb0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bd8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000bda:	f3af 8000 	nop.w
  return ;
 8000bde:	bf00      	nop
}
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000b8 	.word	0x200000b8
 8000bec:	200001c8 	.word	0x200001c8
 8000bf0:	200001c4 	.word	0x200001c4
 8000bf4:	58000800 	.word	0x58000800
 8000bf8:	40002800 	.word	0x40002800

08000bfc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c02:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <RescheduleTimerList+0x124>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0e:	d108      	bne.n	8000c22 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000c10:	bf00      	nop
 8000c12:	4b44      	ldr	r3, [pc, #272]	; (8000d24 <RescheduleTimerList+0x128>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f7      	bne.n	8000c12 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <RescheduleTimerList+0x128>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <RescheduleTimerList+0x128>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c34:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c36:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <RescheduleTimerList+0x12c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	493b      	ldr	r1, [pc, #236]	; (8000d2c <RescheduleTimerList+0x130>)
 8000c40:	4613      	mov	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	4413      	add	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	440b      	add	r3, r1
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c50:	f7ff ff36 	bl	8000ac0 <ReturnTimeElapsed>
 8000c54:	4603      	mov	r3, r0
 8000c56:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d205      	bcs.n	8000c6c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c64:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <RescheduleTimerList+0x134>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e04d      	b.n	8000d08 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <RescheduleTimerList+0x138>)
 8000c70:	8812      	ldrh	r2, [r2, #0]
 8000c72:	b292      	uxth	r2, r2
 8000c74:	4413      	add	r3, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d906      	bls.n	8000c8c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <RescheduleTimerList+0x138>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <RescheduleTimerList+0x134>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e03d      	b.n	8000d08 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <RescheduleTimerList+0x134>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c9c:	e034      	b.n	8000d08 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	4922      	ldr	r1, [pc, #136]	; (8000d2c <RescheduleTimerList+0x130>)
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	3308      	adds	r3, #8
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d20a      	bcs.n	8000ccc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	491c      	ldr	r1, [pc, #112]	; (8000d2c <RescheduleTimerList+0x130>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	e013      	b.n	8000cf4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	4917      	ldr	r1, [pc, #92]	; (8000d2c <RescheduleTimerList+0x130>)
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	3308      	adds	r3, #8
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	7bfa      	ldrb	r2, [r7, #15]
 8000ce2:	1ac9      	subs	r1, r1, r3
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <RescheduleTimerList+0x130>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	4403      	add	r3, r0
 8000cf0:	3308      	adds	r3, #8
 8000cf2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <RescheduleTimerList+0x130>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3315      	adds	r3, #21
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d1c7      	bne.n	8000c9e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000d0e:	89bb      	ldrh	r3, [r7, #12]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff15 	bl	8000b40 <RestartWakeupCounter>

  return ;
 8000d16:	bf00      	nop
}
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40002800 	.word	0x40002800
 8000d24:	200001c4 	.word	0x200001c4
 8000d28:	200000b4 	.word	0x200000b4
 8000d2c:	20000024 	.word	0x20000024
 8000d30:	200000bc 	.word	0x200000bc
 8000d34:	200001cc 	.word	0x200001cc

08000d38 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8000d42:	617b      	str	r3, [r7, #20]
  return(result);
 8000d44:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d4c:	4b5f      	ldr	r3, [pc, #380]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	22ca      	movs	r2, #202	; 0xca
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2253      	movs	r2, #83	; 0x53
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000d60:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d72:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d74:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d7c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d80:	4954      	ldr	r1, [pc, #336]	; (8000ed4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	440b      	add	r3, r1
 8000d8c:	330c      	adds	r3, #12
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d172      	bne.n	8000e7c <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d96:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d9a:	494e      	ldr	r1, [pc, #312]	; (8000ed4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000daa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dae:	4949      	ldr	r1, [pc, #292]	; (8000ed4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000db0:	4613      	mov	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4413      	add	r3, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	440b      	add	r3, r1
 8000dba:	3310      	adds	r3, #16
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000dc0:	4b45      	ldr	r3, [pc, #276]	; (8000ed8 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d050      	beq.n	8000e6c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000dca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dce:	4941      	ldr	r1, [pc, #260]	; (8000ed4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	330d      	adds	r3, #13
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d126      	bne.n	8000e32 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000de8:	2101      	movs	r1, #1
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fde4 	bl	80009b8 <UnlinkTimer>
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	f383 8810 	msr	PRIMASK, r3
}
 8000dfa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000dfc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e00:	4934      	ldr	r1, [pc, #208]	; (8000ed4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	440b      	add	r3, r1
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fa4e 	bl	80012b8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22ca      	movs	r2, #202	; 0xca
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2253      	movs	r2, #83	; 0x53
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e30:	e014      	b.n	8000e5c <HW_TS_RTC_Wakeup_Handler+0x124>
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f383 8810 	msr	PRIMASK, r3
}
 8000e3c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f9ac 	bl	80011a0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	22ca      	movs	r2, #202	; 0xca
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2253      	movs	r2, #83	; 0x53
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	4619      	mov	r1, r3
 8000e64:	69b8      	ldr	r0, [r7, #24]
 8000e66:	f000 faaf 	bl	80013c8 <HW_TS_RTC_Int_AppNot>
 8000e6a:	e025      	b.n	8000eb8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000e6c:	f7ff fec6 	bl	8000bfc <RescheduleTimerList>
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f383 8810 	msr	PRIMASK, r3
}
 8000e7a:	e01d      	b.n	8000eb8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e7c:	bf00      	nop
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f7      	beq.n	8000e7e <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ea2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000ea6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f383 8810 	msr	PRIMASK, r3
}
 8000eb6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	22ff      	movs	r2, #255	; 0xff
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000ec2:	bf00      	nop
}
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200001c4 	.word	0x200001c4
 8000ed0:	200000b4 	.word	0x200000b4
 8000ed4:	20000024 	.word	0x20000024
 8000ed8:	200000bc 	.word	0x200000bc
 8000edc:	58000800 	.word	0x58000800

08000ee0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000eec:	4a64      	ldr	r2, [pc, #400]	; (8001080 <HW_TS_Init+0x1a0>)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ef2:	4b63      	ldr	r3, [pc, #396]	; (8001080 <HW_TS_Init+0x1a0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	22ca      	movs	r2, #202	; 0xca
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
 8000efc:	4b60      	ldr	r3, [pc, #384]	; (8001080 <HW_TS_Init+0x1a0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2253      	movs	r2, #83	; 0x53
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000f06:	4b5f      	ldr	r3, [pc, #380]	; (8001084 <HW_TS_Init+0x1a4>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4a5e      	ldr	r2, [pc, #376]	; (8001084 <HW_TS_Init+0x1a4>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000f12:	4b5c      	ldr	r3, [pc, #368]	; (8001084 <HW_TS_Init+0x1a4>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f1c3 0304 	rsb	r3, r3, #4
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b58      	ldr	r3, [pc, #352]	; (8001088 <HW_TS_Init+0x1a8>)
 8000f26:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HW_TS_Init+0x1a4>)
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000f30:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000f34:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	fa92 f2a2 	rbit	r2, r2
 8000f3c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d101      	bne.n	8000f4c <HW_TS_Init+0x6c>
  {
    return 32U;
 8000f48:	2220      	movs	r2, #32
 8000f4a:	e003      	b.n	8000f54 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	fab2 f282 	clz	r2, r2
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	40d3      	lsrs	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b4b      	ldr	r3, [pc, #300]	; (800108c <HW_TS_Init+0x1ac>)
 8000f5e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f60:	4b48      	ldr	r3, [pc, #288]	; (8001084 <HW_TS_Init+0x1a4>)
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HW_TS_Init+0x1b0>)
 8000f72:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HW_TS_Init+0x1b0>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	4a44      	ldr	r2, [pc, #272]	; (800108c <HW_TS_Init+0x1ac>)
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f86:	4a40      	ldr	r2, [pc, #256]	; (8001088 <HW_TS_Init+0x1a8>)
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	40d3      	lsrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d904      	bls.n	8000fa2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f98:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <HW_TS_Init+0x1b4>)
 8000f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9e:	801a      	strh	r2, [r3, #0]
 8000fa0:	e003      	b.n	8000faa <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <HW_TS_Init+0x1b4>)
 8000fa8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000faa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000fae:	f7ff fb81 	bl	80006b4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000fb2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000fb6:	f7ff fb69 	bl	800068c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d143      	bne.n	8001048 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <HW_TS_Init+0x1b8>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fc6:	4b35      	ldr	r3, [pc, #212]	; (800109c <HW_TS_Init+0x1bc>)
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	77fb      	strb	r3, [r7, #31]
 8000fd2:	e00c      	b.n	8000fee <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fd4:	7ffa      	ldrb	r2, [r7, #31]
 8000fd6:	4932      	ldr	r1, [pc, #200]	; (80010a0 <HW_TS_Init+0x1c0>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	330c      	adds	r3, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fe8:	7ffb      	ldrb	r3, [r7, #31]
 8000fea:	3301      	adds	r3, #1
 8000fec:	77fb      	strb	r3, [r7, #31]
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d9ef      	bls.n	8000fd4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <HW_TS_Init+0x1c4>)
 8000ff6:	2206      	movs	r2, #6
 8000ff8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HW_TS_Init+0x1a0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HW_TS_Init+0x1a0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800100c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HW_TS_Init+0x1a0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HW_TS_Init+0x1a0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001022:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HW_TS_Init+0x1c8>)
 8001026:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800102a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800102c:	2003      	movs	r0, #3
 800102e:	f002 fa68 	bl	8003502 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HW_TS_Init+0x1a0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HW_TS_Init+0x1a0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	e00a      	b.n	800105e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HW_TS_Init+0x1a0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001058:	2003      	movs	r0, #3
 800105a:	f002 fa44 	bl	80034e6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HW_TS_Init+0x1a0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	22ff      	movs	r2, #255	; 0xff
 8001066:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001068:	2200      	movs	r2, #0
 800106a:	2103      	movs	r1, #3
 800106c:	2003      	movs	r0, #3
 800106e:	f002 f9f8 	bl	8003462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001072:	2003      	movs	r0, #3
 8001074:	f002 fa0f 	bl	8003496 <HAL_NVIC_EnableIRQ>

  return;
 8001078:	bf00      	nop
}
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200001c4 	.word	0x200001c4
 8001084:	40002800 	.word	0x40002800
 8001088:	200001c8 	.word	0x200001c8
 800108c:	200001c9 	.word	0x200001c9
 8001090:	200001ca 	.word	0x200001ca
 8001094:	200001cc 	.word	0x200001cc
 8001098:	200000bc 	.word	0x200000bc
 800109c:	200000b8 	.word	0x200000b8
 80010a0:	20000024 	.word	0x20000024
 80010a4:	200000b4 	.word	0x200000b4
 80010a8:	58000800 	.word	0x58000800

080010ac <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b08b      	sub	sp, #44	; 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010c2:	f3ef 8310 	mrs	r3, PRIMASK
 80010c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80010c8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010d0:	e004      	b.n	80010dc <HW_TS_Create+0x30>
  {
    loop++;
 80010d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d6:	3301      	adds	r3, #1
 80010d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d80c      	bhi.n	80010fe <HW_TS_Create+0x52>
 80010e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010e8:	492c      	ldr	r1, [pc, #176]	; (800119c <HW_TS_Create+0xf0>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	330c      	adds	r3, #12
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1e9      	bne.n	80010d2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001102:	2b06      	cmp	r3, #6
 8001104:	d038      	beq.n	8001178 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001106:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800110a:	4924      	ldr	r1, [pc, #144]	; (800119c <HW_TS_Create+0xf0>)
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	330c      	adds	r3, #12
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f383 8810 	msr	PRIMASK, r3
}
 8001126:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001128:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800112c:	491b      	ldr	r1, [pc, #108]	; (800119c <HW_TS_Create+0xf0>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3310      	adds	r3, #16
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800113e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001142:	4916      	ldr	r1, [pc, #88]	; (800119c <HW_TS_Create+0xf0>)
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	330d      	adds	r3, #13
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001154:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001158:	4910      	ldr	r1, [pc, #64]	; (800119c <HW_TS_Create+0xf0>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800116e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001176:	e008      	b.n	800118a <HW_TS_Create+0xde>
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f383 8810 	msr	PRIMASK, r3
}
 8001182:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800118a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800118e:	4618      	mov	r0, r3
 8001190:	372c      	adds	r7, #44	; 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000024 	.word	0x20000024

080011a0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011aa:	f3ef 8310 	mrs	r3, PRIMASK
 80011ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80011b0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80011b8:	2003      	movs	r0, #3
 80011ba:	f002 f97a 	bl	80034b2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HW_TS_Stop+0x100>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	22ca      	movs	r2, #202	; 0xca
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HW_TS_Stop+0x100>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2253      	movs	r2, #83	; 0x53
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4933      	ldr	r1, [pc, #204]	; (80012a4 <HW_TS_Stop+0x104>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	330c      	adds	r3, #12
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d148      	bne.n	800127c <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbe2 	bl	80009b8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <HW_TS_Stop+0x108>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011fa:	7cfb      	ldrb	r3, [r7, #19]
 80011fc:	2b06      	cmp	r3, #6
 80011fe:	d135      	bne.n	800126c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HW_TS_Stop+0x10c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120c:	d108      	bne.n	8001220 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800120e:	bf00      	nop
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HW_TS_Stop+0x100>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f7      	bne.n	8001210 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HW_TS_Stop+0x100>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HW_TS_Stop+0x100>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001232:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001234:	bf00      	nop
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HW_TS_Stop+0x100>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f7      	beq.n	8001236 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HW_TS_Stop+0x100>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HW_TS_Stop+0x100>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800125a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HW_TS_Stop+0x110>)
 800125e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001262:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001264:	2003      	movs	r0, #3
 8001266:	f002 f94c 	bl	8003502 <HAL_NVIC_ClearPendingIRQ>
 800126a:	e007      	b.n	800127c <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HW_TS_Stop+0x114>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	7cfa      	ldrb	r2, [r7, #19]
 8001274:	429a      	cmp	r2, r3
 8001276:	d001      	beq.n	800127c <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001278:	f7ff fcc0 	bl	8000bfc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HW_TS_Stop+0x100>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001286:	2003      	movs	r0, #3
 8001288:	f002 f905 	bl	8003496 <HAL_NVIC_EnableIRQ>
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f383 8810 	msr	PRIMASK, r3
}
 8001296:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001298:	bf00      	nop
}
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200001c4 	.word	0x200001c4
 80012a4:	20000024 	.word	0x20000024
 80012a8:	200000b4 	.word	0x200000b4
 80012ac:	40002800 	.word	0x40002800
 80012b0:	58000800 	.word	0x58000800
 80012b4:	200000b5 	.word	0x200000b5

080012b8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	493c      	ldr	r1, [pc, #240]	; (80013b8 <HW_TS_Start+0x100>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	330c      	adds	r3, #12
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d103      	bne.n	80012e4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff5e 	bl	80011a0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012e4:	f3ef 8310 	mrs	r3, PRIMASK
 80012e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80012ea:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012ee:	b672      	cpsid	i
}
 80012f0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012f2:	2003      	movs	r0, #3
 80012f4:	f002 f8dd 	bl	80034b2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012f8:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HW_TS_Start+0x104>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	22ca      	movs	r2, #202	; 0xca
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <HW_TS_Start+0x104>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2253      	movs	r2, #83	; 0x53
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	492a      	ldr	r1, [pc, #168]	; (80013b8 <HW_TS_Start+0x100>)
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	330c      	adds	r3, #12
 800131c:	2202      	movs	r2, #2
 800131e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	4925      	ldr	r1, [pc, #148]	; (80013b8 <HW_TS_Start+0x100>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3308      	adds	r3, #8
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	4920      	ldr	r1, [pc, #128]	; (80013b8 <HW_TS_Start+0x100>)
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	3304      	adds	r3, #4
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fa8a 	bl	8000864 <linkTimer>
 8001350:	4603      	mov	r3, r0
 8001352:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HW_TS_Start+0x108>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HW_TS_Start+0x10c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	7c7a      	ldrb	r2, [r7, #17]
 8001362:	429a      	cmp	r2, r3
 8001364:	d002      	beq.n	800136c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001366:	f7ff fc49 	bl	8000bfc <RescheduleTimerList>
 800136a:	e013      	b.n	8001394 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	4912      	ldr	r1, [pc, #72]	; (80013b8 <HW_TS_Start+0x100>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3308      	adds	r3, #8
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	8a7b      	ldrh	r3, [r7, #18]
 8001380:	79fa      	ldrb	r2, [r7, #7]
 8001382:	1ac9      	subs	r1, r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <HW_TS_Start+0x100>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4403      	add	r3, r0
 8001390:	3308      	adds	r3, #8
 8001392:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HW_TS_Start+0x104>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800139e:	2003      	movs	r0, #3
 80013a0:	f002 f879 	bl	8003496 <HAL_NVIC_EnableIRQ>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f383 8810 	msr	PRIMASK, r3
}
 80013ae:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013b0:	bf00      	nop
}
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000024 	.word	0x20000024
 80013bc:	200001c4 	.word	0x200001c4
 80013c0:	200000b4 	.word	0x200000b4
 80013c4:	200000b5 	.word	0x200000b5

080013c8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	460b      	mov	r3, r1
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4798      	blx	r3

  return;
 80013da:	bf00      	nop
}
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <LL_RCC_LSE_SetDriveCapability>:
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f2:	f023 0218 	bic.w	r2, r3, #24
 80013f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800141c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4313      	orrs	r3, r2
 8001424:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800144e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001464:	68fb      	ldr	r3, [r7, #12]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f000 fc0d 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f825 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001482:	f000 f9c1 	bl	8001808 <MX_GPIO_Init>
  MX_DMA_Init();
 8001486:	f000 f9ad 	bl	80017e4 <MX_DMA_Init>
  MX_RF_Init();
 800148a:	f000 f92d 	bl	80016e8 <MX_RF_Init>
  MX_RTC_Init();
 800148e:	f000 f933 	bl	80016f8 <MX_RTC_Init>
  MX_ADC1_Init();
 8001492:	f000 f8c5 	bl	8001620 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001496:	f000 f959 	bl	800174c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t str[] = "Hello World!\r\n";
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <main+0x50>)
 800149c:	463c      	mov	r4, r7
 800149e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a0:	c407      	stmia	r4!, {r0, r1, r2}
 80014a2:	8023      	strh	r3, [r4, #0]
 80014a4:	3402      	adds	r4, #2
 80014a6:	0c1b      	lsrs	r3, r3, #16
 80014a8:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit_DMA(&huart1, str, sizeof(str));
 80014aa:	463b      	mov	r3, r7
 80014ac:	220f      	movs	r2, #15
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <main+0x54>)
 80014b2:	f004 fc4b 	bl	8005d4c <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80014b6:	f7ff f82b 	bl	8000510 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295
 80014be:	f008 fa0b 	bl	80098d8 <UTIL_SEQ_Run>
 80014c2:	e7fa      	b.n	80014ba <main+0x46>
 80014c4:	08009db8 	.word	0x08009db8
 80014c8:	200002f0 	.word	0x200002f0

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0ae      	sub	sp, #184	; 0xb8
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014d6:	2248      	movs	r2, #72	; 0x48
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f008 fc4a 	bl	8009d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2250      	movs	r2, #80	; 0x50
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f008 fc3a 	bl	8009d74 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800150a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800150e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001524:	f002 fc34 	bl	8003d90 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff ff5a 	bl	80013e2 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b3b      	ldr	r3, [pc, #236]	; (800161c <SystemClock_Config+0x150>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001536:	4a39      	ldr	r2, [pc, #228]	; (800161c <SystemClock_Config+0x150>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <SystemClock_Config+0x150>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800154a:	2327      	movs	r3, #39	; 0x27
 800154c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001552:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001554:	2301      	movs	r3, #1
 8001556:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800155e:	2301      	movs	r3, #1
 8001560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001564:	2340      	movs	r3, #64	; 0x40
 8001566:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001570:	2360      	movs	r3, #96	; 0x60
 8001572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001580:	4618      	mov	r0, r3
 8001582:	f003 f831 	bl	80045e8 <HAL_RCC_OscConfig>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800158c:	f000 f97c 	bl	8001888 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001590:	236f      	movs	r3, #111	; 0x6f
 8001592:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001594:	2302      	movs	r3, #2
 8001596:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fba4 	bl	8004d00 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015be:	f000 f963 	bl	8001888 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80015c2:	f643 4301 	movw	r3, #15361	; 0x3c01
 80015c6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80015c8:	2318      	movs	r3, #24
 80015ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80015cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80015d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80015d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015dc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80015de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80015f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80015fa:	2302      	movs	r3, #2
 80015fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80015fe:	2300      	movs	r3, #0
 8001600:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4618      	mov	r0, r3
 8001606:	f003 ffbc 	bl	8005582 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001610:	f000 f93a 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001614:	bf00      	nop
 8001616:	37b8      	adds	r7, #184	; 0xb8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58000400 	.word	0x58000400

08001620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <MX_ADC1_Init+0xc0>)
 800163a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <MX_ADC1_Init+0xbc>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <MX_ADC1_Init+0xbc>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001656:	2204      	movs	r2, #4
 8001658:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <MX_ADC1_Init+0xbc>)
 800165c:	2200      	movs	r2, #0
 800165e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001662:	2200      	movs	r2, #0
 8001664:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001668:	2201      	movs	r2, #1
 800166a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_ADC1_Init+0xbc>)
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_ADC1_Init+0xbc>)
 800167c:	2200      	movs	r2, #0
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <MX_ADC1_Init+0xbc>)
 800168a:	2200      	movs	r2, #0
 800168c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001696:	4811      	ldr	r0, [pc, #68]	; (80016dc <MX_ADC1_Init+0xbc>)
 8001698:	f000 fdde 	bl	8002258 <HAL_ADC_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80016a2:	f000 f8f1 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_ADC1_Init+0xc4>)
 80016a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016aa:	2306      	movs	r3, #6
 80016ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016b2:	237f      	movs	r3, #127	; 0x7f
 80016b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016b6:	2304      	movs	r3, #4
 80016b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <MX_ADC1_Init+0xbc>)
 80016c4:	f001 f836 	bl	8002734 <HAL_ADC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80016ce:	f000 f8db 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200003e0 	.word	0x200003e0
 80016e0:	50040000 	.word	0x50040000
 80016e4:	04300002 	.word	0x04300002

080016e8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_RTC_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <MX_RTC_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_RTC_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_RTC_Init+0x4c>)
 800170a:	220f      	movs	r2, #15
 800170c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <MX_RTC_Init+0x4c>)
 8001710:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001714:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_RTC_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_RTC_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_RTC_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_RTC_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_RTC_Init+0x4c>)
 8001730:	f004 f9ae 	bl	8005a90 <HAL_RTC_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800173a:	f000 f8a5 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000444 	.word	0x20000444
 8001748:	40002800 	.word	0x40002800

0800174c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <MX_USART1_UART_Init+0x94>)
 8001754:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800175c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001764:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <MX_USART1_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001772:	220c      	movs	r2, #12
 8001774:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_USART1_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_USART1_UART_Init+0x90>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001794:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_USART1_UART_Init+0x90>)
 8001796:	f004 fa89 	bl	8005cac <HAL_UART_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017a0:	f000 f872 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a4:	2100      	movs	r1, #0
 80017a6:	480d      	ldr	r0, [pc, #52]	; (80017dc <MX_USART1_UART_Init+0x90>)
 80017a8:	f004 ffe2 	bl	8006770 <HAL_UARTEx_SetTxFifoThreshold>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017b2:	f000 f869 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4808      	ldr	r0, [pc, #32]	; (80017dc <MX_USART1_UART_Init+0x90>)
 80017ba:	f005 f817 	bl	80067ec <HAL_UARTEx_SetRxFifoThreshold>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017c4:	f000 f860 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <MX_USART1_UART_Init+0x90>)
 80017ca:	f004 ff98 	bl	80066fe <HAL_UARTEx_DisableFifoMode>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017d4:	f000 f858 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200002f0 	.word	0x200002f0
 80017e0:	40013800 	.word	0x40013800

080017e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017e8:	2004      	movs	r0, #4
 80017ea:	f7ff fe10 	bl	800140e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7ff fe0d 	bl	800140e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	203a      	movs	r0, #58	; 0x3a
 80017fa:	f001 fe32 	bl	8003462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80017fe:	203a      	movs	r0, #58	; 0x3a
 8001800:	f001 fe49 	bl	8003496 <HAL_NVIC_EnableIRQ>

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	2004      	movs	r0, #4
 800181e:	f7ff fe0f 	bl	8001440 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2002      	movs	r0, #2
 8001824:	f7ff fe0c 	bl	8001440 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2123      	movs	r1, #35	; 0x23
 800182c:	4813      	ldr	r0, [pc, #76]	; (800187c <MX_GPIO_Init+0x74>)
 800182e:	f002 fa5b 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001832:	2310      	movs	r3, #16
 8001834:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_GPIO_Init+0x78>)
 8001838:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183a:	2301      	movs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4810      	ldr	r0, [pc, #64]	; (8001884 <MX_GPIO_Init+0x7c>)
 8001844:	f002 f8e0 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001848:	2323      	movs	r3, #35	; 0x23
 800184a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <MX_GPIO_Init+0x74>)
 800185e:	f002 f8d3 	bl	8003a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	200a      	movs	r0, #10
 8001868:	f001 fdfb 	bl	8003462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800186c:	200a      	movs	r0, #10
 800186e:	f001 fe12 	bl	8003496 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	48000400 	.word	0x48000400
 8001880:	10110000 	.word	0x10110000
 8001884:	48000800 	.word	0x48000800

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>

08001892 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_AHB2_GRP1_EnableClock>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001934:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4313      	orrs	r3, r2
 8001960:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4013      	ands	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001980:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001984:	f7ff ffaf 	bl	80018e6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	202e      	movs	r0, #46	; 0x2e
 800198e:	f001 fd68 	bl	8003462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001992:	202e      	movs	r0, #46	; 0x2e
 8001994:	f001 fd7f 	bl	8003496 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_ADC_MspInit+0x50>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d112      	bne.n	80019e4 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019c2:	f7ff ff77 	bl	80018b4 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	2004      	movs	r0, #4
 80019c8:	f7ff ff74 	bl	80018b4 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019cc:	2301      	movs	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d0:	2303      	movs	r3, #3
 80019d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	4804      	ldr	r0, [pc, #16]	; (80019f0 <HAL_ADC_MspInit+0x54>)
 80019e0:	f002 f812 	bl	8003a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	50040000 	.word	0x50040000
 80019f0:	48000800 	.word	0x48000800

080019f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_RTC_MspInit+0x28>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d105      	bne.n	8001a12 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a06:	f7ff ff44 	bl	8001892 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a0a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a0e:	f7ff ff83 	bl	8001918 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40002800 	.word	0x40002800

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_UART_MspInit+0xac>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d13f      	bne.n	8001ac2 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a46:	f7ff ff80 	bl	800194a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f7ff ff32 	bl	80018b4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a50:	23c0      	movs	r3, #192	; 0xc0
 8001a52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a60:	2307      	movs	r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4819      	ldr	r0, [pc, #100]	; (8001ad0 <HAL_UART_MspInit+0xb0>)
 8001a6c:	f001 ffcc 	bl	8003a08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_UART_MspInit+0xb8>)
 8001a74:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a78:	220f      	movs	r2, #15
 8001a7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a7e:	2210      	movs	r2, #16
 8001a80:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001aa6:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001aa8:	f001 fd3a 	bl	8003520 <HAL_DMA_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8001ab2:	f7ff fee9 	bl	8001888 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001aba:	679a      	str	r2, [r3, #120]	; 0x78
 8001abc:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <HAL_UART_MspInit+0xb4>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	20000380 	.word	0x20000380
 8001ad8:	40020444 	.word	0x40020444

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 f910 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b34:	2010      	movs	r0, #16
 8001b36:	f002 f8ef 	bl	8003d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b42:	f002 f901 	bl	8003d48 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <DMA2_Channel4_IRQHandler+0x10>)
 8001b52:	f001 fe08 	bl	8003766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000380 	.word	0x20000380

08001b60 <RTC_WKUP_IRQHandler>:

*/

void RTC_WKUP_IRQHandler(void)

{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0

HW_TS_RTC_Wakeup_Handler();
 8001b64:	f7ff f8e8 	bl	8000d38 <HW_TS_RTC_Wakeup_Handler>

}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <IPCC_C1_RX_IRQHandler>:

*/

void IPCC_C1_RX_IRQHandler(void)

{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

HW_IPCC_Rx_Handler();
 8001b70:	f007 fd1c 	bl	80095ac <HW_IPCC_Rx_Handler>

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <IPCC_C1_TX_IRQHandler>:

*/

void IPCC_C1_TX_IRQHandler(void)

{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

HW_IPCC_Tx_Handler();
 8001b7c:	f007 fd4e 	bl	800961c <HW_IPCC_Tx_Handler>

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <SystemInit+0x98>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <SystemInit+0x98>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001bb0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <SystemInit+0x9c>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bce:	f023 0305 	bic.w	r3, r3, #5
 8001bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bee:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <SystemInit+0xa0>)
 8001bf0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <SystemInit+0xa0>)
 8001bf8:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00
 8001c20:	faf6fefb 	.word	0xfaf6fefb
 8001c24:	22041000 	.word	0x22041000

08001c28 <CopyDataInit>:
 8001c28:	58d4      	ldr	r4, [r2, r3]
 8001c2a:	50c4      	str	r4, [r0, r3]
 8001c2c:	3304      	adds	r3, #4

08001c2e <LoopCopyDataInit>:
 8001c2e:	18c4      	adds	r4, r0, r3
 8001c30:	428c      	cmp	r4, r1
 8001c32:	d3f9      	bcc.n	8001c28 <CopyDataInit>
 8001c34:	4770      	bx	lr

08001c36 <FillZerobss>:
 8001c36:	6003      	str	r3, [r0, #0]
 8001c38:	3004      	adds	r0, #4

08001c3a <LoopFillZerobss>:
 8001c3a:	4288      	cmp	r0, r1
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>
 8001c3e:	4770      	bx	lr

08001c40 <Reset_Handler>:
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <LoopForever+0x4>)
 8001c42:	4685      	mov	sp, r0
 8001c44:	f7ff ff9e 	bl	8001b84 <SystemInit>
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <LoopForever+0x8>)
 8001c4a:	490c      	ldr	r1, [pc, #48]	; (8001c7c <LoopForever+0xc>)
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <LoopForever+0x10>)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f7ff ffed 	bl	8001c2e <LoopCopyDataInit>
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <LoopForever+0x14>)
 8001c56:	490c      	ldr	r1, [pc, #48]	; (8001c88 <LoopForever+0x18>)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f7ff ffee 	bl	8001c3a <LoopFillZerobss>
 8001c5e:	480b      	ldr	r0, [pc, #44]	; (8001c8c <LoopForever+0x1c>)
 8001c60:	490b      	ldr	r1, [pc, #44]	; (8001c90 <LoopForever+0x20>)
 8001c62:	2300      	movs	r3, #0
 8001c64:	f7ff ffe9 	bl	8001c3a <LoopFillZerobss>
 8001c68:	f008 f852 	bl	8009d10 <__libc_init_array>
 8001c6c:	f7ff fc02 	bl	8001474 <main>

08001c70 <LoopForever>:
 8001c70:	e7fe      	b.n	8001c70 <LoopForever>
 8001c72:	0000      	.short	0x0000
 8001c74:	20030000 	.word	0x20030000
 8001c78:	20000004 	.word	0x20000004
 8001c7c:	20000024 	.word	0x20000024
 8001c80:	0800a050 	.word	0x0800a050
 8001c84:	200001a8 	.word	0x200001a8
 8001c88:	20000668 	.word	0x20000668
 8001c8c:	200301e0 	.word	0x200301e0
 8001c90:	20030a57 	.word	0x20030a57

08001c94 <ADC1_IRQHandler>:
 8001c94:	e7fe      	b.n	8001c94 <ADC1_IRQHandler>
	...

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_Init+0x3c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <HAL_Init+0x3c>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f001 fbcc 	bl	800344c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 f80f 	bl	8001cd8 <HAL_InitTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	e001      	b.n	8001cca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cc6:	f7ff fe59 	bl	800197c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cca:	79fb      	ldrb	r3, [r7, #7]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	58004000 	.word	0x58004000

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_InitTick+0x6c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d024      	beq.n	8001d36 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cec:	f003 f9b4 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_InitTick+0x6c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fbe2 	bl	80034ce <HAL_SYSTICK_Config>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10f      	bne.n	8001d30 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	d809      	bhi.n	8001d2a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d16:	2200      	movs	r2, #0
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1e:	f001 fba0 	bl	8003462 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_InitTick+0x70>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	e007      	b.n	8001d3a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e004      	b.n	8001d3a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e001      	b.n	8001d3a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	20000008 	.word	0x20000008

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	20000468 	.word	0x20000468

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000468 	.word	0x20000468

08001d8c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_GetTickPrio+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000008 	.word	0x20000008

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffe2 	bl	8001d74 <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffd2 	bl	8001d74 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
    {
    }
  }
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000000c 	.word	0x2000000c

08001dec <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_SuspendTick+0x1c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_SuspendTick+0x1c>)
 8001df6:	f023 0302 	bic.w	r3, r3, #2
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_ResumeTick+0x1c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_ResumeTick+0x1c>)
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	609a      	str	r2, [r3, #8]
#endif
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3360      	adds	r3, #96	; 0x60
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <LL_ADC_SetOffset+0x44>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	03fff000 	.word	0x03fff000

08001edc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3360      	adds	r3, #96	; 0x60
 8001eea:	461a      	mov	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3360      	adds	r3, #96	; 0x60
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f32:	bf00      	nop
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f56:	2300      	movs	r3, #0
#endif
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3330      	adds	r3, #48	; 0x30
 8001f74:	461a      	mov	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	4413      	add	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	211f      	movs	r1, #31
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	f003 011f 	and.w	r1, r3, #31
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	431a      	orrs	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3314      	adds	r3, #20
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	0e5b      	lsrs	r3, r3, #25
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	0d1b      	lsrs	r3, r3, #20
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	2107      	movs	r1, #7
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	0d1b      	lsrs	r3, r3, #20
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0318 	and.w	r3, r3, #24
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002038:	40d9      	lsrs	r1, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	400b      	ands	r3, r1
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	431a      	orrs	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	0007ffff 	.word	0x0007ffff

0800205c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800206c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6093      	str	r3, [r2, #8]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002094:	d101      	bne.n	800209a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	f043 0202 	orr.w	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <LL_ADC_IsEnabled+0x18>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <LL_ADC_IsEnabled+0x1a>
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d101      	bne.n	8002186 <LL_ADC_IsDisableOngoing+0x18>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <LL_ADC_IsDisableOngoing+0x1a>
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021a8:	f043 0204 	orr.w	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d101      	bne.n	80021fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b08      	cmp	r3, #8
 8002244:	d101      	bne.n	800224a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e12e      	b.n	80024d4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fb89 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff feef 	bl	8002080 <LL_ADC_IsDeepPowerDownEnabled>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fed5 	bl	800205c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff0a 	bl	80020d0 <LL_ADC_IsInternalRegulatorEnabled>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d115      	bne.n	80022ee <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff feee 	bl	80020a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022cc:	4b83      	ldr	r3, [pc, #524]	; (80024dc <HAL_ADC_Init+0x284>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	4a83      	ldr	r2, [pc, #524]	; (80024e0 <HAL_ADC_Init+0x288>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e0:	e002      	b.n	80022e8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff feec 	bl	80020d0 <LL_ADC_IsInternalRegulatorEnabled>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f043 0210 	orr.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff60 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 8002324:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80c7 	bne.w	80024c2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 80c3 	bne.w	80024c2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fef9 	bl	8002148 <LL_ADC_IsEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800235c:	4861      	ldr	r0, [pc, #388]	; (80024e4 <HAL_ADC_Init+0x28c>)
 800235e:	f7ff fef3 	bl	8002148 <LL_ADC_IsEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4619      	mov	r1, r3
 800236e:	485e      	ldr	r0, [pc, #376]	; (80024e8 <HAL_ADC_Init+0x290>)
 8002370:	f7ff fd5c 	bl	8001e2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e5b      	ldrb	r3, [r3, #25]
 8002378:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800237e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002384:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800238a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002392:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002394:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d106      	bne.n	80023b4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	3b01      	subs	r3, #1
 80023ac:	045b      	lsls	r3, r3, #17
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	4b45      	ldr	r3, [pc, #276]	; (80024ec <HAL_ADC_Init+0x294>)
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fefb 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 80023ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff1c 	bl	8002232 <LL_ADC_INJ_IsConversionOngoing>
 80023fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d13d      	bne.n	800247e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d13a      	bne.n	800247e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800240c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002414:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002424:	f023 0302 	bic.w	r3, r3, #2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	69b9      	ldr	r1, [r7, #24]
 800242e:	430b      	orrs	r3, r1
 8002430:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002438:	2b01      	cmp	r3, #1
 800243a:	d118      	bne.n	800246e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002446:	f023 0304 	bic.w	r3, r3, #4
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800245e:	430a      	orrs	r2, r1
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	611a      	str	r2, [r3, #16]
 800246c:	e007      	b.n	800247e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10c      	bne.n	80024a0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f023 010f 	bic.w	r1, r3, #15
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	1e5a      	subs	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
 800249e:	e007      	b.n	80024b0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 020f 	bic.w	r2, r2, #15
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f023 0303 	bic.w	r3, r3, #3
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
 80024c0:	e007      	b.n	80024d2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f043 0210 	orr.w	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000004 	.word	0x20000004
 80024e0:	053e2d63 	.word	0x053e2d63
 80024e4:	50040000 	.word	0x50040000
 80024e8:	50040300 	.word	0x50040300
 80024ec:	fff0c007 	.word	0xfff0c007

080024f0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fe71 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d140      	bne.n	800258a <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Start+0x26>
 8002512:	2302      	movs	r3, #2
 8002514:	e03c      	b.n	8002590 <HAL_ADC_Start+0xa0>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fd8a 	bl	8003038 <ADC_Enable>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d128      	bne.n	8002580 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254e:	d106      	bne.n	800255e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f023 0206 	bic.w	r2, r3, #6
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	659a      	str	r2, [r3, #88]	; 0x58
 800255c:	e002      	b.n	8002564 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	221c      	movs	r2, #28
 800256a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fe0b 	bl	8002194 <LL_ADC_REG_StartConversion>
 800257e:	e006      	b.n	800258e <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002588:	e001      	b.n	800258e <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Stop+0x16>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e023      	b.n	80025f6 <HAL_ADC_Stop+0x5e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80025b6:	2103      	movs	r1, #3
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fc81 	bl	8002ec0 <ADC_ConversionStop>
 80025be:	4603      	mov	r3, r0
 80025c0:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fdaf 	bl	800312c <ADC_Disable>
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_ADC_Stop+0x54>
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d102      	bne.n	8002616 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002610:	2308      	movs	r3, #8
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e010      	b.n	8002638 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_ADC_PollForConversion+0x36>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e06d      	b.n	8002710 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002634:	2304      	movs	r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002638:	f7ff fb9c 	bl	8001d74 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800263e:	e021      	b.n	8002684 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d01d      	beq.n	8002684 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002648:	f7ff fb94 	bl	8001d74 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <HAL_ADC_PollForConversion+0x60>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d112      	bne.n	8002684 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	f043 0204 	orr.w	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e045      	b.n	8002710 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0d6      	beq.n	8002640 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fc4b 	bl	8001f3e <LL_ADC_REG_IsTriggerSourceSWStart>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01c      	beq.n	80026e8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7e5b      	ldrb	r3, [r3, #25]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d111      	bne.n	80026e8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d104      	bne.n	80026f8 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2208      	movs	r2, #8
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e00a      	b.n	800270e <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d103      	bne.n	800270e <HAL_ADC_PollForConversion+0x110>
#endif
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	220c      	movs	r2, #12
 800270c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0b6      	sub	sp, #216	; 0xd8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x22>
 8002752:	2302      	movs	r3, #2
 8002754:	e39f      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x762>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fd3e 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 8384 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	f7ff fbf1 	bl	8001f64 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fd2c 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 800278c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fd4c 	bl	8002232 <LL_ADC_INJ_IsConversionOngoing>
 800279a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800279e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 81a6 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f040 81a1 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	461a      	mov	r2, r3
 80027c0:	f7ff fbfc 	bl	8001fbc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	08db      	lsrs	r3, r3, #3
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d00a      	beq.n	80027fc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027f6:	f7ff fb4d 	bl	8001e94 <LL_ADC_SetOffset>
 80027fa:	e17b      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb6a 	bl	8001edc <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <HAL_ADC_ConfigChannel+0xf4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fb5f 	bl	8001edc <LL_ADC_GetOffsetChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	f003 021f 	and.w	r2, r3, #31
 8002826:	e01e      	b.n	8002866 <HAL_ADC_ConfigChannel+0x132>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fb54 	bl	8001edc <LL_ADC_GetOffsetChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800284a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800284e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8002856:	2320      	movs	r3, #32
 8002858:	e004      	b.n	8002864 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800285a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d105      	bne.n	800287e <HAL_ADC_ConfigChannel+0x14a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	e018      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x17c>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800289a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e004      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80028a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d106      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fb23 	bl	8001f08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2101      	movs	r1, #1
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fb07 	bl	8001edc <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x1ba>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fafc 	bl	8001edc <LL_ADC_GetOffsetChannel>
 80028e4:	4603      	mov	r3, r0
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	e01e      	b.n	800292c <HAL_ADC_ConfigChannel+0x1f8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff faf1 	bl	8001edc <LL_ADC_GetOffsetChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800290c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x210>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	e018      	b.n	8002976 <HAL_ADC_ConfigChannel+0x242>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002958:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800295c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e004      	b.n	8002976 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800296c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	429a      	cmp	r2, r3
 8002978:	d106      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fac0 	bl	8001f08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2102      	movs	r1, #2
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff faa4 	bl	8001edc <LL_ADC_GetOffsetChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x280>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2102      	movs	r1, #2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fa99 	bl	8001edc <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	e01e      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x2be>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fa8e 	bl	8001edc <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e004      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x2d6>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	e016      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x304>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e004      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d106      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2102      	movs	r1, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fa5f 	bl	8001f08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2103      	movs	r1, #3
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fa43 	bl	8001edc <LL_ADC_GetOffsetChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x342>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2103      	movs	r1, #3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fa38 	bl	8001edc <LL_ADC_GetOffsetChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	0e9b      	lsrs	r3, r3, #26
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	e017      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x372>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fa2d 	bl	8001edc <LL_ADC_GetOffsetChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a90:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	e003      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x38a>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	e011      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x3ae>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ace:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d106      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2103      	movs	r1, #3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fa0a 	bl	8001f08 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fb25 	bl	8002148 <LL_ADC_IsEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 81c2 	bne.w	8002e8a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f7ff fa7e 	bl	8002014 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a8e      	ldr	r2, [pc, #568]	; (8002d58 <HAL_ADC_ConfigChannel+0x624>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	f040 8130 	bne.w	8002d84 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10b      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x418>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	bf94      	ite	ls
 8002b44:	2301      	movls	r3, #1
 8002b46:	2300      	movhi	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e019      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x44c>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002b64:	2320      	movs	r3, #32
 8002b66:	e003      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2b09      	cmp	r3, #9
 8002b78:	bf94      	ite	ls
 8002b7a:	2301      	movls	r3, #1
 8002b7c:	2300      	movhi	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d079      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x46c>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	3301      	adds	r3, #1
 8002b98:	069b      	lsls	r3, r3, #26
 8002b9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b9e:	e015      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x498>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002bb8:	2320      	movs	r3, #32
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	069b      	lsls	r3, r3, #26
 8002bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x4b8>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2101      	movs	r1, #1
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	e017      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x4e8>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e003      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	ea42 0103 	orr.w	r1, r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x50e>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	3301      	adds	r3, #1
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	051b      	lsls	r3, r3, #20
 8002c40:	e018      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x540>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	e003      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	3301      	adds	r3, #1
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c74:	430b      	orrs	r3, r1
 8002c76:	e080      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x560>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0e9b      	lsrs	r3, r3, #26
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	069b      	lsls	r3, r3, #26
 8002c8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c92:	e015      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x58c>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002cac:	2320      	movs	r3, #32
 8002cae:	e003      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	069b      	lsls	r3, r3, #26
 8002cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x5ac>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	e017      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x5dc>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	61fb      	str	r3, [r7, #28]
  return result;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	e003      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	ea42 0103 	orr.w	r1, r2, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10d      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x608>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	3301      	adds	r3, #1
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	3b1e      	subs	r3, #30
 8002d34:	051b      	lsls	r3, r3, #20
 8002d36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	e01d      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x644>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	613b      	str	r3, [r7, #16]
  return result;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d103      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e005      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x630>
 8002d58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f003 021f 	and.w	r2, r3, #31
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b1e      	subs	r3, #30
 8002d72:	051b      	lsls	r3, r3, #20
 8002d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7ff f91c 	bl	8001fbc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_ADC_ConfigChannel+0x76c>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d07c      	beq.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d90:	4844      	ldr	r0, [pc, #272]	; (8002ea4 <HAL_ADC_ConfigChannel+0x770>)
 8002d92:	f7ff f871 	bl	8001e78 <LL_ADC_GetCommonPathInternalCh>
 8002d96:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d9a:	4843      	ldr	r0, [pc, #268]	; (8002ea8 <HAL_ADC_ConfigChannel+0x774>)
 8002d9c:	f7ff f9d4 	bl	8002148 <LL_ADC_IsEnabled>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d15e      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a40      	ldr	r2, [pc, #256]	; (8002eac <HAL_ADC_ConfigChannel+0x778>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d127      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x6cc>
 8002db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d121      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a39      	ldr	r2, [pc, #228]	; (8002ea8 <HAL_ADC_ConfigChannel+0x774>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d161      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4834      	ldr	r0, [pc, #208]	; (8002ea4 <HAL_ADC_ConfigChannel+0x770>)
 8002dd2:	f7ff f83e 	bl	8001e52 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_ADC_ConfigChannel+0x77c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	4a35      	ldr	r2, [pc, #212]	; (8002eb4 <HAL_ADC_ConfigChannel+0x780>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002df0:	e002      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f9      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dfe:	e044      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <HAL_ADC_ConfigChannel+0x784>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d113      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x6fe>
 8002e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <HAL_ADC_ConfigChannel+0x774>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d134      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481e      	ldr	r0, [pc, #120]	; (8002ea4 <HAL_ADC_ConfigChannel+0x770>)
 8002e2c:	f7ff f811 	bl	8001e52 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e30:	e02b      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a21      	ldr	r2, [pc, #132]	; (8002ebc <HAL_ADC_ConfigChannel+0x788>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d126      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
 8002e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d120      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_ADC_ConfigChannel+0x774>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d11b      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4811      	ldr	r0, [pc, #68]	; (8002ea4 <HAL_ADC_ConfigChannel+0x770>)
 8002e5e:	f7fe fff8 	bl	8001e52 <LL_ADC_SetCommonPathInternalCh>
 8002e62:	e012      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e76:	e008      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002e92:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	37d8      	adds	r7, #216	; 0xd8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	80080000 	.word	0x80080000
 8002ea4:	50040300 	.word	0x50040300
 8002ea8:	50040000 	.word	0x50040000
 8002eac:	c7520000 	.word	0xc7520000
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	053e2d63 	.word	0x053e2d63
 8002eb8:	cb840000 	.word	0xcb840000
 8002ebc:	80000001 	.word	0x80000001

08002ec0 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f984 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 8002edc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f9a5 	bl	8002232 <LL_ADC_INJ_IsConversionOngoing>
 8002ee8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8098 	beq.w	8003028 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d02a      	beq.n	8002f5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7e5b      	ldrb	r3, [r3, #25]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d126      	bne.n	8002f5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7e1b      	ldrb	r3, [r3, #24]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d122      	bne.n	8002f5c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f1a:	e014      	b.n	8002f46 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4a45      	ldr	r2, [pc, #276]	; (8003034 <ADC_ConversionStop+0x174>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d90d      	bls.n	8002f40 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f043 0210 	orr.w	r2, r3, #16
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e074      	b.n	800302a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d1e3      	bne.n	8002f1c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d014      	beq.n	8002f8c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f93c 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f8f9 	bl	800216e <LL_ADC_IsDisableOngoing>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff f918 	bl	80021bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d014      	beq.n	8002fbc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f94b 	bl	8002232 <LL_ADC_INJ_IsConversionOngoing>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff f8e1 	bl	800216e <LL_ADC_IsDisableOngoing>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff f927 	bl	800220a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d005      	beq.n	8002fce <ADC_ConversionStop+0x10e>
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d105      	bne.n	8002fd4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fc8:	230c      	movs	r3, #12
 8002fca:	617b      	str	r3, [r7, #20]
        break;
 8002fcc:	e005      	b.n	8002fda <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fce:	2308      	movs	r3, #8
 8002fd0:	617b      	str	r3, [r7, #20]
        break;
 8002fd2:	e002      	b.n	8002fda <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	617b      	str	r3, [r7, #20]
        break;
 8002fd8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002fda:	f7fe fecb 	bl	8001d74 <HAL_GetTick>
 8002fde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fe0:	e01b      	b.n	800301a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fe2:	f7fe fec7 	bl	8001d74 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b05      	cmp	r3, #5
 8002fee:	d914      	bls.n	800301a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f043 0210 	orr.w	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1dc      	bne.n	8002fe2 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	a33fffff 	.word	0xa33fffff

08003038 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003040:	2300      	movs	r3, #0
 8003042:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f87d 	bl	8002148 <LL_ADC_IsEnabled>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d15e      	bne.n	8003112 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	4b30      	ldr	r3, [pc, #192]	; (800311c <ADC_Enable+0xe4>)
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00d      	beq.n	800307e <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e04a      	b.n	8003114 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f838 	bl	80020f8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003088:	4825      	ldr	r0, [pc, #148]	; (8003120 <ADC_Enable+0xe8>)
 800308a:	f7fe fef5 	bl	8001e78 <LL_ADC_GetCommonPathInternalCh>
 800308e:	4603      	mov	r3, r0
 8003090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <ADC_Enable+0xec>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <ADC_Enable+0xf0>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	3301      	adds	r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030aa:	e002      	b.n	80030b2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f9      	bne.n	80030ac <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80030b8:	f7fe fe5c 	bl	8001d74 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030be:	e021      	b.n	8003104 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff f83f 	bl	8002148 <LL_ADC_IsEnabled>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff f80f 	bl	80020f8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030da:	f7fe fe4b 	bl	8001d74 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d90d      	bls.n	8003104 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e007      	b.n	8003114 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d1d6      	bne.n	80030c0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	8000003f 	.word	0x8000003f
 8003120:	50040300 	.word	0x50040300
 8003124:	20000004 	.word	0x20000004
 8003128:	053e2d63 	.word	0x053e2d63

0800312c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f818 	bl	800216e <LL_ADC_IsDisableOngoing>
 800313e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe ffff 	bl	8002148 <LL_ADC_IsEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d047      	beq.n	80031e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d144      	bne.n	80031e0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030d 	and.w	r3, r3, #13
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10c      	bne.n	800317e <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe ffd9 	bl	8002120 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2203      	movs	r2, #3
 8003174:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003176:	f7fe fdfd 	bl	8001d74 <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800317c:	e029      	b.n	80031d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e023      	b.n	80031e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800319a:	f7fe fdeb 	bl	8001d74 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d914      	bls.n	80031d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1dc      	bne.n	800319a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003208:	4013      	ands	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321e:	4a04      	ldr	r2, [pc, #16]	; (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	60d3      	str	r3, [r2, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <__NVIC_GetPriorityGrouping+0x18>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 0307 	and.w	r3, r3, #7
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db0b      	blt.n	800327a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	f003 021f 	and.w	r2, r3, #31
 8003268:	4907      	ldr	r1, [pc, #28]	; (8003288 <__NVIC_EnableIRQ+0x38>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2001      	movs	r0, #1
 8003272:	fa00 f202 	lsl.w	r2, r0, r2
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db12      	blt.n	80032c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	490a      	ldr	r1, [pc, #40]	; (80032d0 <__NVIC_DisableIRQ+0x44>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	3320      	adds	r3, #32
 80032b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032b8:	f3bf 8f4f 	dsb	sy
}
 80032bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032be:	f3bf 8f6f 	isb	sy
}
 80032c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100

080032d4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db0c      	blt.n	8003300 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	4907      	ldr	r1, [pc, #28]	; (800330c <__NVIC_SetPendingIRQ+0x38>)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2001      	movs	r0, #1
 80032f6:	fa00 f202 	lsl.w	r2, r0, r2
 80032fa:	3340      	adds	r3, #64	; 0x40
 80032fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000e100 	.word	0xe000e100

08003310 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	2b00      	cmp	r3, #0
 8003320:	db0c      	blt.n	800333c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	4907      	ldr	r1, [pc, #28]	; (8003348 <__NVIC_ClearPendingIRQ+0x38>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	2001      	movs	r0, #1
 8003332:	fa00 f202 	lsl.w	r2, r0, r2
 8003336:	3360      	adds	r3, #96	; 0x60
 8003338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db0a      	blt.n	8003376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	490c      	ldr	r1, [pc, #48]	; (8003398 <__NVIC_SetPriority+0x4c>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003374:	e00a      	b.n	800338c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4908      	ldr	r1, [pc, #32]	; (800339c <__NVIC_SetPriority+0x50>)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3b04      	subs	r3, #4
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	440b      	add	r3, r1
 800338a:	761a      	strb	r2, [r3, #24]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000e100 	.word	0xe000e100
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	; 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf28      	it	cs
 80033be:	2304      	movcs	r3, #4
 80033c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d902      	bls.n	80033d0 <NVIC_EncodePriority+0x30>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b03      	subs	r3, #3
 80033ce:	e000      	b.n	80033d2 <NVIC_EncodePriority+0x32>
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	4313      	orrs	r3, r2
         );
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	; 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ff8e 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fec9 	bl	80031ec <__NVIC_SetPriorityGrouping>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003470:	f7ff fee0 	bl	8003234 <__NVIC_GetPriorityGrouping>
 8003474:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff90 	bl	80033a0 <NVIC_EncodePriority>
 8003480:	4602      	mov	r2, r0
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5f 	bl	800334c <__NVIC_SetPriority>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fed3 	bl	8003250 <__NVIC_EnableIRQ>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fee3 	bl	800328c <__NVIC_DisableIRQ>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ff96 	bl	8003408 <SysTick_Config>
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff feed 	bl	80032d4 <__NVIC_SetPendingIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fefd 	bl	8003310 <__NVIC_ClearPendingIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e08e      	b.n	8003650 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_DMA_Init+0x138>)
 800353a:	429a      	cmp	r2, r3
 800353c:	d80f      	bhi.n	800355e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <HAL_DMA_Init+0x13c>)
 8003546:	4413      	add	r3, r2
 8003548:	4a45      	ldr	r2, [pc, #276]	; (8003660 <HAL_DMA_Init+0x140>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	009a      	lsls	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a42      	ldr	r2, [pc, #264]	; (8003664 <HAL_DMA_Init+0x144>)
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
 800355c:	e00e      	b.n	800357c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_DMA_Init+0x148>)
 8003566:	4413      	add	r3, r2
 8003568:	4a3d      	ldr	r2, [pc, #244]	; (8003660 <HAL_DMA_Init+0x140>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	009a      	lsls	r2, r3, #2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a3c      	ldr	r2, [pc, #240]	; (800366c <HAL_DMA_Init+0x14c>)
 800357a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f9b6 	bl	8003940 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035dc:	d102      	bne.n	80035e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80035f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_DMA_Init+0x106>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d80c      	bhi.n	8003626 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f9d5 	bl	80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	e008      	b.n	8003638 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40020407 	.word	0x40020407
 800365c:	bffdfff8 	.word	0xbffdfff8
 8003660:	cccccccd 	.word	0xcccccccd
 8003664:	40020000 	.word	0x40020000
 8003668:	bffdfbf8 	.word	0xbffdfbf8
 800366c:	40020400 	.word	0x40020400

08003670 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Start_IT+0x20>
 800368c:	2302      	movs	r3, #2
 800368e:	e066      	b.n	800375e <HAL_DMA_Start_IT+0xee>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d155      	bne.n	8003750 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f8fb 	bl	80038c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 020e 	orr.w	r2, r2, #14
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e00f      	b.n	8003708 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0204 	bic.w	r2, r2, #4
 80036f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 020a 	orr.w	r2, r2, #10
 8003706:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003724:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e005      	b.n	800375c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f003 031c 	and.w	r3, r3, #28
 8003786:	2204      	movs	r2, #4
 8003788:	409a      	lsls	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d026      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x7a>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d021      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0204 	bic.w	r2, r2, #4
 80037b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f003 021c 	and.w	r2, r3, #28
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2104      	movs	r1, #4
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d071      	beq.n	80038ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037de:	e06c      	b.n	80038ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f003 031c 	and.w	r3, r3, #28
 80037e8:	2202      	movs	r2, #2
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02e      	beq.n	8003852 <HAL_DMA_IRQHandler+0xec>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d029      	beq.n	8003852 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 020a 	bic.w	r2, r2, #10
 800381a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f003 021c 	and.w	r2, r3, #28
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	2102      	movs	r1, #2
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d038      	beq.n	80038ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003850:	e033      	b.n	80038ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f003 031c 	and.w	r3, r3, #28
 800385a:	2208      	movs	r2, #8
 800385c:	409a      	lsls	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02a      	beq.n	80038bc <HAL_DMA_IRQHandler+0x156>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d025      	beq.n	80038bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 020e 	bic.w	r2, r2, #14
 800387e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f003 021c 	and.w	r2, r3, #28
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f202 	lsl.w	r2, r1, r2
 8003892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
}
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f003 021c 	and.w	r2, r3, #28
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2101      	movs	r1, #1
 80038fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003900:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b10      	cmp	r3, #16
 8003910:	d108      	bne.n	8003924 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003922:	e007      	b.n	8003934 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	4b17      	ldr	r3, [pc, #92]	; (80039ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d80a      	bhi.n	800396a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003960:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6493      	str	r3, [r2, #72]	; 0x48
 8003968:	e007      	b.n	800397a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	009a      	lsls	r2, r3, #2
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003974:	4413      	add	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3b08      	subs	r3, #8
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003990:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2201      	movs	r2, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40020407 	.word	0x40020407
 80039b0:	4002081c 	.word	0x4002081c
 80039b4:	cccccccd 	.word	0xcccccccd
 80039b8:	40020880 	.word	0x40020880

080039bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80039e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2201      	movs	r2, #1
 80039ec:	409a      	lsls	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	1000823f 	.word	0x1000823f
 8003a04:	40020940 	.word	0x40020940

08003a08 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	e14c      	b.n	8003cb2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 813e 	beq.w	8003cac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d00b      	beq.n	8003a50 <HAL_GPIO_Init+0x48>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d007      	beq.n	8003a50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a44:	2b11      	cmp	r3, #17
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b12      	cmp	r3, #18
 8003a4e:	d130      	bne.n	8003ab2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a86:	2201      	movs	r2, #1
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0201 	and.w	r2, r3, #1
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	2203      	movs	r2, #3
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0xea>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b12      	cmp	r3, #18
 8003af0:	d123      	bne.n	8003b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	08da      	lsrs	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3208      	adds	r2, #8
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	08da      	lsrs	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3208      	adds	r2, #8
 8003b34:	6939      	ldr	r1, [r7, #16]
 8003b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0203 	and.w	r2, r3, #3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8098 	beq.w	8003cac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b7c:	4a54      	ldr	r2, [pc, #336]	; (8003cd0 <HAL_GPIO_Init+0x2c8>)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ba6:	d019      	beq.n	8003bdc <HAL_GPIO_Init+0x1d4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <HAL_GPIO_Init+0x2cc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <HAL_GPIO_Init+0x1d0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a49      	ldr	r2, [pc, #292]	; (8003cd8 <HAL_GPIO_Init+0x2d0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_GPIO_Init+0x1cc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a48      	ldr	r2, [pc, #288]	; (8003cdc <HAL_GPIO_Init+0x2d4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <HAL_GPIO_Init+0x1c8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a47      	ldr	r2, [pc, #284]	; (8003ce0 <HAL_GPIO_Init+0x2d8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_GPIO_Init+0x1c4>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e008      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bcc:	2307      	movs	r3, #7
 8003bce:	e006      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e004      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e002      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	f002 0203 	and.w	r2, r2, #3
 8003be4:	0092      	lsls	r2, r2, #2
 8003be6:	4093      	lsls	r3, r2
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bee:	4938      	ldr	r1, [pc, #224]	; (8003cd0 <HAL_GPIO_Init+0x2c8>)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bfc:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c22:	4a30      	ldr	r2, [pc, #192]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c50:	4a24      	ldr	r2, [pc, #144]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c58:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c7c:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c82:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ca6:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f aeab 	bne.w	8003a18 <HAL_GPIO_Init+0x10>
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	48000400 	.word	0x48000400
 8003cd8:	48000800 	.word	0x48000800
 8003cdc:	48000c00 	.word	0x48000c00
 8003ce0:	48001000 	.word	0x48001000
 8003ce4:	58000800 	.word	0x58000800

08003ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cf8:	787b      	ldrb	r3, [r7, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d04:	e002      	b.n	8003d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d06:	887a      	ldrh	r2, [r7, #2]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d2e:	4a05      	ldr	r2, [pc, #20]	; (8003d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fbf8 	bl	800052c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	58000800 	.word	0x58000800

08003d48 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_HSEM_IRQHandler+0x30>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_HSEM_IRQHandler+0x30>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	4906      	ldr	r1, [pc, #24]	; (8003d78 <HAL_HSEM_IRQHandler+0x30>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <HAL_HSEM_IRQHandler+0x30>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f807 	bl	8003d7c <HAL_HSEM_FreeCallback>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	58001500 	.word	0x58001500

08003d7c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a04      	ldr	r2, [pc, #16]	; (8003dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	58000400 	.word	0x58000400

08003db0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as 
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dce:	d10e      	bne.n	8003dee <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003dd0:	f000 f85c 	bl	8003e8c <HAL_PWREx_DisableLowPowerRunMode>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003dda:	e016      	b.n	8003e0a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de8:	d001      	beq.n	8003dee <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();  
 8003dea:	f000 f83f 	bl	8003e6c <HAL_PWREx_EnableLowPowerRunMode>
    } 
  } 
    
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003e00:	bf30      	wfi
 8003e02:	e002      	b.n	8003e0a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003e04:	bf40      	sev
    __WFE();
 8003e06:	bf20      	wfe
    __WFE();
 8003e08:	bf20      	wfe
  }
}
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	58000400 	.word	0x58000400
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	58000400 	.word	0x58000400

08003e34 <HAL_PWREx_EnableFlashPowerDown>:
  *           @arg @ref PWR_FLASHPD_LPRUN
  *           @arg @ref PWR_FLASHPD_LPSLEEP
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(uint32_t PowerMode)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_FLASH_POWERDOWN(PowerMode));

  if((PowerMode & PWR_FLASHPD_LPRUN) != 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_PWREx_EnableFlashPowerDown+0x1a>
  {
    /* Unlock bit FPDR */
    WRITE_REG(PWR->CR1, 0x0000C1B0UL);
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_PWREx_EnableFlashPowerDown+0x34>)
 8003e48:	f24c 12b0 	movw	r2, #49584	; 0xc1b0
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set flash power down mode */
  SET_BIT(PWR->CR1, PowerMode);
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_PWREx_EnableFlashPowerDown+0x34>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4905      	ldr	r1, [pc, #20]	; (8003e68 <HAL_PWREx_EnableFlashPowerDown+0x34>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	58000400 	.word	0x58000400

08003e6c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must 
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.     
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR); 
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7a:	6013      	str	r3, [r2, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	58000400 	.word	0x58000400

08003e8c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.   
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;
  
  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 
 8003e92:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e9c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000U));
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	0c9b      	lsrs	r3, r3, #18
 8003eaa:	2232      	movs	r2, #50	; 0x32
 8003eac:	fb02 f303 	mul.w	r3, r2, r3
 8003eb0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003eb2:	e002      	b.n	8003eba <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec6:	d102      	bne.n	8003ece <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f2      	bne.n	8003eb4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eda:	d101      	bne.n	8003ee0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e000      	b.n	8003ee2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }
  
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	58000400 	.word	0x58000400
 8003ef4:	20000004 	.word	0x20000004
 8003ef8:	431bde83 	.word	0x431bde83

08003efc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0e:	d101      	bne.n	8003f14 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_RCC_HSE_Enable>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_HSE_Disable>:
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
}
 8003f52:	bf00      	nop
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_HSE_IsReady>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f6e:	d101      	bne.n	8003f74 <LL_RCC_HSE_IsReady+0x18>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <LL_RCC_HSE_IsReady+0x1a>
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_RCC_HSI_Enable>:
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_HSI_Disable>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_RCC_HSI_IsReady>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d101      	bne.n	8003fd4 <LL_RCC_HSI_IsReady+0x18>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_RCC_HSI_IsReady+0x1a>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_HSI48_Enable>:
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_RCC_HSI48_Disable>:
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_RCC_HSI48_IsReady>:
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d101      	bne.n	8004066 <LL_RCC_HSI48_IsReady+0x18>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <LL_RCC_HSI48_IsReady+0x1a>
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_LSE_Enable>:
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_LSE_Disable>:
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_RCC_LSE_EnableBypass>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c6:	f043 0304 	orr.w	r3, r3, #4
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_LSE_DisableBypass>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_LSE_IsReady>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d101      	bne.n	8004112 <LL_RCC_LSE_IsReady+0x18>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <LL_RCC_LSE_IsReady+0x1a>
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_RCC_LSI1_Enable>:
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004136:	bf00      	nop
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_RCC_LSI1_Disable>:
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_RCC_LSI1_IsReady>:
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	d101      	bne.n	800417a <LL_RCC_LSI1_IsReady+0x18>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <LL_RCC_LSI1_IsReady+0x1a>
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_LSI2_Enable>:
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <LL_RCC_LSI2_Disable>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80041ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_LSI2_IsReady>:
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d101      	bne.n	80041e2 <LL_RCC_LSI2_IsReady+0x18>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <LL_RCC_LSI2_IsReady+0x1a>
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_LSI2_SetTrimming>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_RCC_MSI_Enable>:
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_RCC_MSI_Disable>:
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6013      	str	r3, [r2, #0]
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_RCC_MSI_IsReady>:
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d101      	bne.n	800426e <LL_RCC_MSI_IsReady+0x16>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <LL_RCC_MSI_IsReady+0x18>
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_RCC_MSI_SetRange>:
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_RCC_MSI_GetRange>:
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2bb0      	cmp	r3, #176	; 0xb0
 80042b8:	d901      	bls.n	80042be <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80042ba:	23b0      	movs	r3, #176	; 0xb0
 80042bc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80042be:	687b      	ldr	r3, [r7, #4]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <LL_RCC_MSI_SetCalibTrimming>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <LL_RCC_SetSysClkSource>:
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f023 0203 	bic.w	r2, r3, #3
 8004308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_RCC_GetSysClkSource>:
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <LL_RCC_SetAHBPrescaler>:
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_C2_RCC_SetAHBPrescaler>:
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800436e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <LL_RCC_SetAHB4Prescaler>:
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004396:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800439a:	f023 020f 	bic.w	r2, r3, #15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_RCC_SetAPB1Prescaler>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80043c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_RCC_SetAPB2Prescaler>:
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_RCC_GetAHBPrescaler>:
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004416:	4618      	mov	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_RCC_GetAHB4Prescaler>:
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004428:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004432:	4618      	mov	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_RCC_GetAPB1Prescaler>:
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800444a:	4618      	mov	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_RCC_GetAPB2Prescaler>:
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004462:	4618      	mov	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449c:	6013      	str	r3, [r2, #0]
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ba:	d101      	bne.n	80044c0 <LL_RCC_PLL_IsReady+0x18>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <LL_RCC_PLL_IsReady+0x1a>
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80044ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800451a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0303 	and.w	r3, r3, #3
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004540:	d101      	bne.n	8004546 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004566:	d101      	bne.n	800456c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800457c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004580:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d101      	bne.n	8004592 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045b0:	d101      	bne.n	80045b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80045c2:	b480      	push	{r7}
 80045c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045d4:	d101      	bne.n	80045da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b08d      	sub	sp, #52	; 0x34
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e37e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8092 	beq.w	800472c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004608:	f7ff fe89 	bl	800431e <LL_RCC_GetSysClkSource>
 800460c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800460e:	f7ff ff82 	bl	8004516 <LL_RCC_PLL_GetMainSource>
 8004612:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x3e>
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	2b0c      	cmp	r3, #12
 800461e:	d14c      	bne.n	80046ba <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	2b01      	cmp	r3, #1
 8004624:	d149      	bne.n	80046ba <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004626:	f7ff fe17 	bl	8004258 <LL_RCC_MSI_IsReady>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_OscConfig+0x54>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e35d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004640:	f7ff fe2f 	bl	80042a2 <LL_RCC_MSI_GetRange>
 8004644:	4603      	mov	r3, r0
 8004646:	429c      	cmp	r4, r3
 8004648:	d914      	bls.n	8004674 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fd42 	bl	80050d8 <RCC_SetFlashLatencyFromMSIRange>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e34c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fe09 	bl	800427a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fe2d 	bl	80042cc <LL_RCC_MSI_SetCalibTrimming>
 8004672:	e013      	b.n	800469c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fdfe 	bl	800427a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fe22 	bl	80042cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fd23 	bl	80050d8 <RCC_SetFlashLatencyFromMSIRange>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e32d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800469c:	f000 fcdc 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4ab3      	ldr	r2, [pc, #716]	; (8004970 <HAL_RCC_OscConfig+0x388>)
 80046a4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046a6:	4bb3      	ldr	r3, [pc, #716]	; (8004974 <HAL_RCC_OscConfig+0x38c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fd fb14 	bl	8001cd8 <HAL_InitTick>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d039      	beq.n	800472a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e31e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01e      	beq.n	8004700 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046c2:	f7ff fdab 	bl	800421c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046c6:	f7fd fb55 	bl	8001d74 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ce:	f7fd fb51 	bl	8001d74 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e30b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80046e0:	f7ff fdba 	bl	8004258 <LL_RCC_MSI_IsReady>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f1      	beq.n	80046ce <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fdc3 	bl	800427a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fde7 	bl	80042cc <LL_RCC_MSI_SetCalibTrimming>
 80046fe:	e015      	b.n	800472c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004700:	f7ff fd9b 	bl	800423a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004704:	f7fd fb36 	bl	8001d74 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800470c:	f7fd fb32 	bl	8001d74 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e2ec      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800471e:	f7ff fd9b 	bl	8004258 <LL_RCC_MSI_IsReady>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f1      	bne.n	800470c <HAL_RCC_OscConfig+0x124>
 8004728:	e000      	b.n	800472c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800472a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d04e      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004738:	f7ff fdf1 	bl	800431e <LL_RCC_GetSysClkSource>
 800473c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800473e:	f7ff feea 	bl	8004516 <LL_RCC_PLL_GetMainSource>
 8004742:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b08      	cmp	r3, #8
 8004748:	d005      	beq.n	8004756 <HAL_RCC_OscConfig+0x16e>
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	2b0c      	cmp	r3, #12
 800474e:	d10d      	bne.n	800476c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d10a      	bne.n	800476c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004756:	f7ff fc01 	bl	8003f5c <LL_RCC_HSE_IsReady>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d039      	beq.n	80047d4 <HAL_RCC_OscConfig+0x1ec>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d135      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e2c5      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d102      	bne.n	800477c <HAL_RCC_OscConfig+0x194>
 8004776:	f7ff fbd3 	bl	8003f20 <LL_RCC_HSE_Enable>
 800477a:	e001      	b.n	8004780 <HAL_RCC_OscConfig+0x198>
 800477c:	f7ff fbdf 	bl	8003f3e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd faf4 	bl	8001d74 <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fd faf0 	bl	8001d74 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e2aa      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80047a2:	f7ff fbdb 	bl	8003f5c <LL_RCC_HSE_IsReady>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f1      	beq.n	8004790 <HAL_RCC_OscConfig+0x1a8>
 80047ac:	e013      	b.n	80047d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fd fae1 	bl	8001d74 <HAL_GetTick>
 80047b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b6:	f7fd fadd 	bl	8001d74 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b64      	cmp	r3, #100	; 0x64
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e297      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80047c8:	f7ff fbc8 	bl	8003f5c <LL_RCC_HSE_IsReady>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f1      	bne.n	80047b6 <HAL_RCC_OscConfig+0x1ce>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d051      	beq.n	8004886 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e2:	f7ff fd9c 	bl	800431e <LL_RCC_GetSysClkSource>
 80047e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e8:	f7ff fe95 	bl	8004516 <LL_RCC_PLL_GetMainSource>
 80047ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_OscConfig+0x218>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d113      	bne.n	8004822 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d110      	bne.n	8004822 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004800:	f7ff fbdc 	bl	8003fbc <LL_RCC_HSI_IsReady>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCC_OscConfig+0x22e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e270      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fbe0 	bl	8003fe0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004820:	e031      	b.n	8004886 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d019      	beq.n	800485e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800482a:	f7ff fba9 	bl	8003f80 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fd faa1 	bl	8001d74 <HAL_GetTick>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004836:	f7fd fa9d 	bl	8001d74 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e257      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004848:	f7ff fbb8 	bl	8003fbc <LL_RCC_HSI_IsReady>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f1      	beq.n	8004836 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fbc2 	bl	8003fe0 <LL_RCC_HSI_SetCalibTrimming>
 800485c:	e013      	b.n	8004886 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485e:	f7ff fb9e 	bl	8003f9e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fd fa87 	bl	8001d74 <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486a:	f7fd fa83 	bl	8001d74 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e23d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800487c:	f7ff fb9e 	bl	8003fbc <LL_RCC_HSI_IsReady>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f1      	bne.n	800486a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80a3 	beq.w	80049e6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d076      	beq.n	8004996 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d046      	beq.n	8004942 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80048b4:	f7ff fc55 	bl	8004162 <LL_RCC_LSI1_IsReady>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d113      	bne.n	80048e6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80048be:	f7ff fc2e 	bl	800411e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048c2:	f7fd fa57 	bl	8001d74 <HAL_GetTick>
 80048c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048ca:	f7fd fa53 	bl	8001d74 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e20d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048dc:	f7ff fc41 	bl	8004162 <LL_RCC_LSI1_IsReady>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f1      	beq.n	80048ca <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80048e6:	f7ff fc4e 	bl	8004186 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fd fa43 	bl	8001d74 <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048f2:	f7fd fa3f 	bl	8001d74 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1f9      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004904:	f7ff fc61 	bl	80041ca <LL_RCC_LSI2_IsReady>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f1      	beq.n	80048f2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fc6b 	bl	80041ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004918:	f7ff fc12 	bl	8004140 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fd fa2a 	bl	8001d74 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004924:	f7fd fa26 	bl	8001d74 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1e0      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004936:	f7ff fc14 	bl	8004162 <LL_RCC_LSI1_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f1      	bne.n	8004924 <HAL_RCC_OscConfig+0x33c>
 8004940:	e051      	b.n	80049e6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004942:	f7ff fbec 	bl	800411e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd fa15 	bl	8001d74 <HAL_GetTick>
 800494a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800494e:	f7fd fa11 	bl	8001d74 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e1cb      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004960:	f7ff fbff 	bl	8004162 <LL_RCC_LSI1_IsReady>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f1      	beq.n	800494e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800496a:	f7ff fc1d 	bl	80041a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800496e:	e00c      	b.n	800498a <HAL_RCC_OscConfig+0x3a2>
 8004970:	20000004 	.word	0x20000004
 8004974:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004978:	f7fd f9fc 	bl	8001d74 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b03      	cmp	r3, #3
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e1b6      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800498a:	f7ff fc1e 	bl	80041ca <LL_RCC_LSI2_IsReady>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f1      	bne.n	8004978 <HAL_RCC_OscConfig+0x390>
 8004994:	e027      	b.n	80049e6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004996:	f7ff fc07 	bl	80041a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7fd f9eb 	bl	8001d74 <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049a2:	f7fd f9e7 	bl	8001d74 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e1a1      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049b4:	f7ff fc09 	bl	80041ca <LL_RCC_LSI2_IsReady>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f1      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80049be:	f7ff fbbf 	bl	8004140 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fd f9d7 	bl	8001d74 <HAL_GetTick>
 80049c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049ca:	f7fd f9d3 	bl	8001d74 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e18d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049dc:	f7ff fbc1 	bl	8004162 <LL_RCC_LSI1_IsReady>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f1      	bne.n	80049ca <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d05b      	beq.n	8004aaa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049f2:	4bb5      	ldr	r3, [pc, #724]	; (8004cc8 <HAL_RCC_OscConfig+0x6e0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d114      	bne.n	8004a28 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80049fe:	f7ff f9c7 	bl	8003d90 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fd f9b7 	bl	8001d74 <HAL_GetTick>
 8004a06:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fd f9b3 	bl	8001d74 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e16d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1c:	4baa      	ldr	r3, [pc, #680]	; (8004cc8 <HAL_RCC_OscConfig+0x6e0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d102      	bne.n	8004a36 <HAL_RCC_OscConfig+0x44e>
 8004a30:	f7ff fb1f 	bl	8004072 <LL_RCC_LSE_Enable>
 8004a34:	e00c      	b.n	8004a50 <HAL_RCC_OscConfig+0x468>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d104      	bne.n	8004a48 <HAL_RCC_OscConfig+0x460>
 8004a3e:	f7ff fb3a 	bl	80040b6 <LL_RCC_LSE_EnableBypass>
 8004a42:	f7ff fb16 	bl	8004072 <LL_RCC_LSE_Enable>
 8004a46:	e003      	b.n	8004a50 <HAL_RCC_OscConfig+0x468>
 8004a48:	f7ff fb24 	bl	8004094 <LL_RCC_LSE_Disable>
 8004a4c:	f7ff fb44 	bl	80040d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d014      	beq.n	8004a82 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fd f98c 	bl	8001d74 <HAL_GetTick>
 8004a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd f988 	bl	8001d74 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e140      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a76:	f7ff fb40 	bl	80040fa <LL_RCC_LSE_IsReady>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ef      	beq.n	8004a60 <HAL_RCC_OscConfig+0x478>
 8004a80:	e013      	b.n	8004aaa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fd f977 	bl	8001d74 <HAL_GetTick>
 8004a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fd f973 	bl	8001d74 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e12b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004aa0:	f7ff fb2b 	bl	80040fa <LL_RCC_LSE_IsReady>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ef      	bne.n	8004a8a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02c      	beq.n	8004b10 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d014      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004abe:	f7ff faa4 	bl	800400a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fd f957 	bl	8001d74 <HAL_GetTick>
 8004ac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aca:	f7fd f953 	bl	8001d74 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e10d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004adc:	f7ff fab7 	bl	800404e <LL_RCC_HSI48_IsReady>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f1      	beq.n	8004aca <HAL_RCC_OscConfig+0x4e2>
 8004ae6:	e013      	b.n	8004b10 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ae8:	f7ff faa0 	bl	800402c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fd f942 	bl	8001d74 <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af4:	f7fd f93e 	bl	8001d74 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e0f8      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b06:	f7ff faa2 	bl	800404e <LL_RCC_HSI48_IsReady>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f1      	bne.n	8004af4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80ee 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1a:	f7ff fc00 	bl	800431e <LL_RCC_GetSysClkSource>
 8004b1e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f040 80af 	bne.w	8004c90 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 0203 	and.w	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d123      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d11c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d114      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d10d      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d05d      	beq.n	8004c44 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d058      	beq.n	8004c40 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0ab      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ba0:	f7ff fc73 	bl	800448a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ba4:	f7fd f8e6 	bl	8001d74 <HAL_GetTick>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bac:	f7fd f8e2 	bl	8001d74 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e09c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ef      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_RCC_OscConfig+0x6e4>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bde:	4311      	orrs	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004be4:	0212      	lsls	r2, r2, #8
 8004be6:	4311      	orrs	r1, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bec:	4311      	orrs	r1, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bf2:	4311      	orrs	r1, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c02:	f7ff fc33 	bl	800446c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c16:	f7fd f8ad 	bl	8001d74 <HAL_GetTick>
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1e:	f7fd f8a9 	bl	8001d74 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e063      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ef      	beq.n	8004c1e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c3e:	e05a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e059      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d151      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c52:	f7ff fc0b 	bl	800446c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c64:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c66:	f7fd f885 	bl	8001d74 <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fd f881 	bl	8001d74 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e03b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ef      	beq.n	8004c6e <HAL_RCC_OscConfig+0x686>
 8004c8e:	e032      	b.n	8004cf6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d02d      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c96:	f7ff fbf8 	bl	800448a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fd f859 	bl	8001d74 <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc4:	e00d      	b.n	8004ce2 <HAL_RCC_OscConfig+0x6fa>
 8004cc6:	bf00      	nop
 8004cc8:	58000400 	.word	0x58000400
 8004ccc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fd f850 	bl	8001d74 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ef      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x6e8>
 8004cf0:	e001      	b.n	8004cf6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3734      	adds	r7, #52	; 0x34
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd90      	pop	{r4, r7, pc}

08004d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e12d      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b98      	ldr	r3, [pc, #608]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d91b      	bls.n	8004d5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b95      	ldr	r3, [pc, #596]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 0207 	bic.w	r2, r3, #7
 8004d2a:	4993      	ldr	r1, [pc, #588]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d32:	f7fd f81f 	bl	8001d74 <HAL_GetTick>
 8004d36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d3a:	f7fd f81b 	bl	8001d74 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e111      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d1ef      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fae3 	bl	8004336 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d70:	f7fd f800 	bl	8001d74 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d78:	f7fc fffc 	bl	8001d74 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0f2      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d8a:	f7ff fbd0 	bl	800452e <LL_RCC_IsActiveFlag_HPRE>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f1      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d016      	beq.n	8004dce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fada 	bl	800435e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004daa:	f7fc ffe3 	bl	8001d74 <HAL_GetTick>
 8004dae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004db2:	f7fc ffdf 	bl	8001d74 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0d5      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004dc4:	f7ff fbc5 	bl	8004552 <LL_RCC_IsActiveFlag_C2HPRE>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f1      	beq.n	8004db2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fad3 	bl	800438a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004de4:	f7fc ffc6 	bl	8001d74 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dec:	f7fc ffc2 	bl	8001d74 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0b8      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004dfe:	f7ff fbbb 	bl	8004578 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f1      	beq.n	8004dec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d016      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff facd 	bl	80043b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e1e:	f7fc ffa9 	bl	8001d74 <HAL_GetTick>
 8004e22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e26:	f7fc ffa5 	bl	8001d74 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e09b      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e38:	f7ff fbb1 	bl	800459e <LL_RCC_IsActiveFlag_PPRE1>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f1      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d017      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fac3 	bl	80043e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e5a:	f7fc ff8b 	bl	8001d74 <HAL_GetTick>
 8004e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e62:	f7fc ff87 	bl	8001d74 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e07d      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e74:	f7ff fba5 	bl	80045c2 <LL_RCC_IsActiveFlag_PPRE2>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f1      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d043      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e92:	f7ff f863 	bl	8003f5c <LL_RCC_HSE_IsReady>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d11e      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e067      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ea8:	f7ff fafe 	bl	80044a8 <LL_RCC_PLL_IsReady>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d113      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e05c      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004ebe:	f7ff f9cb 	bl	8004258 <LL_RCC_MSI_IsReady>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d108      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e051      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ecc:	f7ff f876 	bl	8003fbc <LL_RCC_HSI_IsReady>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e04a      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fa09 	bl	80042f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee4:	f7fc ff46 	bl	8001d74 <HAL_GetTick>
 8004ee8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eec:	f7fc ff42 	bl	8001d74 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e036      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	f7ff fa0c 	bl	800431e <LL_RCC_GetSysClkSource>
 8004f06:	4602      	mov	r2, r0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d1ec      	bne.n	8004eec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f12:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d21b      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f20:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 0207 	bic.w	r2, r3, #7
 8004f28:	4913      	ldr	r1, [pc, #76]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f30:	f7fc ff20 	bl	8001d74 <HAL_GetTick>
 8004f34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f38:	f7fc ff1c 	bl	8001d74 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e012      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d1ef      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f58:	f000 f87e 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <HAL_RCC_ClockConfig+0x27c>)
 8004f60:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004f62:	f7fc ff13 	bl	8001d8c <HAL_GetTickPrio>
 8004f66:	4603      	mov	r3, r0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fc feb5 	bl	8001cd8 <HAL_InitTick>
 8004f6e:	4603      	mov	r3, r0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	58004000 	.word	0x58004000
 8004f7c:	20000004 	.word	0x20000004

08004f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f86:	f7ff f9ca 	bl	800431e <LL_RCC_GetSysClkSource>
 8004f8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f92:	f7ff f986 	bl	80042a2 <LL_RCC_MSI_GetRange>
 8004f96:	4603      	mov	r3, r0
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	4a2b      	ldr	r2, [pc, #172]	; (800504c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e04b      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d102      	bne.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fae:	4b28      	ldr	r3, [pc, #160]	; (8005050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e045      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004fba:	f7fe ff9f 	bl	8003efc <LL_RCC_HSE_IsEnabledDiv2>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d102      	bne.n	8004fca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004fc4:	4b22      	ldr	r3, [pc, #136]	; (8005050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e03a      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004fca:	4b22      	ldr	r3, [pc, #136]	; (8005054 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e037      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004fd0:	f7ff faa1 	bl	8004516 <LL_RCC_PLL_GetMainSource>
 8004fd4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d003      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x64>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d003      	beq.n	8004fea <HAL_RCC_GetSysClockFreq+0x6a>
 8004fe2:	e00d      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fe6:	60bb      	str	r3, [r7, #8]
        break;
 8004fe8:	e015      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004fea:	f7fe ff87 	bl	8003efc <LL_RCC_HSE_IsEnabledDiv2>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d102      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ff4:	4b16      	ldr	r3, [pc, #88]	; (8005050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ff6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ff8:	e00d      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ffa:	4b16      	ldr	r3, [pc, #88]	; (8005054 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ffc:	60bb      	str	r3, [r7, #8]
        break;
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005000:	f7ff f94f 	bl	80042a2 <LL_RCC_MSI_GetRange>
 8005004:	4603      	mov	r3, r0
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	4a0f      	ldr	r2, [pc, #60]	; (800504c <HAL_RCC_GetSysClockFreq+0xcc>)
 800500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005012:	60bb      	str	r3, [r7, #8]
        break;
 8005014:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005016:	f7ff fa59 	bl	80044cc <LL_RCC_PLL_GetN>
 800501a:	4602      	mov	r2, r0
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	fb03 f402 	mul.w	r4, r3, r2
 8005022:	f7ff fa6c 	bl	80044fe <LL_RCC_PLL_GetDivider>
 8005026:	4603      	mov	r3, r0
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	3301      	adds	r3, #1
 800502c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005030:	f7ff fa59 	bl	80044e6 <LL_RCC_PLL_GetR>
 8005034:	4603      	mov	r3, r0
 8005036:	0f5b      	lsrs	r3, r3, #29
 8005038:	3301      	adds	r3, #1
 800503a:	fbb4 f3f3 	udiv	r3, r4, r3
 800503e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}
 800504a:	bf00      	nop
 800504c:	08009fa0 	.word	0x08009fa0
 8005050:	00f42400 	.word	0x00f42400
 8005054:	01e84800 	.word	0x01e84800

08005058 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005058:	b598      	push	{r3, r4, r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800505c:	f7ff ff90 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8005060:	4604      	mov	r4, r0
 8005062:	f7ff f9d1 	bl	8004408 <LL_RCC_GetAHBPrescaler>
 8005066:	4603      	mov	r3, r0
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	4a03      	ldr	r2, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x24>)
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd98      	pop	{r3, r4, r7, pc}
 800507c:	08009f40 	.word	0x08009f40

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b598      	push	{r3, r4, r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005084:	f7ff ffe8 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8005088:	4604      	mov	r4, r0
 800508a:	f7ff f9d7 	bl	800443c <LL_RCC_GetAPB1Prescaler>
 800508e:	4603      	mov	r3, r0
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd98      	pop	{r3, r4, r7, pc}
 80050a8:	08009f80 	.word	0x08009f80

080050ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050ac:	b598      	push	{r3, r4, r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80050b0:	f7ff ffd2 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 80050b4:	4604      	mov	r4, r0
 80050b6:	f7ff f9cd 	bl	8004454 <LL_RCC_GetAPB2Prescaler>
 80050ba:	4603      	mov	r3, r0
 80050bc:	0adb      	lsrs	r3, r3, #11
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd98      	pop	{r3, r4, r7, pc}
 80050d4:	08009f80 	.word	0x08009f80

080050d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2bb0      	cmp	r3, #176	; 0xb0
 80050e4:	d903      	bls.n	80050ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e007      	b.n	80050fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	4a11      	ldr	r2, [pc, #68]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80050f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80050fe:	f7ff f98f 	bl	8004420 <LL_RCC_GetAHB4Prescaler>
 8005102:	4603      	mov	r3, r0
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	4a0d      	ldr	r2, [pc, #52]	; (8005140 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	0c9c      	lsrs	r4, r3, #18
 8005122:	f7fe fe79 	bl	8003e18 <HAL_PWREx_GetVoltageRange>
 8005126:	4603      	mov	r3, r0
 8005128:	4619      	mov	r1, r3
 800512a:	4620      	mov	r0, r4
 800512c:	f000 f80c 	bl	8005148 <RCC_SetFlashLatency>
 8005130:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bd90      	pop	{r4, r7, pc}
 800513a:	bf00      	nop
 800513c:	08009fa0 	.word	0x08009fa0
 8005140:	08009f40 	.word	0x08009f40
 8005144:	431bde83 	.word	0x431bde83

08005148 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b093      	sub	sp, #76	; 0x4c
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005152:	4b39      	ldr	r3, [pc, #228]	; (8005238 <RCC_SetFlashLatency+0xf0>)
 8005154:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800515a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800515e:	4a37      	ldr	r2, [pc, #220]	; (800523c <RCC_SetFlashLatency+0xf4>)
 8005160:	f107 031c 	add.w	r3, r7, #28
 8005164:	ca07      	ldmia	r2, {r0, r1, r2}
 8005166:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800516a:	4b35      	ldr	r3, [pc, #212]	; (8005240 <RCC_SetFlashLatency+0xf8>)
 800516c:	f107 040c 	add.w	r4, r7, #12
 8005170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005176:	2300      	movs	r3, #0
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005180:	d11c      	bne.n	80051bc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005182:	2300      	movs	r3, #0
 8005184:	643b      	str	r3, [r7, #64]	; 0x40
 8005186:	e015      	b.n	80051b4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005190:	4413      	add	r3, r2
 8005192:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d808      	bhi.n	80051ae <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800519c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051a4:	4413      	add	r3, r2
 80051a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80051ac:	e022      	b.n	80051f4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b0:	3301      	adds	r3, #1
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
 80051b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d9e6      	bls.n	8005188 <RCC_SetFlashLatency+0x40>
 80051ba:	e01b      	b.n	80051f4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80051bc:	2300      	movs	r3, #0
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c0:	e015      	b.n	80051ee <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80051c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051ca:	4413      	add	r3, r2
 80051cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d808      	bhi.n	80051e8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80051d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051de:	4413      	add	r3, r2
 80051e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80051e6:	e005      	b.n	80051f4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80051e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ea:	3301      	adds	r3, #1
 80051ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d9e6      	bls.n	80051c2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80051f4:	4b13      	ldr	r3, [pc, #76]	; (8005244 <RCC_SetFlashLatency+0xfc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 0207 	bic.w	r2, r3, #7
 80051fc:	4911      	ldr	r1, [pc, #68]	; (8005244 <RCC_SetFlashLatency+0xfc>)
 80051fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005204:	f7fc fdb6 	bl	8001d74 <HAL_GetTick>
 8005208:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800520a:	e008      	b.n	800521e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800520c:	f7fc fdb2 	bl	8001d74 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e007      	b.n	800522e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <RCC_SetFlashLatency+0xfc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005228:	429a      	cmp	r2, r3
 800522a:	d1ef      	bne.n	800520c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	374c      	adds	r7, #76	; 0x4c
 8005232:	46bd      	mov	sp, r7
 8005234:	bd90      	pop	{r4, r7, pc}
 8005236:	bf00      	nop
 8005238:	08009dc8 	.word	0x08009dc8
 800523c:	08009dd8 	.word	0x08009dd8
 8005240:	08009de4 	.word	0x08009de4
 8005244:	58004000 	.word	0x58004000

08005248 <LL_RCC_LSE_IsEnabled>:
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <LL_RCC_LSE_IsEnabled+0x18>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <LL_RCC_LSE_IsEnabled+0x1a>
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <LL_RCC_LSE_IsReady>:
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d101      	bne.n	8005284 <LL_RCC_LSE_IsReady+0x18>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <LL_RCC_LSE_IsReady+0x1a>
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LL_RCC_SetRFWKPClockSource>:
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_RCC_SetSMPSClockSource>:
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80052c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_SetSMPSPrescaler>:
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_RCC_SetUSARTClockSource>:
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f023 0203 	bic.w	r2, r3, #3
 8005320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <LL_RCC_SetLPUARTClockSource>:
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800534c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_RCC_SetI2CClockSource>:
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005370:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <LL_RCC_SetLPTIMClockSource>:
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	43db      	mvns	r3, r3
 80053b6:	401a      	ands	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <LL_RCC_SetSAIClockSource>:
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80053da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LL_RCC_SetRNGClockSource>:
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <LL_RCC_SetCLK48ClockSource>:
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800543e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <LL_RCC_SetUSBClockSource>:
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ffe3 	bl	800542a <LL_RCC_SetCLK48ClockSource>
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <LL_RCC_SetADCClockSource>:
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <LL_RCC_SetRTCClockSource>:
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80054a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_RCC_GetRTCClockSource>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <LL_RCC_ForceBackupDomainReset>:
{
 80054de:	b480      	push	{r7}
 80054e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054f6:	bf00      	nop
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005518:	bf00      	nop
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <LL_RCC_PLLSAI1_Enable>:
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005534:	6013      	str	r3, [r2, #0]
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <LL_RCC_PLLSAI1_Disable>:
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800554e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005552:	6013      	str	r3, [r2, #0]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <LL_RCC_PLLSAI1_IsReady>:
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005570:	d101      	bne.n	8005576 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800558a:	2300      	movs	r3, #0
 800558c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800558e:	2300      	movs	r3, #0
 8005590:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d034      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055a6:	d021      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80055a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055ac:	d81b      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055b2:	d01d      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80055b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055b8:	d815      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80055be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c2:	d110      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80055c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80055d4:	e00d      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f947 	bl	800586e <RCCEx_PLLSAI1_ConfigNP>
 80055e0:	4603      	mov	r3, r0
 80055e2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055e4:	e005      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	77fb      	strb	r3, [r7, #31]
        break;
 80055ea:	e002      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80055f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fee8 	bl	80053d2 <LL_RCC_SetSAIClockSource>
 8005602:	e001      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	7ffb      	ldrb	r3, [r7, #31]
 8005606:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005610:	2b00      	cmp	r3, #0
 8005612:	d046      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005614:	f7ff ff56 	bl	80054c4 <LL_RCC_GetRTCClockSource>
 8005618:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	d03c      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005624:	f7fe fbb4 	bl	8003d90 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff30 	bl	8005498 <LL_RCC_SetRTCClockSource>
 8005638:	e02e      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005644:	f7ff ff4b 	bl	80054de <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005648:	f7ff ff5a 	bl	8005500 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800565a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005664:	f7ff fdf0 	bl	8005248 <LL_RCC_LSE_IsEnabled>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d114      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800566e:	f7fc fb81 	bl	8001d74 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005674:	e00b      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005676:	f7fc fb7d 	bl	8001d74 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f241 3288 	movw	r2, #5000	; 0x1388
 8005684:	4293      	cmp	r3, r2
 8005686:	d902      	bls.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	77fb      	strb	r3, [r7, #31]
              break;
 800568c:	e004      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800568e:	f7ff fded 	bl	800526c <LL_RCC_LSE_IsReady>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d1ee      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005698:	7ffb      	ldrb	r3, [r7, #31]
 800569a:	77bb      	strb	r3, [r7, #30]
 800569c:	e001      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fe2a 	bl	800530c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fe35 	bl	8005338 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fe5d 	bl	800539e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fe52 	bl	800539e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fe2a 	bl	8005364 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fe1f 	bl	8005364 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d022      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fe8d 	bl	8005456 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005744:	d107      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005754:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800575e:	d10b      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f8dd 	bl	8005924 <RCCEx_PLLSAI1_ConfigNQ>
 800576a:	4603      	mov	r3, r0
 800576c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800576e:	7ffb      	ldrb	r3, [r7, #31]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02b      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d008      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005796:	d003      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fe2a 	bl	80053fe <LL_RCC_SetRNGClockSource>
 80057aa:	e00a      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7ff fe21 	bl	80053fe <LL_RCC_SetRNGClockSource>
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff fe34 	bl	800542a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80057ca:	d107      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80057cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d022      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fe3d 	bl	800546c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057fa:	d107      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005814:	d10b      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f8dd 	bl	80059da <RCCEx_PLLSAI1_ConfigNR>
 8005820:	4603      	mov	r3, r0
 8005822:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005824:	7ffb      	ldrb	r3, [r7, #31]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800582a:	7ffb      	ldrb	r3, [r7, #31]
 800582c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fd26 	bl	8005290 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fd45 	bl	80052e4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fd2c 	bl	80052bc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005864:	7fbb      	ldrb	r3, [r7, #30]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800587a:	f7ff fe61 	bl	8005540 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800587e:	f7fc fa79 	bl	8001d74 <HAL_GetTick>
 8005882:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005884:	e009      	b.n	800589a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005886:	f7fc fa75 	bl	8001d74 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d902      	bls.n	800589a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	e004      	b.n	80058a4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800589a:	f7ff fe60 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f0      	bne.n	8005886 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d137      	bne.n	800591a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058be:	4313      	orrs	r3, r2
 80058c0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80058c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058d4:	4313      	orrs	r3, r2
 80058d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058d8:	f7ff fe23 	bl	8005522 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058dc:	f7fc fa4a 	bl	8001d74 <HAL_GetTick>
 80058e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058e2:	e009      	b.n	80058f8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058e4:	f7fc fa46 	bl	8001d74 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d902      	bls.n	80058f8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	73fb      	strb	r3, [r7, #15]
        break;
 80058f6:	e004      	b.n	8005902 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058f8:	f7ff fe31 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d1f0      	bne.n	80058e4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005930:	f7ff fe06 	bl	8005540 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005934:	f7fc fa1e 	bl	8001d74 <HAL_GetTick>
 8005938:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800593a:	e009      	b.n	8005950 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800593c:	f7fc fa1a 	bl	8001d74 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d902      	bls.n	8005950 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	73fb      	strb	r3, [r7, #15]
      break;
 800594e:	e004      	b.n	800595a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005950:	f7ff fe05 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d137      	bne.n	80059d0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005974:	4313      	orrs	r3, r2
 8005976:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800598a:	4313      	orrs	r3, r2
 800598c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800598e:	f7ff fdc8 	bl	8005522 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005992:	f7fc f9ef 	bl	8001d74 <HAL_GetTick>
 8005996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005998:	e009      	b.n	80059ae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800599a:	f7fc f9eb 	bl	8001d74 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d902      	bls.n	80059ae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	73fb      	strb	r3, [r7, #15]
        break;
 80059ac:	e004      	b.n	80059b8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059ae:	f7ff fdd6 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d1f0      	bne.n	800599a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d108      	bne.n	80059d0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059cc:	4313      	orrs	r3, r2
 80059ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80059e6:	f7ff fdab 	bl	8005540 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059ea:	f7fc f9c3 	bl	8001d74 <HAL_GetTick>
 80059ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059f0:	e009      	b.n	8005a06 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059f2:	f7fc f9bf 	bl	8001d74 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d902      	bls.n	8005a06 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	e004      	b.n	8005a10 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a06:	f7ff fdaa 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f0      	bne.n	80059f2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d137      	bne.n	8005a86 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a40:	4313      	orrs	r3, r2
 8005a42:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a44:	f7ff fd6d 	bl	8005522 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a48:	f7fc f994 	bl	8001d74 <HAL_GetTick>
 8005a4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a4e:	e009      	b.n	8005a64 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a50:	f7fc f990 	bl	8001d74 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d902      	bls.n	8005a64 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	73fb      	strb	r3, [r7, #15]
        break;
 8005a62:	e004      	b.n	8005a6e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a64:	f7ff fd7b 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d1f0      	bne.n	8005a50 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a82:	4313      	orrs	r3, r2
 8005a84:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e090      	b.n	8005bc4 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb ff9c 	bl	80019f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	22ca      	movs	r2, #202	; 0xca
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2253      	movs	r2, #83	; 0x53
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f89f 	bl	8005c18 <RTC_EnterInitMode>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	22ff      	movs	r2, #255	; 0xff
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2204      	movs	r2, #4
 8005aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e067      	b.n	8005bc4 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b06:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68d2      	ldr	r2, [r2, #12]
 8005b2e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6919      	ldr	r1, [r3, #16]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	041a      	lsls	r2, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b52:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0203 	bic.w	r2, r2, #3
 8005b62:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d113      	bne.n	8005bb2 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f81e 	bl	8005bcc <HAL_RTC_WaitForSynchro>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	22ff      	movs	r2, #255	; 0xff
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e008      	b.n	8005bc4 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005be2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005be4:	f7fc f8c6 	bl	8001d74 <HAL_GetTick>
 8005be8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bea:	e009      	b.n	8005c00 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bec:	f7fc f8c2 	bl	8001d74 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bfa:	d901      	bls.n	8005c00 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e007      	b.n	8005c10 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0ee      	beq.n	8005bec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d119      	bne.n	8005c62 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f04f 32ff 	mov.w	r2, #4294967295
 8005c36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c38:	f7fc f89c 	bl	8001d74 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c3e:	e009      	b.n	8005c54 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c40:	f7fc f898 	bl	8001d74 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4e:	d901      	bls.n	8005c54 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e007      	b.n	8005c64 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0ee      	beq.n	8005c40 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <LL_RCC_GetUSARTClockSource>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4013      	ands	r3, r2
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_GetLPUARTClockSource>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4013      	ands	r3, r2
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e042      	b.n	8005d44 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fb fea5 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2224      	movs	r2, #36	; 0x24
 8005cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0201 	bic.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f8ca 	bl	8005e88 <UART_SetConfig>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e022      	b.n	8005d44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fac4 	bl	8006294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fb4b 	bl	80063d8 <UART_CheckIdleState>
 8005d42:	4603      	mov	r3, r0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d168      	bne.n	8005e36 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_UART_Transmit_DMA+0x24>
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e061      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Transmit_DMA+0x36>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e05a      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xec>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2221      	movs	r2, #33	; 0x21
 8005dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d02c      	beq.n	8005e12 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dbc:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <HAL_UART_Transmit_DMA+0xf4>)
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc4:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <HAL_UART_Transmit_DMA+0xf8>)
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dcc:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <HAL_UART_Transmit_DMA+0xfc>)
 8005dce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de0:	4619      	mov	r1, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3328      	adds	r3, #40	; 0x28
 8005de8:	461a      	mov	r2, r3
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	f7fd fc40 	bl	8003670 <HAL_DMA_Start_IT>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e012      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2240      	movs	r2, #64	; 0x40
 8005e18:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e30:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e000      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005e36:	2302      	movs	r3, #2
  }
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	0800660f 	.word	0x0800660f
 8005e44:	08006663 	.word	0x08006663
 8005e48:	0800667f 	.word	0x0800667f

08005e4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e88:	b5b0      	push	{r4, r5, r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4ba3      	ldr	r3, [pc, #652]	; (8006140 <UART_SetConfig+0x2b8>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	69f9      	ldr	r1, [r7, #28]
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a98      	ldr	r2, [pc, #608]	; (8006144 <UART_SetConfig+0x2bc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005efa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	69f9      	ldr	r1, [r7, #28]
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	f023 010f 	bic.w	r1, r3, #15
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a89      	ldr	r2, [pc, #548]	; (8006148 <UART_SetConfig+0x2c0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d120      	bne.n	8005f6a <UART_SetConfig+0xe2>
 8005f28:	2003      	movs	r0, #3
 8005f2a:	f7ff fe9f 	bl	8005c6c <LL_RCC_GetUSARTClockSource>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d817      	bhi.n	8005f64 <UART_SetConfig+0xdc>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <UART_SetConfig+0xb4>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f59 	.word	0x08005f59
 8005f44:	08005f53 	.word	0x08005f53
 8005f48:	08005f5f 	.word	0x08005f5f
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	76fb      	strb	r3, [r7, #27]
 8005f50:	e038      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005f52:	2302      	movs	r3, #2
 8005f54:	76fb      	strb	r3, [r7, #27]
 8005f56:	e035      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	76fb      	strb	r3, [r7, #27]
 8005f5c:	e032      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	76fb      	strb	r3, [r7, #27]
 8005f62:	e02f      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005f64:	2310      	movs	r3, #16
 8005f66:	76fb      	strb	r3, [r7, #27]
 8005f68:	e02c      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a75      	ldr	r2, [pc, #468]	; (8006144 <UART_SetConfig+0x2bc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d125      	bne.n	8005fc0 <UART_SetConfig+0x138>
 8005f74:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005f78:	f7ff fe88 	bl	8005c8c <LL_RCC_GetLPUARTClockSource>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f82:	d017      	beq.n	8005fb4 <UART_SetConfig+0x12c>
 8005f84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f88:	d817      	bhi.n	8005fba <UART_SetConfig+0x132>
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8e:	d00b      	beq.n	8005fa8 <UART_SetConfig+0x120>
 8005f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f94:	d811      	bhi.n	8005fba <UART_SetConfig+0x132>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <UART_SetConfig+0x11a>
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9e:	d006      	beq.n	8005fae <UART_SetConfig+0x126>
 8005fa0:	e00b      	b.n	8005fba <UART_SetConfig+0x132>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	76fb      	strb	r3, [r7, #27]
 8005fa6:	e00d      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	76fb      	strb	r3, [r7, #27]
 8005fac:	e00a      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005fae:	2304      	movs	r3, #4
 8005fb0:	76fb      	strb	r3, [r7, #27]
 8005fb2:	e007      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	76fb      	strb	r3, [r7, #27]
 8005fb8:	e004      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005fba:	2310      	movs	r3, #16
 8005fbc:	76fb      	strb	r3, [r7, #27]
 8005fbe:	e001      	b.n	8005fc4 <UART_SetConfig+0x13c>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a5e      	ldr	r2, [pc, #376]	; (8006144 <UART_SetConfig+0x2bc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	f040 808b 	bne.w	80060e6 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fd0:	7efb      	ldrb	r3, [r7, #27]
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d823      	bhi.n	800601e <UART_SetConfig+0x196>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0x154>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	0800601f 	.word	0x0800601f
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	0800601f 	.word	0x0800601f
 8005fec:	0800600f 	.word	0x0800600f
 8005ff0:	0800601f 	.word	0x0800601f
 8005ff4:	0800601f 	.word	0x0800601f
 8005ff8:	0800601f 	.word	0x0800601f
 8005ffc:	08006017 	.word	0x08006017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006000:	f7ff f83e 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8006004:	6178      	str	r0, [r7, #20]
        break;
 8006006:	e00f      	b.n	8006028 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006008:	4b50      	ldr	r3, [pc, #320]	; (800614c <UART_SetConfig+0x2c4>)
 800600a:	617b      	str	r3, [r7, #20]
        break;
 800600c:	e00c      	b.n	8006028 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600e:	f7fe ffb7 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8006012:	6178      	str	r0, [r7, #20]
        break;
 8006014:	e008      	b.n	8006028 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601a:	617b      	str	r3, [r7, #20]
        break;
 800601c:	e004      	b.n	8006028 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	76bb      	strb	r3, [r7, #26]
        break;
 8006026:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 811a 	beq.w	8006264 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	4a46      	ldr	r2, [pc, #280]	; (8006150 <UART_SetConfig+0x2c8>)
 8006036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800603a:	461a      	mov	r2, r3
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006042:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	4613      	mov	r3, r2
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	4413      	add	r3, r2
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	429a      	cmp	r2, r3
 8006052:	d305      	bcc.n	8006060 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	d902      	bls.n	8006066 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	76bb      	strb	r3, [r7, #26]
 8006064:	e0fe      	b.n	8006264 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	4618      	mov	r0, r3
 800606a:	f04f 0100 	mov.w	r1, #0
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	4a37      	ldr	r2, [pc, #220]	; (8006150 <UART_SetConfig+0x2c8>)
 8006074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006078:	b29a      	uxth	r2, r3
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	f7fa f885 	bl	800018c <__aeabi_uldivmod>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4610      	mov	r0, r2
 8006088:	4619      	mov	r1, r3
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	020b      	lsls	r3, r1, #8
 8006094:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006098:	0202      	lsls	r2, r0, #8
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	6849      	ldr	r1, [r1, #4]
 800609e:	0849      	lsrs	r1, r1, #1
 80060a0:	4608      	mov	r0, r1
 80060a2:	f04f 0100 	mov.w	r1, #0
 80060a6:	1814      	adds	r4, r2, r0
 80060a8:	eb43 0501 	adc.w	r5, r3, r1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	461a      	mov	r2, r3
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	4620      	mov	r0, r4
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7fa f867 	bl	800018c <__aeabi_uldivmod>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4613      	mov	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060cc:	d308      	bcc.n	80060e0 <UART_SetConfig+0x258>
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d4:	d204      	bcs.n	80060e0 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	e0c1      	b.n	8006264 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	76bb      	strb	r3, [r7, #26]
 80060e4:	e0be      	b.n	8006264 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ee:	d16a      	bne.n	80061c6 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80060f0:	7efb      	ldrb	r3, [r7, #27]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	2b07      	cmp	r3, #7
 80060f6:	d82d      	bhi.n	8006154 <UART_SetConfig+0x2cc>
 80060f8:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <UART_SetConfig+0x278>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	08006121 	.word	0x08006121
 8006104:	08006129 	.word	0x08006129
 8006108:	08006155 	.word	0x08006155
 800610c:	0800612f 	.word	0x0800612f
 8006110:	08006155 	.word	0x08006155
 8006114:	08006155 	.word	0x08006155
 8006118:	08006155 	.word	0x08006155
 800611c:	08006137 	.word	0x08006137
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006120:	f7fe ffc4 	bl	80050ac <HAL_RCC_GetPCLK2Freq>
 8006124:	6178      	str	r0, [r7, #20]
        break;
 8006126:	e01a      	b.n	800615e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006128:	4b08      	ldr	r3, [pc, #32]	; (800614c <UART_SetConfig+0x2c4>)
 800612a:	617b      	str	r3, [r7, #20]
        break;
 800612c:	e017      	b.n	800615e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800612e:	f7fe ff27 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8006132:	6178      	str	r0, [r7, #20]
        break;
 8006134:	e013      	b.n	800615e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613a:	617b      	str	r3, [r7, #20]
        break;
 800613c:	e00f      	b.n	800615e <UART_SetConfig+0x2d6>
 800613e:	bf00      	nop
 8006140:	cfff69f3 	.word	0xcfff69f3
 8006144:	40008000 	.word	0x40008000
 8006148:	40013800 	.word	0x40013800
 800614c:	00f42400 	.word	0x00f42400
 8006150:	08009fe0 	.word	0x08009fe0
      default:
        pclk = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	76bb      	strb	r3, [r7, #26]
        break;
 800615c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d07f      	beq.n	8006264 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	4a48      	ldr	r2, [pc, #288]	; (800628c <UART_SetConfig+0x404>)
 800616a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800616e:	461a      	mov	r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	fbb3 f3f2 	udiv	r3, r3, r2
 8006176:	005a      	lsls	r2, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	441a      	add	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	b29b      	uxth	r3, r3
 800618a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b0f      	cmp	r3, #15
 8006190:	d916      	bls.n	80061c0 <UART_SetConfig+0x338>
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006198:	d212      	bcs.n	80061c0 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f023 030f 	bic.w	r3, r3, #15
 80061a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	89fb      	ldrh	r3, [r7, #14]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	89fa      	ldrh	r2, [r7, #14]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	e051      	b.n	8006264 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	76bb      	strb	r3, [r7, #26]
 80061c4:	e04e      	b.n	8006264 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061c6:	7efb      	ldrb	r3, [r7, #27]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	2b07      	cmp	r3, #7
 80061cc:	d821      	bhi.n	8006212 <UART_SetConfig+0x38a>
 80061ce:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <UART_SetConfig+0x34c>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	080061f5 	.word	0x080061f5
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006203 	.word	0x08006203
 80061e4:	08006213 	.word	0x08006213
 80061e8:	08006213 	.word	0x08006213
 80061ec:	08006213 	.word	0x08006213
 80061f0:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe ff5a 	bl	80050ac <HAL_RCC_GetPCLK2Freq>
 80061f8:	6178      	str	r0, [r7, #20]
        break;
 80061fa:	e00f      	b.n	800621c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b24      	ldr	r3, [pc, #144]	; (8006290 <UART_SetConfig+0x408>)
 80061fe:	617b      	str	r3, [r7, #20]
        break;
 8006200:	e00c      	b.n	800621c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7fe febd 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8006206:	6178      	str	r0, [r7, #20]
        break;
 8006208:	e008      	b.n	800621c <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620e:	617b      	str	r3, [r7, #20]
        break;
 8006210:	e004      	b.n	800621c <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	76bb      	strb	r3, [r7, #26]
        break;
 800621a:	bf00      	nop
    }

    if (pclk != 0U)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d020      	beq.n	8006264 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	4a19      	ldr	r2, [pc, #100]	; (800628c <UART_SetConfig+0x404>)
 8006228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622c:	461a      	mov	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	fbb3 f2f2 	udiv	r2, r3, r2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	441a      	add	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	b29b      	uxth	r3, r3
 8006246:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b0f      	cmp	r3, #15
 800624c:	d908      	bls.n	8006260 <UART_SetConfig+0x3d8>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006254:	d204      	bcs.n	8006260 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	e001      	b.n	8006264 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006280:	7ebb      	ldrb	r3, [r7, #26]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bdb0      	pop	{r4, r5, r7, pc}
 800628a:	bf00      	nop
 800628c:	08009fe0 	.word	0x08009fe0
 8006290:	00f42400 	.word	0x00f42400

08006294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006392:	d10a      	bne.n	80063aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af02      	add	r7, sp, #8
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e8:	f7fb fcc4 	bl	8001d74 <HAL_GetTick>
 80063ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d10e      	bne.n	800641a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f82f 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e025      	b.n	8006466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b04      	cmp	r3, #4
 8006426:	d10e      	bne.n	8006446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f819 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e00f      	b.n	8006466 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b084      	sub	sp, #16
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647e:	e062      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	d05e      	beq.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006488:	f7fb fc74 	bl	8001d74 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <UART_WaitOnFlagUntilTimeout+0x30>
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11d      	bne.n	80064da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e045      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02e      	beq.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f6:	d126      	bne.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006500:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006510:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e00f      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4013      	ands	r3, r2
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	bf0c      	ite	eq
 8006556:	2301      	moveq	r3, #1
 8006558:	2300      	movne	r3, #0
 800655a:	b2db      	uxtb	r3, r3
 800655c:	461a      	mov	r2, r3
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	429a      	cmp	r2, r3
 8006562:	d08d      	beq.n	8006480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006584:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006594:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d107      	bne.n	80065ee <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0210 	bic.w	r2, r2, #16
 80065ec:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d114      	bne.n	8006654 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006640:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006650:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006652:	e002      	b.n	800665a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff fbf9 	bl	8005e4c <HAL_UART_TxCpltCallback>
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fbf5 	bl	8005e60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b086      	sub	sp, #24
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006692:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b80      	cmp	r3, #128	; 0x80
 80066a8:	d109      	bne.n	80066be <UART_DMAError+0x40>
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b21      	cmp	r3, #33	; 0x21
 80066ae:	d106      	bne.n	80066be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80066b8:	6978      	ldr	r0, [r7, #20]
 80066ba:	f7ff ff58 	bl	800656e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d109      	bne.n	80066e0 <UART_DMAError+0x62>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b22      	cmp	r3, #34	; 0x22
 80066d0:	d106      	bne.n	80066e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f7ff ff65 	bl	80065aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e6:	f043 0210 	orr.w	r2, r3, #16
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066f0:	6978      	ldr	r0, [r7, #20]
 80066f2:	f7ff fbbf 	bl	8005e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f6:	bf00      	nop
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_UARTEx_DisableFifoMode+0x16>
 8006710:	2302      	movs	r3, #2
 8006712:	e027      	b.n	8006764 <HAL_UARTEx_DisableFifoMode+0x66>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2224      	movs	r2, #36	; 0x24
 8006720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006742:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006784:	2302      	movs	r3, #2
 8006786:	e02d      	b.n	80067e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2224      	movs	r2, #36	; 0x24
 8006794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f84f 	bl	8006868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006800:	2302      	movs	r3, #2
 8006802:	e02d      	b.n	8006860 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2224      	movs	r2, #36	; 0x24
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f811 	bl	8006868 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006874:	2b00      	cmp	r3, #0
 8006876:	d108      	bne.n	800688a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006888:	e031      	b.n	80068ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800688a:	2308      	movs	r3, #8
 800688c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800688e:	2308      	movs	r3, #8
 8006890:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	0e5b      	lsrs	r3, r3, #25
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	0f5b      	lsrs	r3, r3, #29
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	7b3a      	ldrb	r2, [r7, #12]
 80068b6:	4911      	ldr	r1, [pc, #68]	; (80068fc <UARTEx_SetNbDataToProcess+0x94>)
 80068b8:	5c8a      	ldrb	r2, [r1, r2]
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068be:	7b3a      	ldrb	r2, [r7, #12]
 80068c0:	490f      	ldr	r1, [pc, #60]	; (8006900 <UARTEx_SetNbDataToProcess+0x98>)
 80068c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	7b7a      	ldrb	r2, [r7, #13]
 80068d4:	4909      	ldr	r1, [pc, #36]	; (80068fc <UARTEx_SetNbDataToProcess+0x94>)
 80068d6:	5c8a      	ldrb	r2, [r1, r2]
 80068d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068dc:	7b7a      	ldrb	r2, [r7, #13]
 80068de:	4908      	ldr	r1, [pc, #32]	; (8006900 <UARTEx_SetNbDataToProcess+0x98>)
 80068e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	08009ff8 	.word	0x08009ff8
 8006900:	0800a000 	.word	0x0800a000

08006904 <aci_gap_set_non_discoverable>:
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	2300      	movs	r3, #0
 800690c:	71fb      	strb	r3, [r7, #7]
 800690e:	f107 0308 	add.w	r3, r7, #8
 8006912:	2218      	movs	r2, #24
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ff8b 	bl	8007832 <Osal_MemSet>
 800691c:	233f      	movs	r3, #63	; 0x3f
 800691e:	813b      	strh	r3, [r7, #8]
 8006920:	2381      	movs	r3, #129	; 0x81
 8006922:	817b      	strh	r3, [r7, #10]
 8006924:	1dfb      	adds	r3, r7, #7
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	2301      	movs	r3, #1
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	f107 0308 	add.w	r3, r7, #8
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f001 f93a 	bl	8007bac <hci_send_req>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	da01      	bge.n	8006942 <aci_gap_set_non_discoverable+0x3e>
 800693e:	23ff      	movs	r3, #255	; 0xff
 8006940:	e000      	b.n	8006944 <aci_gap_set_non_discoverable+0x40>
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	4618      	mov	r0, r3
 8006946:	3720      	adds	r7, #32
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <aci_gap_set_discoverable>:
 800694c:	b5b0      	push	{r4, r5, r7, lr}
 800694e:	b0ce      	sub	sp, #312	; 0x138
 8006950:	af00      	add	r7, sp, #0
 8006952:	4605      	mov	r5, r0
 8006954:	460c      	mov	r4, r1
 8006956:	4610      	mov	r0, r2
 8006958:	4619      	mov	r1, r3
 800695a:	1dfb      	adds	r3, r7, #7
 800695c:	462a      	mov	r2, r5
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	1d3b      	adds	r3, r7, #4
 8006962:	4622      	mov	r2, r4
 8006964:	801a      	strh	r2, [r3, #0]
 8006966:	1cbb      	adds	r3, r7, #2
 8006968:	4602      	mov	r2, r0
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	1dbb      	adds	r3, r7, #6
 800696e:	460a      	mov	r2, r1
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	f107 0310 	add.w	r3, r7, #16
 8006976:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800697a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800697e:	3308      	adds	r3, #8
 8006980:	f107 0210 	add.w	r2, r7, #16
 8006984:	4413      	add	r3, r2
 8006986:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800698a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800698e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006992:	4413      	add	r3, r2
 8006994:	3309      	adds	r3, #9
 8006996:	f107 0210 	add.w	r2, r7, #16
 800699a:	4413      	add	r3, r2
 800699c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80069a0:	f107 030f 	add.w	r3, r7, #15
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	2300      	movs	r3, #0
 80069aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069b2:	1dfa      	adds	r2, r7, #7
 80069b4:	7812      	ldrb	r2, [r2, #0]
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069bc:	3301      	adds	r3, #1
 80069be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069c6:	1d3a      	adds	r2, r7, #4
 80069c8:	8812      	ldrh	r2, [r2, #0]
 80069ca:	f8a3 2001 	strh.w	r2, [r3, #1]
 80069ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069d2:	3302      	adds	r3, #2
 80069d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069dc:	1cba      	adds	r2, r7, #2
 80069de:	8812      	ldrh	r2, [r2, #0]
 80069e0:	f8a3 2003 	strh.w	r2, [r3, #3]
 80069e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069e8:	3302      	adds	r3, #2
 80069ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069f2:	1dba      	adds	r2, r7, #6
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	715a      	strb	r2, [r3, #5]
 80069f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069fc:	3301      	adds	r3, #1
 80069fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a06:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006a0a:	719a      	strb	r2, [r3, #6]
 8006a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a10:	3301      	adds	r3, #1
 8006a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a1a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006a1e:	71da      	strb	r2, [r3, #7]
 8006a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a24:	3301      	adds	r3, #1
 8006a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a2e:	3308      	adds	r3, #8
 8006a30:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006a34:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 feea 	bl	8007812 <Osal_MemCpy>
 8006a3e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006a42:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006a46:	4413      	add	r3, r2
 8006a48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a50:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a64:	3301      	adds	r3, #1
 8006a66:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006a6a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fecf 	bl	8007812 <Osal_MemCpy>
 8006a74:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006a78:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a86:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a90:	3302      	adds	r3, #2
 8006a92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006a9e:	805a      	strh	r2, [r3, #2]
 8006aa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aae:	2218      	movs	r2, #24
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 febd 	bl	8007832 <Osal_MemSet>
 8006ab8:	233f      	movs	r3, #63	; 0x3f
 8006aba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006abe:	2383      	movs	r3, #131	; 0x83
 8006ac0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006ac4:	f107 0310 	add.w	r3, r7, #16
 8006ac8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ad0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ad4:	f107 030f 	add.w	r3, r7, #15
 8006ad8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006adc:	2301      	movs	r3, #1
 8006ade:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 f85f 	bl	8007bac <hci_send_req>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da01      	bge.n	8006af8 <aci_gap_set_discoverable+0x1ac>
 8006af4:	23ff      	movs	r3, #255	; 0xff
 8006af6:	e002      	b.n	8006afe <aci_gap_set_discoverable+0x1b2>
 8006af8:	f107 030f 	add.w	r3, r7, #15
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bdb0      	pop	{r4, r5, r7, pc}

08006b08 <aci_gap_set_io_capability>:
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b0cc      	sub	sp, #304	; 0x130
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4602      	mov	r2, r0
 8006b10:	1dfb      	adds	r3, r7, #7
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	f107 0310 	add.w	r3, r7, #16
 8006b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006b1c:	f107 030f 	add.w	r3, r7, #15
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b2e:	1dfa      	adds	r2, r7, #7
 8006b30:	7812      	ldrb	r2, [r2, #0]
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b38:	3301      	adds	r3, #1
 8006b3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b42:	2218      	movs	r2, #24
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fe73 	bl	8007832 <Osal_MemSet>
 8006b4c:	233f      	movs	r3, #63	; 0x3f
 8006b4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006b52:	2385      	movs	r3, #133	; 0x85
 8006b54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006b58:	f107 0310 	add.w	r3, r7, #16
 8006b5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006b68:	f107 030f 	add.w	r3, r7, #15
 8006b6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b70:	2301      	movs	r3, #1
 8006b72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f815 	bl	8007bac <hci_send_req>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da01      	bge.n	8006b8c <aci_gap_set_io_capability+0x84>
 8006b88:	23ff      	movs	r3, #255	; 0xff
 8006b8a:	e002      	b.n	8006b92 <aci_gap_set_io_capability+0x8a>
 8006b8c:	f107 030f 	add.w	r3, r7, #15
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <aci_gap_set_authentication_requirement>:
 8006b9c:	b5b0      	push	{r4, r5, r7, lr}
 8006b9e:	b0cc      	sub	sp, #304	; 0x130
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	4619      	mov	r1, r3
 8006baa:	1dfb      	adds	r3, r7, #7
 8006bac:	462a      	mov	r2, r5
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	1dbb      	adds	r3, r7, #6
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	1d7b      	adds	r3, r7, #5
 8006bb8:	4602      	mov	r2, r0
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	1d3b      	adds	r3, r7, #4
 8006bbe:	460a      	mov	r2, r1
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	f107 0310 	add.w	r3, r7, #16
 8006bc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006bca:	f107 030f 	add.w	r3, r7, #15
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bdc:	1dfa      	adds	r2, r7, #7
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006be6:	3301      	adds	r3, #1
 8006be8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf0:	1dba      	adds	r2, r7, #6
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	705a      	strb	r2, [r3, #1]
 8006bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c04:	1d7a      	adds	r2, r7, #5
 8006c06:	7812      	ldrb	r2, [r2, #0]
 8006c08:	709a      	strb	r2, [r3, #2]
 8006c0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c0e:	3301      	adds	r3, #1
 8006c10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c18:	1d3a      	adds	r2, r7, #4
 8006c1a:	7812      	ldrb	r2, [r2, #0]
 8006c1c:	70da      	strb	r2, [r3, #3]
 8006c1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c22:	3301      	adds	r3, #1
 8006c24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006c30:	711a      	strb	r2, [r3, #4]
 8006c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c36:	3301      	adds	r3, #1
 8006c38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c40:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006c44:	715a      	strb	r2, [r3, #5]
 8006c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c54:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006c58:	719a      	strb	r2, [r3, #6]
 8006c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c5e:	3301      	adds	r3, #1
 8006c60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c68:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006c6c:	f8c3 2007 	str.w	r2, [r3, #7]
 8006c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c74:	3304      	adds	r3, #4
 8006c76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006c82:	72da      	strb	r2, [r3, #11]
 8006c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c88:	3301      	adds	r3, #1
 8006c8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c92:	2218      	movs	r2, #24
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fdcb 	bl	8007832 <Osal_MemSet>
 8006c9c:	233f      	movs	r3, #63	; 0x3f
 8006c9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006ca2:	2386      	movs	r3, #134	; 0x86
 8006ca4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006ca8:	f107 0310 	add.w	r3, r7, #16
 8006cac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006cb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006cb8:	f107 030f 	add.w	r3, r7, #15
 8006cbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006cc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 ff6d 	bl	8007bac <hci_send_req>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da01      	bge.n	8006cdc <aci_gap_set_authentication_requirement+0x140>
 8006cd8:	23ff      	movs	r3, #255	; 0xff
 8006cda:	e002      	b.n	8006ce2 <aci_gap_set_authentication_requirement+0x146>
 8006cdc:	f107 030f 	add.w	r3, r7, #15
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bdb0      	pop	{r4, r5, r7, pc}

08006cec <aci_gap_pass_key_resp>:
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b0cc      	sub	sp, #304	; 0x130
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	463b      	mov	r3, r7
 8006cf6:	6019      	str	r1, [r3, #0]
 8006cf8:	1dbb      	adds	r3, r7, #6
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	f107 0310 	add.w	r3, r7, #16
 8006d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006d04:	f107 030f 	add.w	r3, r7, #15
 8006d08:	2200      	movs	r2, #0
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d16:	1dba      	adds	r2, r7, #6
 8006d18:	8812      	ldrh	r2, [r2, #0]
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d20:	3302      	adds	r3, #2
 8006d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2a:	463a      	mov	r2, r7
 8006d2c:	6812      	ldr	r2, [r2, #0]
 8006d2e:	f8c3 2002 	str.w	r2, [r3, #2]
 8006d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d36:	3304      	adds	r3, #4
 8006d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d40:	2218      	movs	r2, #24
 8006d42:	2100      	movs	r1, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fd74 	bl	8007832 <Osal_MemSet>
 8006d4a:	233f      	movs	r3, #63	; 0x3f
 8006d4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006d50:	2388      	movs	r3, #136	; 0x88
 8006d52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006d56:	f107 0310 	add.w	r3, r7, #16
 8006d5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d66:	f107 030f 	add.w	r3, r7, #15
 8006d6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 ff16 	bl	8007bac <hci_send_req>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	da01      	bge.n	8006d8a <aci_gap_pass_key_resp+0x9e>
 8006d86:	23ff      	movs	r3, #255	; 0xff
 8006d88:	e002      	b.n	8006d90 <aci_gap_pass_key_resp+0xa4>
 8006d8a:	f107 030f 	add.w	r3, r7, #15
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <aci_gap_init>:
 8006d9a:	b590      	push	{r4, r7, lr}
 8006d9c:	b0cd      	sub	sp, #308	; 0x134
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	4604      	mov	r4, r0
 8006da2:	4608      	mov	r0, r1
 8006da4:	4611      	mov	r1, r2
 8006da6:	463a      	mov	r2, r7
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	1dfb      	adds	r3, r7, #7
 8006dac:	4622      	mov	r2, r4
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	1dbb      	adds	r3, r7, #6
 8006db2:	4602      	mov	r2, r0
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	1d7b      	adds	r3, r7, #5
 8006db8:	460a      	mov	r2, r1
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	f107 0310 	add.w	r3, r7, #16
 8006dc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006dc4:	f107 0308 	add.w	r3, r7, #8
 8006dc8:	2207      	movs	r2, #7
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fd30 	bl	8007832 <Osal_MemSet>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ddc:	1dfa      	adds	r2, r7, #7
 8006dde:	7812      	ldrb	r2, [r2, #0]
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006de6:	3301      	adds	r3, #1
 8006de8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df0:	1dba      	adds	r2, r7, #6
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	705a      	strb	r2, [r3, #1]
 8006df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e04:	1d7a      	adds	r2, r7, #5
 8006e06:	7812      	ldrb	r2, [r2, #0]
 8006e08:	709a      	strb	r2, [r3, #2]
 8006e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e0e:	3301      	adds	r3, #1
 8006e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e18:	2218      	movs	r2, #24
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fd08 	bl	8007832 <Osal_MemSet>
 8006e22:	233f      	movs	r3, #63	; 0x3f
 8006e24:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006e28:	238a      	movs	r3, #138	; 0x8a
 8006e2a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006e2e:	f107 0310 	add.w	r3, r7, #16
 8006e32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e3e:	f107 0308 	add.w	r3, r7, #8
 8006e42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e46:	2307      	movs	r3, #7
 8006e48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 feaa 	bl	8007bac <hci_send_req>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	da01      	bge.n	8006e62 <aci_gap_init+0xc8>
 8006e5e:	23ff      	movs	r3, #255	; 0xff
 8006e60:	e021      	b.n	8006ea6 <aci_gap_init+0x10c>
 8006e62:	f107 0308 	add.w	r3, r7, #8
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <aci_gap_init+0xda>
 8006e6c:	f107 0308 	add.w	r3, r7, #8
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	e018      	b.n	8006ea6 <aci_gap_init+0x10c>
 8006e74:	f107 0308 	add.w	r3, r7, #8
 8006e78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	463b      	mov	r3, r7
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	f107 0308 	add.w	r3, r7, #8
 8006e88:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	f107 0308 	add.w	r3, r7, #8
 8006e98:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd90      	pop	{r4, r7, pc}

08006eb0 <aci_gap_update_adv_data>:
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b0cc      	sub	sp, #304	; 0x130
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	463b      	mov	r3, r7
 8006eba:	6019      	str	r1, [r3, #0]
 8006ebc:	1dfb      	adds	r3, r7, #7
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	f107 0310 	add.w	r3, r7, #16
 8006ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ec8:	f107 030f 	add.w	r3, r7, #15
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eda:	1dfa      	adds	r2, r7, #7
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eee:	1c58      	adds	r0, r3, #1
 8006ef0:	1dfb      	adds	r3, r7, #7
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	6819      	ldr	r1, [r3, #0]
 8006ef8:	f000 fc8b 	bl	8007812 <Osal_MemCpy>
 8006efc:	1dfb      	adds	r3, r7, #7
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f04:	4413      	add	r3, r2
 8006f06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f0e:	2218      	movs	r2, #24
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fc8d 	bl	8007832 <Osal_MemSet>
 8006f18:	233f      	movs	r3, #63	; 0x3f
 8006f1a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006f1e:	238e      	movs	r3, #142	; 0x8e
 8006f20:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006f24:	f107 0310 	add.w	r3, r7, #16
 8006f28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f34:	f107 030f 	add.w	r3, r7, #15
 8006f38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fe2f 	bl	8007bac <hci_send_req>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da01      	bge.n	8006f58 <aci_gap_update_adv_data+0xa8>
 8006f54:	23ff      	movs	r3, #255	; 0xff
 8006f56:	e002      	b.n	8006f5e <aci_gap_update_adv_data+0xae>
 8006f58:	f107 030f 	add.w	r3, r7, #15
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <aci_gap_configure_whitelist>:
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	2300      	movs	r3, #0
 8006f70:	71fb      	strb	r3, [r7, #7]
 8006f72:	f107 0308 	add.w	r3, r7, #8
 8006f76:	2218      	movs	r2, #24
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fc59 	bl	8007832 <Osal_MemSet>
 8006f80:	233f      	movs	r3, #63	; 0x3f
 8006f82:	813b      	strh	r3, [r7, #8]
 8006f84:	2392      	movs	r3, #146	; 0x92
 8006f86:	817b      	strh	r3, [r7, #10]
 8006f88:	1dfb      	adds	r3, r7, #7
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	f107 0308 	add.w	r3, r7, #8
 8006f94:	2100      	movs	r1, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fe08 	bl	8007bac <hci_send_req>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da01      	bge.n	8006fa6 <aci_gap_configure_whitelist+0x3e>
 8006fa2:	23ff      	movs	r3, #255	; 0xff
 8006fa4:	e000      	b.n	8006fa8 <aci_gap_configure_whitelist+0x40>
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3720      	adds	r7, #32
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <aci_gap_numeric_comparison_value_confirm_yesno>:
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b0cc      	sub	sp, #304	; 0x130
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	1dbb      	adds	r3, r7, #6
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	1d7b      	adds	r3, r7, #5
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	f107 0310 	add.w	r3, r7, #16
 8006fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006fca:	f107 030f 	add.w	r3, r7, #15
 8006fce:	2200      	movs	r2, #0
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fdc:	1dba      	adds	r2, r7, #6
 8006fde:	8812      	ldrh	r2, [r2, #0]
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff0:	1d7a      	adds	r2, r7, #5
 8006ff2:	7812      	ldrb	r2, [r2, #0]
 8006ff4:	709a      	strb	r2, [r3, #2]
 8006ff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007000:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007004:	2218      	movs	r2, #24
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fc12 	bl	8007832 <Osal_MemSet>
 800700e:	233f      	movs	r3, #63	; 0x3f
 8007010:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8007014:	23a5      	movs	r3, #165	; 0xa5
 8007016:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800701a:	f107 0310 	add.w	r3, r7, #16
 800701e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007022:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007026:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800702a:	f107 030f 	add.w	r3, r7, #15
 800702e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007032:	2301      	movs	r3, #1
 8007034:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007038:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fdb4 	bl	8007bac <hci_send_req>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	da01      	bge.n	800704e <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
 800704a:	23ff      	movs	r3, #255	; 0xff
 800704c:	e002      	b.n	8007054 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
 800704e:	f107 030f 	add.w	r3, r7, #15
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <aci_gatt_init>:
 800705e:	b580      	push	{r7, lr}
 8007060:	b088      	sub	sp, #32
 8007062:	af00      	add	r7, sp, #0
 8007064:	2300      	movs	r3, #0
 8007066:	71fb      	strb	r3, [r7, #7]
 8007068:	f107 0308 	add.w	r3, r7, #8
 800706c:	2218      	movs	r2, #24
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fbde 	bl	8007832 <Osal_MemSet>
 8007076:	233f      	movs	r3, #63	; 0x3f
 8007078:	813b      	strh	r3, [r7, #8]
 800707a:	f240 1301 	movw	r3, #257	; 0x101
 800707e:	817b      	strh	r3, [r7, #10]
 8007080:	1dfb      	adds	r3, r7, #7
 8007082:	61bb      	str	r3, [r7, #24]
 8007084:	2301      	movs	r3, #1
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	f107 0308 	add.w	r3, r7, #8
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fd8c 	bl	8007bac <hci_send_req>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	da01      	bge.n	800709e <aci_gatt_init+0x40>
 800709a:	23ff      	movs	r3, #255	; 0xff
 800709c:	e000      	b.n	80070a0 <aci_gatt_init+0x42>
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	4618      	mov	r0, r3
 80070a2:	3720      	adds	r7, #32
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <aci_gatt_add_service>:
 80070a8:	b590      	push	{r4, r7, lr}
 80070aa:	b0cf      	sub	sp, #316	; 0x13c
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4604      	mov	r4, r0
 80070b0:	4638      	mov	r0, r7
 80070b2:	6001      	str	r1, [r0, #0]
 80070b4:	4610      	mov	r0, r2
 80070b6:	4619      	mov	r1, r3
 80070b8:	1dfb      	adds	r3, r7, #7
 80070ba:	4622      	mov	r2, r4
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	1dbb      	adds	r3, r7, #6
 80070c0:	4602      	mov	r2, r0
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	1d7b      	adds	r3, r7, #5
 80070c6:	460a      	mov	r2, r1
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	f107 0310 	add.w	r3, r7, #16
 80070ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80070d2:	1dfb      	adds	r3, r7, #7
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d007      	beq.n	80070ea <aci_gatt_add_service+0x42>
 80070da:	1dfb      	adds	r3, r7, #7
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d101      	bne.n	80070e6 <aci_gatt_add_service+0x3e>
 80070e2:	2311      	movs	r3, #17
 80070e4:	e002      	b.n	80070ec <aci_gatt_add_service+0x44>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <aci_gatt_add_service+0x44>
 80070ea:	2303      	movs	r3, #3
 80070ec:	f107 0210 	add.w	r2, r7, #16
 80070f0:	4413      	add	r3, r2
 80070f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80070f6:	f107 030c 	add.w	r3, r7, #12
 80070fa:	2203      	movs	r2, #3
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fb97 	bl	8007832 <Osal_MemSet>
 8007104:	2300      	movs	r3, #0
 8007106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800710a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800710e:	1dfa      	adds	r2, r7, #7
 8007110:	7812      	ldrb	r2, [r2, #0]
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007118:	3301      	adds	r3, #1
 800711a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800711e:	1dfb      	adds	r3, r7, #7
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d002      	beq.n	800712c <aci_gatt_add_service+0x84>
 8007126:	2b02      	cmp	r3, #2
 8007128:	d004      	beq.n	8007134 <aci_gatt_add_service+0x8c>
 800712a:	e007      	b.n	800713c <aci_gatt_add_service+0x94>
 800712c:	2302      	movs	r3, #2
 800712e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007132:	e005      	b.n	8007140 <aci_gatt_add_service+0x98>
 8007134:	2310      	movs	r3, #16
 8007136:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800713a:	e001      	b.n	8007140 <aci_gatt_add_service+0x98>
 800713c:	2347      	movs	r3, #71	; 0x47
 800713e:	e05d      	b.n	80071fc <aci_gatt_add_service+0x154>
 8007140:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007144:	1c58      	adds	r0, r3, #1
 8007146:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800714a:	463b      	mov	r3, r7
 800714c:	6819      	ldr	r1, [r3, #0]
 800714e:	f000 fb60 	bl	8007812 <Osal_MemCpy>
 8007152:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007156:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800715a:	4413      	add	r3, r2
 800715c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007164:	1dba      	adds	r2, r7, #6
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800716e:	3301      	adds	r3, #1
 8007170:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007178:	1d7a      	adds	r2, r7, #5
 800717a:	7812      	ldrb	r2, [r2, #0]
 800717c:	705a      	strb	r2, [r3, #1]
 800717e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007182:	3301      	adds	r3, #1
 8007184:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007188:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800718c:	2218      	movs	r2, #24
 800718e:	2100      	movs	r1, #0
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fb4e 	bl	8007832 <Osal_MemSet>
 8007196:	233f      	movs	r3, #63	; 0x3f
 8007198:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800719c:	f44f 7381 	mov.w	r3, #258	; 0x102
 80071a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80071a4:	f107 0310 	add.w	r3, r7, #16
 80071a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071b4:	f107 030c 	add.w	r3, r7, #12
 80071b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80071bc:	2303      	movs	r3, #3
 80071be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fcef 	bl	8007bac <hci_send_req>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da01      	bge.n	80071d8 <aci_gatt_add_service+0x130>
 80071d4:	23ff      	movs	r3, #255	; 0xff
 80071d6:	e011      	b.n	80071fc <aci_gatt_add_service+0x154>
 80071d8:	f107 030c 	add.w	r3, r7, #12
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <aci_gatt_add_service+0x142>
 80071e2:	f107 030c 	add.w	r3, r7, #12
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	e008      	b.n	80071fc <aci_gatt_add_service+0x154>
 80071ea:	f107 030c 	add.w	r3, r7, #12
 80071ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007202:	46bd      	mov	sp, r7
 8007204:	bd90      	pop	{r4, r7, pc}

08007206 <aci_gatt_add_char>:
 8007206:	b590      	push	{r4, r7, lr}
 8007208:	b0d1      	sub	sp, #324	; 0x144
 800720a:	af00      	add	r7, sp, #0
 800720c:	4604      	mov	r4, r0
 800720e:	4608      	mov	r0, r1
 8007210:	f107 0108 	add.w	r1, r7, #8
 8007214:	600a      	str	r2, [r1, #0]
 8007216:	4619      	mov	r1, r3
 8007218:	f107 030e 	add.w	r3, r7, #14
 800721c:	4622      	mov	r2, r4
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	f107 030d 	add.w	r3, r7, #13
 8007224:	4602      	mov	r2, r0
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	1dbb      	adds	r3, r7, #6
 800722a:	460a      	mov	r2, r1
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	f107 0318 	add.w	r3, r7, #24
 8007232:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8007236:	f107 030d 	add.w	r3, r7, #13
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d008      	beq.n	8007252 <aci_gatt_add_char+0x4c>
 8007240:	f107 030d 	add.w	r3, r7, #13
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b02      	cmp	r3, #2
 8007248:	d101      	bne.n	800724e <aci_gatt_add_char+0x48>
 800724a:	2313      	movs	r3, #19
 800724c:	e002      	b.n	8007254 <aci_gatt_add_char+0x4e>
 800724e:	2303      	movs	r3, #3
 8007250:	e000      	b.n	8007254 <aci_gatt_add_char+0x4e>
 8007252:	2305      	movs	r3, #5
 8007254:	f107 0218 	add.w	r2, r7, #24
 8007258:	4413      	add	r3, r2
 800725a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800725e:	f107 0314 	add.w	r3, r7, #20
 8007262:	2203      	movs	r2, #3
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fae3 	bl	8007832 <Osal_MemSet>
 800726c:	2300      	movs	r3, #0
 800726e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007272:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007276:	f107 020e 	add.w	r2, r7, #14
 800727a:	8812      	ldrh	r2, [r2, #0]
 800727c:	801a      	strh	r2, [r3, #0]
 800727e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007282:	3302      	adds	r3, #2
 8007284:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007288:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800728c:	f107 020d 	add.w	r2, r7, #13
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	709a      	strb	r2, [r3, #2]
 8007294:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007298:	3301      	adds	r3, #1
 800729a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800729e:	f107 030d 	add.w	r3, r7, #13
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d002      	beq.n	80072ae <aci_gatt_add_char+0xa8>
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d004      	beq.n	80072b6 <aci_gatt_add_char+0xb0>
 80072ac:	e007      	b.n	80072be <aci_gatt_add_char+0xb8>
 80072ae:	2302      	movs	r3, #2
 80072b0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80072b4:	e005      	b.n	80072c2 <aci_gatt_add_char+0xbc>
 80072b6:	2310      	movs	r3, #16
 80072b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80072bc:	e001      	b.n	80072c2 <aci_gatt_add_char+0xbc>
 80072be:	2347      	movs	r3, #71	; 0x47
 80072c0:	e086      	b.n	80073d0 <aci_gatt_add_char+0x1ca>
 80072c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80072c6:	1cd8      	adds	r0, r3, #3
 80072c8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80072cc:	f107 0308 	add.w	r3, r7, #8
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	f000 fa9e 	bl	8007812 <Osal_MemCpy>
 80072d6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80072da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80072de:	4413      	add	r3, r2
 80072e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80072e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072e8:	1dba      	adds	r2, r7, #6
 80072ea:	8812      	ldrh	r2, [r2, #0]
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80072f2:	3302      	adds	r3, #2
 80072f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80072f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072fc:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007300:	709a      	strb	r2, [r3, #2]
 8007302:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007306:	3301      	adds	r3, #1
 8007308:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800730c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007310:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007314:	70da      	strb	r2, [r3, #3]
 8007316:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800731a:	3301      	adds	r3, #1
 800731c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007320:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007324:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007328:	711a      	strb	r2, [r3, #4]
 800732a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800732e:	3301      	adds	r3, #1
 8007330:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007334:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007338:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800733c:	715a      	strb	r2, [r3, #5]
 800733e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007342:	3301      	adds	r3, #1
 8007344:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007348:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800734c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007350:	719a      	strb	r2, [r3, #6]
 8007352:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007356:	3301      	adds	r3, #1
 8007358:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800735c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007360:	2218      	movs	r2, #24
 8007362:	2100      	movs	r1, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fa64 	bl	8007832 <Osal_MemSet>
 800736a:	233f      	movs	r3, #63	; 0x3f
 800736c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8007370:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007374:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8007378:	f107 0318 	add.w	r3, r7, #24
 800737c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007380:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007384:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007388:	f107 0314 	add.w	r3, r7, #20
 800738c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007390:	2303      	movs	r3, #3
 8007392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007396:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800739a:	2100      	movs	r1, #0
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fc05 	bl	8007bac <hci_send_req>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	da01      	bge.n	80073ac <aci_gatt_add_char+0x1a6>
 80073a8:	23ff      	movs	r3, #255	; 0xff
 80073aa:	e011      	b.n	80073d0 <aci_gatt_add_char+0x1ca>
 80073ac:	f107 0314 	add.w	r3, r7, #20
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <aci_gatt_add_char+0x1b8>
 80073b6:	f107 0314 	add.w	r3, r7, #20
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	e008      	b.n	80073d0 <aci_gatt_add_char+0x1ca>
 80073be:	f107 0314 	add.w	r3, r7, #20
 80073c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	2300      	movs	r3, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd90      	pop	{r4, r7, pc}

080073da <aci_gatt_update_char_value>:
 80073da:	b5b0      	push	{r4, r5, r7, lr}
 80073dc:	b0cc      	sub	sp, #304	; 0x130
 80073de:	af00      	add	r7, sp, #0
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	4610      	mov	r0, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	1dbb      	adds	r3, r7, #6
 80073ea:	462a      	mov	r2, r5
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	1d3b      	adds	r3, r7, #4
 80073f0:	4622      	mov	r2, r4
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	1cfb      	adds	r3, r7, #3
 80073f6:	4602      	mov	r2, r0
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	1cbb      	adds	r3, r7, #2
 80073fc:	460a      	mov	r2, r1
 80073fe:	701a      	strb	r2, [r3, #0]
 8007400:	f107 0310 	add.w	r3, r7, #16
 8007404:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007408:	f107 030f 	add.w	r3, r7, #15
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	2300      	movs	r3, #0
 8007412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741a:	1dba      	adds	r2, r7, #6
 800741c:	8812      	ldrh	r2, [r2, #0]
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007424:	3302      	adds	r3, #2
 8007426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800742a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742e:	1d3a      	adds	r2, r7, #4
 8007430:	8812      	ldrh	r2, [r2, #0]
 8007432:	805a      	strh	r2, [r3, #2]
 8007434:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007438:	3302      	adds	r3, #2
 800743a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800743e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007442:	1cfa      	adds	r2, r7, #3
 8007444:	7812      	ldrb	r2, [r2, #0]
 8007446:	711a      	strb	r2, [r3, #4]
 8007448:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800744c:	3301      	adds	r3, #1
 800744e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007456:	1cba      	adds	r2, r7, #2
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	715a      	strb	r2, [r3, #5]
 800745c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007460:	3301      	adds	r3, #1
 8007462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746a:	1d98      	adds	r0, r3, #6
 800746c:	1cbb      	adds	r3, r7, #2
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007476:	f000 f9cc 	bl	8007812 <Osal_MemCpy>
 800747a:	1cbb      	adds	r3, r7, #2
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007482:	4413      	add	r3, r2
 8007484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007488:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800748c:	2218      	movs	r2, #24
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f000 f9ce 	bl	8007832 <Osal_MemSet>
 8007496:	233f      	movs	r3, #63	; 0x3f
 8007498:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800749c:	f44f 7383 	mov.w	r3, #262	; 0x106
 80074a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80074a4:	f107 0310 	add.w	r3, r7, #16
 80074a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80074b4:	f107 030f 	add.w	r3, r7, #15
 80074b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80074bc:	2301      	movs	r3, #1
 80074be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fb6f 	bl	8007bac <hci_send_req>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da01      	bge.n	80074d8 <aci_gatt_update_char_value+0xfe>
 80074d4:	23ff      	movs	r3, #255	; 0xff
 80074d6:	e002      	b.n	80074de <aci_gatt_update_char_value+0x104>
 80074d8:	f107 030f 	add.w	r3, r7, #15
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bdb0      	pop	{r4, r5, r7, pc}

080074e8 <aci_hal_write_config_data>:
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b0cc      	sub	sp, #304	; 0x130
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	463b      	mov	r3, r7
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	1dfb      	adds	r3, r7, #7
 80074f4:	4602      	mov	r2, r0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	1dbb      	adds	r3, r7, #6
 80074fa:	460a      	mov	r2, r1
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	f107 0310 	add.w	r3, r7, #16
 8007502:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007506:	f107 030f 	add.w	r3, r7, #15
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	2300      	movs	r3, #0
 8007510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007518:	1dfa      	adds	r2, r7, #7
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007522:	3301      	adds	r3, #1
 8007524:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752c:	1dba      	adds	r2, r7, #6
 800752e:	7812      	ldrb	r2, [r2, #0]
 8007530:	705a      	strb	r2, [r3, #1]
 8007532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007536:	3301      	adds	r3, #1
 8007538:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800753c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007540:	1c98      	adds	r0, r3, #2
 8007542:	1dbb      	adds	r3, r7, #6
 8007544:	781a      	ldrb	r2, [r3, #0]
 8007546:	463b      	mov	r3, r7
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	f000 f962 	bl	8007812 <Osal_MemCpy>
 800754e:	1dbb      	adds	r3, r7, #6
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007556:	4413      	add	r3, r2
 8007558:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800755c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007560:	2218      	movs	r2, #24
 8007562:	2100      	movs	r1, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f964 	bl	8007832 <Osal_MemSet>
 800756a:	233f      	movs	r3, #63	; 0x3f
 800756c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8007570:	230c      	movs	r3, #12
 8007572:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8007576:	f107 0310 	add.w	r3, r7, #16
 800757a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800757e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007582:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007586:	f107 030f 	add.w	r3, r7, #15
 800758a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800758e:	2301      	movs	r3, #1
 8007590:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007594:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fb06 	bl	8007bac <hci_send_req>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	da01      	bge.n	80075aa <aci_hal_write_config_data+0xc2>
 80075a6:	23ff      	movs	r3, #255	; 0xff
 80075a8:	e002      	b.n	80075b0 <aci_hal_write_config_data+0xc8>
 80075aa:	f107 030f 	add.w	r3, r7, #15
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <aci_hal_set_tx_power_level>:
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b0cc      	sub	sp, #304	; 0x130
 80075be:	af00      	add	r7, sp, #0
 80075c0:	4602      	mov	r2, r0
 80075c2:	1dfb      	adds	r3, r7, #7
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	1dbb      	adds	r3, r7, #6
 80075c8:	460a      	mov	r2, r1
 80075ca:	701a      	strb	r2, [r3, #0]
 80075cc:	f107 0310 	add.w	r3, r7, #16
 80075d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80075d4:	f107 030f 	add.w	r3, r7, #15
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e6:	1dfa      	adds	r2, r7, #7
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	701a      	strb	r2, [r3, #0]
 80075ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075f0:	3301      	adds	r3, #1
 80075f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80075f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fa:	1dba      	adds	r2, r7, #6
 80075fc:	7812      	ldrb	r2, [r2, #0]
 80075fe:	705a      	strb	r2, [r3, #1]
 8007600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007604:	3301      	adds	r3, #1
 8007606:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800760a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800760e:	2218      	movs	r2, #24
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f000 f90d 	bl	8007832 <Osal_MemSet>
 8007618:	233f      	movs	r3, #63	; 0x3f
 800761a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800761e:	230f      	movs	r3, #15
 8007620:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8007624:	f107 0310 	add.w	r3, r7, #16
 8007628:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800762c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007630:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007634:	f107 030f 	add.w	r3, r7, #15
 8007638:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800763c:	2301      	movs	r3, #1
 800763e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007642:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f000 faaf 	bl	8007bac <hci_send_req>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	da01      	bge.n	8007658 <aci_hal_set_tx_power_level+0x9e>
 8007654:	23ff      	movs	r3, #255	; 0xff
 8007656:	e002      	b.n	800765e <aci_hal_set_tx_power_level+0xa4>
 8007658:	f107 030f 	add.w	r3, r7, #15
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <aci_hal_set_radio_activity_mask>:
 8007668:	b580      	push	{r7, lr}
 800766a:	b0cc      	sub	sp, #304	; 0x130
 800766c:	af00      	add	r7, sp, #0
 800766e:	4602      	mov	r2, r0
 8007670:	1dbb      	adds	r3, r7, #6
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	f107 0310 	add.w	r3, r7, #16
 8007678:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800767c:	f107 030f 	add.w	r3, r7, #15
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	2300      	movs	r3, #0
 8007686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800768a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768e:	1dba      	adds	r2, r7, #6
 8007690:	8812      	ldrh	r2, [r2, #0]
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007698:	3302      	adds	r3, #2
 800769a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800769e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076a2:	2218      	movs	r2, #24
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 f8c3 	bl	8007832 <Osal_MemSet>
 80076ac:	233f      	movs	r3, #63	; 0x3f
 80076ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80076b2:	2318      	movs	r3, #24
 80076b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80076b8:	f107 0310 	add.w	r3, r7, #16
 80076bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80076c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80076c8:	f107 030f 	add.w	r3, r7, #15
 80076cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80076d0:	2301      	movs	r3, #1
 80076d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076da:	2100      	movs	r1, #0
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fa65 	bl	8007bac <hci_send_req>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da01      	bge.n	80076ec <aci_hal_set_radio_activity_mask+0x84>
 80076e8:	23ff      	movs	r3, #255	; 0xff
 80076ea:	e002      	b.n	80076f2 <aci_hal_set_radio_activity_mask+0x8a>
 80076ec:	f107 030f 	add.w	r3, r7, #15
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <hci_reset>:
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
 8007702:	2300      	movs	r3, #0
 8007704:	71fb      	strb	r3, [r7, #7]
 8007706:	f107 0308 	add.w	r3, r7, #8
 800770a:	2218      	movs	r2, #24
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f88f 	bl	8007832 <Osal_MemSet>
 8007714:	2303      	movs	r3, #3
 8007716:	813b      	strh	r3, [r7, #8]
 8007718:	2303      	movs	r3, #3
 800771a:	817b      	strh	r3, [r7, #10]
 800771c:	1dfb      	adds	r3, r7, #7
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	2301      	movs	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	f107 0308 	add.w	r3, r7, #8
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fa3e 	bl	8007bac <hci_send_req>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	da01      	bge.n	800773a <hci_reset+0x3e>
 8007736:	23ff      	movs	r3, #255	; 0xff
 8007738:	e000      	b.n	800773c <hci_reset+0x40>
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	3720      	adds	r7, #32
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <hci_le_set_default_phy>:
 8007744:	b590      	push	{r4, r7, lr}
 8007746:	b0cd      	sub	sp, #308	; 0x134
 8007748:	af00      	add	r7, sp, #0
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	4611      	mov	r1, r2
 8007750:	1dfb      	adds	r3, r7, #7
 8007752:	4622      	mov	r2, r4
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	1dbb      	adds	r3, r7, #6
 8007758:	4602      	mov	r2, r0
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	1d7b      	adds	r3, r7, #5
 800775e:	460a      	mov	r2, r1
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	f107 0310 	add.w	r3, r7, #16
 8007766:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800776a:	f107 030f 	add.w	r3, r7, #15
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	2300      	movs	r3, #0
 8007774:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777c:	1dfa      	adds	r2, r7, #7
 800777e:	7812      	ldrb	r2, [r2, #0]
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007786:	3301      	adds	r3, #1
 8007788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800778c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007790:	1dba      	adds	r2, r7, #6
 8007792:	7812      	ldrb	r2, [r2, #0]
 8007794:	705a      	strb	r2, [r3, #1]
 8007796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800779a:	3301      	adds	r3, #1
 800779c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80077a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a4:	1d7a      	adds	r2, r7, #5
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	709a      	strb	r2, [r3, #2]
 80077aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ae:	3301      	adds	r3, #1
 80077b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80077b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077b8:	2218      	movs	r2, #24
 80077ba:	2100      	movs	r1, #0
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f838 	bl	8007832 <Osal_MemSet>
 80077c2:	2308      	movs	r3, #8
 80077c4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80077c8:	2331      	movs	r3, #49	; 0x31
 80077ca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80077ce:	f107 0310 	add.w	r3, r7, #16
 80077d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80077d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077de:	f107 030f 	add.w	r3, r7, #15
 80077e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80077e6:	2301      	movs	r3, #1
 80077e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80077ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f9da 	bl	8007bac <hci_send_req>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da01      	bge.n	8007802 <hci_le_set_default_phy+0xbe>
 80077fe:	23ff      	movs	r3, #255	; 0xff
 8007800:	e002      	b.n	8007808 <hci_le_set_default_phy+0xc4>
 8007802:	f107 030f 	add.w	r3, r7, #15
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800780e:	46bd      	mov	sp, r7
 8007810:	bd90      	pop	{r4, r7, pc}

08007812 <Osal_MemCpy>:
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f002 fa98 	bl	8009d58 <memcpy>
 8007828:	4603      	mov	r3, r0
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <Osal_MemSet>:
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f002 fa96 	bl	8009d74 <memset>
 8007848:	4603      	mov	r3, r0
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8007852:	b480      	push	{r7}
 8007854:	af00      	add	r7, sp, #0
  return;
 8007856:	bf00      	nop
}
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <BLS_Init>:

__weak void BLS_Init( void )
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  return;
 8007864:	bf00      	nop
}
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800786e:	b480      	push	{r7}
 8007870:	af00      	add	r7, sp, #0
  return;
 8007872:	bf00      	nop
}
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <DIS_Init>:
__weak void DIS_Init( void )
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  return;
 8007880:	bf00      	nop
}
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800788a:	b480      	push	{r7}
 800788c:	af00      	add	r7, sp, #0
  return;
 800788e:	bf00      	nop
}
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  return;
 800789c:	bf00      	nop
}
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HRS_Init>:
__weak void HRS_Init( void )
{
 80078a6:	b480      	push	{r7}
 80078a8:	af00      	add	r7, sp, #0
  return;
 80078aa:	bf00      	nop
}
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HTS_Init>:
__weak void HTS_Init( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  return;
 80078b8:	bf00      	nop
}
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <IAS_Init>:
__weak void IAS_Init( void )
{
 80078c2:	b480      	push	{r7}
 80078c4:	af00      	add	r7, sp, #0
  return;
 80078c6:	bf00      	nop
}
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <LLS_Init>:
__weak void LLS_Init( void )
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return;
 80078d4:	bf00      	nop
}
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <TPS_Init>:
__weak void TPS_Init( void )
{
 80078de:	b480      	push	{r7}
 80078e0:	af00      	add	r7, sp, #0
  return;
 80078e2:	bf00      	nop
}
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return;
 80078f0:	bf00      	nop
}
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 80078fa:	b480      	push	{r7}
 80078fc:	af00      	add	r7, sp, #0
  return;
 80078fe:	bf00      	nop
}
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  return;
 800790c:	bf00      	nop
}
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <MESH_Init>:
__weak void MESH_Init( void )
{
 8007916:	b480      	push	{r7}
 8007918:	af00      	add	r7, sp, #0
  return;
 800791a:	bf00      	nop
}
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  return;
 8007928:	bf00      	nop
}
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
	...

08007934 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <SVCCTL_Init+0x18>)
 800793a:	2200      	movs	r2, #0
 800793c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800793e:	4b04      	ldr	r3, [pc, #16]	; (8007950 <SVCCTL_Init+0x1c>)
 8007940:	2200      	movs	r2, #0
 8007942:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007944:	f000 f806 	bl	8007954 <SVCCTL_SvcInit>

  return;
 8007948:	bf00      	nop
}
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200000c0 	.word	0x200000c0
 8007950:	200000e0 	.word	0x200000e0

08007954 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  BAS_Init();
 8007958:	f7ff ff7b 	bl	8007852 <BAS_Init>

  BLS_Init();
 800795c:	f7ff ff80 	bl	8007860 <BLS_Init>

  CRS_STM_Init();
 8007960:	f7ff ff85 	bl	800786e <CRS_STM_Init>

  DIS_Init();
 8007964:	f7ff ff8a 	bl	800787c <DIS_Init>

  EDS_STM_Init();
 8007968:	f7ff ff8f 	bl	800788a <EDS_STM_Init>

  HIDS_Init();
 800796c:	f7ff ff94 	bl	8007898 <HIDS_Init>

  HRS_Init();
 8007970:	f7ff ff99 	bl	80078a6 <HRS_Init>

  HTS_Init();
 8007974:	f7ff ff9e 	bl	80078b4 <HTS_Init>

  IAS_Init();
 8007978:	f7ff ffa3 	bl	80078c2 <IAS_Init>

  LLS_Init();
 800797c:	f7ff ffa8 	bl	80078d0 <LLS_Init>

  TPS_Init();
 8007980:	f7ff ffad 	bl	80078de <TPS_Init>

  MOTENV_STM_Init();
 8007984:	f7ff ffb2 	bl	80078ec <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007988:	f7ff ffb7 	bl	80078fa <P2PS_STM_Init>

  OTAS_STM_Init();
 800798c:	f7ff ffbc 	bl	8007908 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007990:	f7ff ffc8 	bl	8007924 <BVOPUS_STM_Init>

  MESH_Init();
 8007994:	f7ff ffbf 	bl	8007916 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007998:	f001 fc62 	bl	8009260 <SVCCTL_InitCustomSvc>
  
  return;
 800799c:	bf00      	nop
}
 800799e:	bd80      	pop	{r7, pc}

080079a0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80079a8:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <SVCCTL_RegisterSvcHandler+0x30>)
 80079aa:	7f1b      	ldrb	r3, [r3, #28]
 80079ac:	4619      	mov	r1, r3
 80079ae:	4a08      	ldr	r2, [pc, #32]	; (80079d0 <SVCCTL_RegisterSvcHandler+0x30>)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <SVCCTL_RegisterSvcHandler+0x30>)
 80079b8:	7f1b      	ldrb	r3, [r3, #28]
 80079ba:	3301      	adds	r3, #1
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <SVCCTL_RegisterSvcHandler+0x30>)
 80079c0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80079c2:	bf00      	nop
}
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	200000c0 	.word	0x200000c0

080079d4 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3301      	adds	r3, #1
 80079e0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80079e2:	2300      	movs	r3, #0
 80079e4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2bff      	cmp	r3, #255	; 0xff
 80079ec:	d125      	bne.n	8007a3a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	3302      	adds	r3, #2
 80079f2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a02:	d118      	bne.n	8007a36 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007a04:	2300      	movs	r3, #0
 8007a06:	757b      	strb	r3, [r7, #21]
 8007a08:	e00d      	b.n	8007a26 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007a0a:	7d7b      	ldrb	r3, [r7, #21]
 8007a0c:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <SVCCTL_UserEvtRx+0xa4>)
 8007a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d108      	bne.n	8007a32 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007a20:	7d7b      	ldrb	r3, [r7, #21]
 8007a22:	3301      	adds	r3, #1
 8007a24:	757b      	strb	r3, [r7, #21]
 8007a26:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <SVCCTL_UserEvtRx+0xa4>)
 8007a28:	7f1b      	ldrb	r3, [r3, #28]
 8007a2a:	7d7a      	ldrb	r2, [r7, #21]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d3ec      	bcc.n	8007a0a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007a30:	e002      	b.n	8007a38 <SVCCTL_UserEvtRx+0x64>
              break;
 8007a32:	bf00      	nop
          break;
 8007a34:	e000      	b.n	8007a38 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007a36:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007a38:	e000      	b.n	8007a3c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007a3a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d00f      	beq.n	8007a62 <SVCCTL_UserEvtRx+0x8e>
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	dc10      	bgt.n	8007a68 <SVCCTL_UserEvtRx+0x94>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <SVCCTL_UserEvtRx+0x7c>
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d006      	beq.n	8007a5c <SVCCTL_UserEvtRx+0x88>
 8007a4e:	e00b      	b.n	8007a68 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fecb 	bl	80087ec <SVCCTL_App_Notification>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75bb      	strb	r3, [r7, #22]
      break;
 8007a5a:	e008      	b.n	8007a6e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	75bb      	strb	r3, [r7, #22]
      break;
 8007a60:	e005      	b.n	8007a6e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75bb      	strb	r3, [r7, #22]
      break;
 8007a66:	e002      	b.n	8007a6e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75bb      	strb	r3, [r7, #22]
      break;
 8007a6c:	bf00      	nop
  }

  return (return_status);
 8007a6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	200000c0 	.word	0x200000c0

08007a7c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a84:	f107 030c 	add.w	r3, r7, #12
 8007a88:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2124      	movs	r1, #36	; 0x24
 8007a94:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007a98:	f000 fa1e 	bl	8007ed8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	330b      	adds	r3, #11
 8007aa0:	78db      	ldrb	r3, [r3, #3]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3720      	adds	r7, #32
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b088      	sub	sp, #32
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ab2:	f107 030c 	add.w	r3, r7, #12
 8007ab6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	210f      	movs	r1, #15
 8007ac2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007ac6:	f000 fa07 	bl	8007ed8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	330b      	adds	r3, #11
 8007ace:	78db      	ldrb	r3, [r3, #3]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3720      	adds	r7, #32
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <hci_init+0x30>)
 8007ae8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007aea:	4a08      	ldr	r2, [pc, #32]	; (8007b0c <hci_init+0x34>)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007af0:	4806      	ldr	r0, [pc, #24]	; (8007b0c <hci_init+0x34>)
 8007af2:	f000 f973 	bl	8007ddc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f8d4 	bl	8007ca8 <TlInit>

  return;
 8007b00:	bf00      	nop
}
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	200001f8 	.word	0x200001f8
 8007b0c:	200001d0 	.word	0x200001d0

08007b10 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b16:	4822      	ldr	r0, [pc, #136]	; (8007ba0 <hci_user_evt_proc+0x90>)
 8007b18:	f000 fd28 	bl	800856c <LST_is_empty>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d12b      	bne.n	8007b7a <hci_user_evt_proc+0x6a>
 8007b22:	4b20      	ldr	r3, [pc, #128]	; (8007ba4 <hci_user_evt_proc+0x94>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d027      	beq.n	8007b7a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007b2a:	f107 030c 	add.w	r3, r7, #12
 8007b2e:	4619      	mov	r1, r3
 8007b30:	481b      	ldr	r0, [pc, #108]	; (8007ba0 <hci_user_evt_proc+0x90>)
 8007b32:	f000 fdaa 	bl	800868a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007b36:	4b1c      	ldr	r3, [pc, #112]	; (8007ba8 <hci_user_evt_proc+0x98>)
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00c      	beq.n	8007b58 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007b42:	2301      	movs	r3, #1
 8007b44:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007b46:	4b18      	ldr	r3, [pc, #96]	; (8007ba8 <hci_user_evt_proc+0x98>)
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	1d3a      	adds	r2, r7, #4
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007b50:	793a      	ldrb	r2, [r7, #4]
 8007b52:	4b14      	ldr	r3, [pc, #80]	; (8007ba4 <hci_user_evt_proc+0x94>)
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e002      	b.n	8007b5e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007b58:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <hci_user_evt_proc+0x94>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007b5e:	4b11      	ldr	r3, [pc, #68]	; (8007ba4 <hci_user_evt_proc+0x94>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fc03 	bl	8008374 <TL_MM_EvtDone>
 8007b6e:	e004      	b.n	8007b7a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4619      	mov	r1, r3
 8007b74:	480a      	ldr	r0, [pc, #40]	; (8007ba0 <hci_user_evt_proc+0x90>)
 8007b76:	f000 fd1b 	bl	80085b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b7a:	4809      	ldr	r0, [pc, #36]	; (8007ba0 <hci_user_evt_proc+0x90>)
 8007b7c:	f000 fcf6 	bl	800856c <LST_is_empty>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d107      	bne.n	8007b96 <hci_user_evt_proc+0x86>
 8007b86:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <hci_user_evt_proc+0x94>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007b8e:	4804      	ldr	r0, [pc, #16]	; (8007ba0 <hci_user_evt_proc+0x90>)
 8007b90:	f001 f868 	bl	8008c64 <hci_notify_asynch_evt>
  }


  return;
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
}
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200000e8 	.word	0x200000e8
 8007ba4:	200000f4 	.word	0x200000f4
 8007ba8:	200001d0 	.word	0x200001d0

08007bac <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f000 f8cb 	bl	8007d54 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	885b      	ldrh	r3, [r3, #2]
 8007bc6:	b21b      	sxth	r3, r3
 8007bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bcc:	b21a      	sxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	029b      	lsls	r3, r3, #10
 8007bd4:	b21b      	sxth	r3, r3
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	b21b      	sxth	r3, r3
 8007bda:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	b2d9      	uxtb	r1, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	8bbb      	ldrh	r3, [r7, #28]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 f88d 	bl	8007d08 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007bee:	e04e      	b.n	8007c8e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007bf0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007bf4:	f001 f84d 	bl	8008c92 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007bf8:	e043      	b.n	8007c82 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007bfa:	f107 030c 	add.w	r3, r7, #12
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4828      	ldr	r0, [pc, #160]	; (8007ca4 <hci_send_req+0xf8>)
 8007c02:	f000 fd42 	bl	800868a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	7a5b      	ldrb	r3, [r3, #9]
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	d114      	bne.n	8007c38 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	330b      	adds	r3, #11
 8007c12:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	885b      	ldrh	r3, [r3, #2]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	8bba      	ldrh	r2, [r7, #28]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d104      	bne.n	8007c2a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	7812      	ldrb	r2, [r2, #0]
 8007c28:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d027      	beq.n	8007c82 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007c32:	2301      	movs	r3, #1
 8007c34:	77fb      	strb	r3, [r7, #31]
 8007c36:	e024      	b.n	8007c82 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	330b      	adds	r3, #11
 8007c3c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	8bba      	ldrh	r2, [r7, #28]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d114      	bne.n	8007c76 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	7a9b      	ldrb	r3, [r3, #10]
 8007c50:	3b03      	subs	r3, #3
 8007c52:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	bfa8      	it	ge
 8007c5e:	461a      	movge	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6918      	ldr	r0, [r3, #16]
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	1cd9      	adds	r1, r3, #3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	461a      	mov	r2, r3
 8007c72:	f002 f871 	bl	8009d58 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007c82:	4808      	ldr	r0, [pc, #32]	; (8007ca4 <hci_send_req+0xf8>)
 8007c84:	f000 fc72 	bl	800856c <LST_is_empty>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0b5      	beq.n	8007bfa <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007c8e:	7ffb      	ldrb	r3, [r7, #31]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0ad      	beq.n	8007bf0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007c94:	2001      	movs	r0, #1
 8007c96:	f000 f85d 	bl	8007d54 <NotifyCmdStatus>

  return 0;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	200001f0 	.word	0x200001f0

08007ca8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007cb0:	480f      	ldr	r0, [pc, #60]	; (8007cf0 <TlInit+0x48>)
 8007cb2:	f000 fc4b 	bl	800854c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007cb6:	4a0f      	ldr	r2, [pc, #60]	; (8007cf4 <TlInit+0x4c>)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007cbc:	480e      	ldr	r0, [pc, #56]	; (8007cf8 <TlInit+0x50>)
 8007cbe:	f000 fc45 	bl	800854c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	; (8007cfc <TlInit+0x54>)
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <TlInit+0x58>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007cd4:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <TlInit+0x5c>)
 8007cd6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <TlInit+0x58>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f107 0208 	add.w	r2, r7, #8
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4798      	blx	r3
  }

  return;
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop
}
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	200001f0 	.word	0x200001f0
 8007cf4:	200000f0 	.word	0x200000f0
 8007cf8:	200000e8 	.word	0x200000e8
 8007cfc:	200000f4 	.word	0x200000f4
 8007d00:	200001d0 	.word	0x200001d0
 8007d04:	08007d95 	.word	0x08007d95

08007d08 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	603a      	str	r2, [r7, #0]
 8007d12:	80fb      	strh	r3, [r7, #6]
 8007d14:	460b      	mov	r3, r1
 8007d16:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007d18:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <SendCmd+0x44>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	88fa      	ldrh	r2, [r7, #6]
 8007d1e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007d22:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <SendCmd+0x44>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	797a      	ldrb	r2, [r7, #5]
 8007d28:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007d2a:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <SendCmd+0x44>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	797a      	ldrb	r2, [r7, #5]
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f002 f80f 	bl	8009d58 <memcpy>

  hciContext.io.Send(0,0);
 8007d3a:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <SendCmd+0x48>)
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	2000      	movs	r0, #0
 8007d42:	4798      	blx	r3

  return;
 8007d44:	bf00      	nop
}
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	200000f0 	.word	0x200000f0
 8007d50:	200001d0 	.word	0x200001d0

08007d54 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d108      	bne.n	8007d76 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007d64:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <NotifyCmdStatus+0x3c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00d      	beq.n	8007d88 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007d6c:	4b08      	ldr	r3, [pc, #32]	; (8007d90 <NotifyCmdStatus+0x3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2000      	movs	r0, #0
 8007d72:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007d74:	e008      	b.n	8007d88 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <NotifyCmdStatus+0x3c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007d7e:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <NotifyCmdStatus+0x3c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2001      	movs	r0, #1
 8007d84:	4798      	blx	r3
  return;
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
}
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	200001f8 	.word	0x200001f8

08007d94 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7a5b      	ldrb	r3, [r3, #9]
 8007da0:	2b0f      	cmp	r3, #15
 8007da2:	d003      	beq.n	8007dac <TlEvtReceived+0x18>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	7a5b      	ldrb	r3, [r3, #9]
 8007da8:	2b0e      	cmp	r3, #14
 8007daa:	d107      	bne.n	8007dbc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	4809      	ldr	r0, [pc, #36]	; (8007dd4 <TlEvtReceived+0x40>)
 8007db0:	f000 fc24 	bl	80085fc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007db4:	2000      	movs	r0, #0
 8007db6:	f000 ff61 	bl	8008c7c <hci_cmd_resp_release>
 8007dba:	e006      	b.n	8007dca <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	4806      	ldr	r0, [pc, #24]	; (8007dd8 <TlEvtReceived+0x44>)
 8007dc0:	f000 fc1c 	bl	80085fc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007dc4:	4804      	ldr	r0, [pc, #16]	; (8007dd8 <TlEvtReceived+0x44>)
 8007dc6:	f000 ff4d 	bl	8008c64 <hci_notify_asynch_evt>
  }

  return;
 8007dca:	bf00      	nop
}
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	200001f0 	.word	0x200001f0
 8007dd8:	200000e8 	.word	0x200000e8

08007ddc <hci_register_io_bus>:
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a05      	ldr	r2, [pc, #20]	; (8007dfc <hci_register_io_bus+0x20>)
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a04      	ldr	r2, [pc, #16]	; (8007e00 <hci_register_io_bus+0x24>)
 8007dee:	611a      	str	r2, [r3, #16]
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	080080ed 	.word	0x080080ed
 8007e00:	08008155 	.word	0x08008155

08007e04 <shci_init>:
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4a08      	ldr	r2, [pc, #32]	; (8007e34 <shci_init+0x30>)
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <shci_init+0x34>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	61d3      	str	r3, [r2, #28]
 8007e1c:	4806      	ldr	r0, [pc, #24]	; (8007e38 <shci_init+0x34>)
 8007e1e:	f000 f911 	bl	8008044 <shci_register_io_bus>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 f894 	bl	8007f54 <TlInit>
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	2000021c 	.word	0x2000021c
 8007e38:	200001fc 	.word	0x200001fc

08007e3c <shci_user_evt_proc>:
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4822      	ldr	r0, [pc, #136]	; (8007ecc <shci_user_evt_proc+0x90>)
 8007e44:	f000 fb92 	bl	800856c <LST_is_empty>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d12b      	bne.n	8007ea6 <shci_user_evt_proc+0x6a>
 8007e4e:	4b20      	ldr	r3, [pc, #128]	; (8007ed0 <shci_user_evt_proc+0x94>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d027      	beq.n	8007ea6 <shci_user_evt_proc+0x6a>
 8007e56:	f107 030c 	add.w	r3, r7, #12
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	481b      	ldr	r0, [pc, #108]	; (8007ecc <shci_user_evt_proc+0x90>)
 8007e5e:	f000 fc14 	bl	800868a <LST_remove_head>
 8007e62:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <shci_user_evt_proc+0x98>)
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00c      	beq.n	8007e84 <shci_user_evt_proc+0x48>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	60bb      	str	r3, [r7, #8]
 8007e6e:	2301      	movs	r3, #1
 8007e70:	713b      	strb	r3, [r7, #4]
 8007e72:	4b18      	ldr	r3, [pc, #96]	; (8007ed4 <shci_user_evt_proc+0x98>)
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	1d3a      	adds	r2, r7, #4
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	793a      	ldrb	r2, [r7, #4]
 8007e7e:	4b14      	ldr	r3, [pc, #80]	; (8007ed0 <shci_user_evt_proc+0x94>)
 8007e80:	701a      	strb	r2, [r3, #0]
 8007e82:	e002      	b.n	8007e8a <shci_user_evt_proc+0x4e>
 8007e84:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <shci_user_evt_proc+0x94>)
 8007e86:	2201      	movs	r2, #1
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	4b11      	ldr	r3, [pc, #68]	; (8007ed0 <shci_user_evt_proc+0x94>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d004      	beq.n	8007e9c <shci_user_evt_proc+0x60>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fa6d 	bl	8008374 <TL_MM_EvtDone>
 8007e9a:	e004      	b.n	8007ea6 <shci_user_evt_proc+0x6a>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	480a      	ldr	r0, [pc, #40]	; (8007ecc <shci_user_evt_proc+0x90>)
 8007ea2:	f000 fb85 	bl	80085b0 <LST_insert_head>
 8007ea6:	4809      	ldr	r0, [pc, #36]	; (8007ecc <shci_user_evt_proc+0x90>)
 8007ea8:	f000 fb60 	bl	800856c <LST_is_empty>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d107      	bne.n	8007ec2 <shci_user_evt_proc+0x86>
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <shci_user_evt_proc+0x94>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <shci_user_evt_proc+0x86>
 8007eba:	4804      	ldr	r0, [pc, #16]	; (8007ecc <shci_user_evt_proc+0x90>)
 8007ebc:	f7f8 fbc3 	bl	8000646 <shci_notify_asynch_evt>
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000104 	.word	0x20000104
 8007ed0:	20000114 	.word	0x20000114
 8007ed4:	200001fc 	.word	0x200001fc

08007ed8 <shci_send>:
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60ba      	str	r2, [r7, #8]
 8007ee0:	607b      	str	r3, [r7, #4]
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	81fb      	strh	r3, [r7, #14]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	737b      	strb	r3, [r7, #13]
 8007eea:	2000      	movs	r0, #0
 8007eec:	f000 f864 	bl	8007fb8 <Cmd_SetStatus>
 8007ef0:	4b16      	ldr	r3, [pc, #88]	; (8007f4c <shci_send+0x74>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	89fa      	ldrh	r2, [r7, #14]
 8007ef6:	f8a3 2009 	strh.w	r2, [r3, #9]
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <shci_send+0x74>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	7b7a      	ldrb	r2, [r7, #13]
 8007f00:	72da      	strb	r2, [r3, #11]
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <shci_send+0x74>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	330c      	adds	r3, #12
 8007f08:	7b7a      	ldrb	r2, [r7, #13]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 ff23 	bl	8009d58 <memcpy>
 8007f12:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <shci_send+0x78>)
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2100      	movs	r1, #0
 8007f18:	2000      	movs	r0, #0
 8007f1a:	4798      	blx	r3
 8007f1c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007f20:	f7f8 fba8 	bl	8000674 <shci_cmd_resp_wait>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f103 0008 	add.w	r0, r3, #8
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <shci_send+0x74>)
 8007f2c:	6819      	ldr	r1, [r3, #0]
 8007f2e:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <shci_send+0x74>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	789b      	ldrb	r3, [r3, #2]
 8007f34:	3303      	adds	r3, #3
 8007f36:	461a      	mov	r2, r3
 8007f38:	f001 ff0e 	bl	8009d58 <memcpy>
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	f000 f83b 	bl	8007fb8 <Cmd_SetStatus>
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000110 	.word	0x20000110
 8007f50:	200001fc 	.word	0x200001fc

08007f54 <TlInit>:
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	4a10      	ldr	r2, [pc, #64]	; (8007fa0 <TlInit+0x4c>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	4810      	ldr	r0, [pc, #64]	; (8007fa4 <TlInit+0x50>)
 8007f64:	f000 faf2 	bl	800854c <LST_init_head>
 8007f68:	2001      	movs	r0, #1
 8007f6a:	f000 f825 	bl	8007fb8 <Cmd_SetStatus>
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <TlInit+0x54>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <TlInit+0x58>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00c      	beq.n	8007f96 <TlInit+0x42>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <TlInit+0x5c>)
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <TlInit+0x60>)
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	4b08      	ldr	r3, [pc, #32]	; (8007fac <TlInit+0x58>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f107 020c 	add.w	r2, r7, #12
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000110 	.word	0x20000110
 8007fa4:	20000104 	.word	0x20000104
 8007fa8:	20000114 	.word	0x20000114
 8007fac:	200001fc 	.word	0x200001fc
 8007fb0:	08008009 	.word	0x08008009
 8007fb4:	08008021 	.word	0x08008021

08007fb8 <Cmd_SetStatus>:
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	71fb      	strb	r3, [r7, #7]
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10b      	bne.n	8007fe0 <Cmd_SetStatus+0x28>
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <Cmd_SetStatus+0x48>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <Cmd_SetStatus+0x20>
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <Cmd_SetStatus+0x48>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	4798      	blx	r3
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <Cmd_SetStatus+0x4c>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	e00b      	b.n	8007ff8 <Cmd_SetStatus+0x40>
 8007fe0:	4b08      	ldr	r3, [pc, #32]	; (8008004 <Cmd_SetStatus+0x4c>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	701a      	strb	r2, [r3, #0]
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <Cmd_SetStatus+0x48>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <Cmd_SetStatus+0x40>
 8007fee:	4b04      	ldr	r3, [pc, #16]	; (8008000 <Cmd_SetStatus+0x48>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	4798      	blx	r3
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	2000021c 	.word	0x2000021c
 8008004:	2000010c 	.word	0x2000010c

08008008 <TlCmdEvtReceived>:
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	2000      	movs	r0, #0
 8008012:	f7f8 fb24 	bl	800065e <shci_cmd_resp_release>
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <TlUserEvtReceived>:
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4805      	ldr	r0, [pc, #20]	; (8008040 <TlUserEvtReceived+0x20>)
 800802c:	f000 fae6 	bl	80085fc <LST_insert_tail>
 8008030:	4803      	ldr	r0, [pc, #12]	; (8008040 <TlUserEvtReceived+0x20>)
 8008032:	f7f8 fb08 	bl	8000646 <shci_notify_asynch_evt>
 8008036:	bf00      	nop
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000104 	.word	0x20000104

08008044 <shci_register_io_bus>:
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a05      	ldr	r2, [pc, #20]	; (8008064 <shci_register_io_bus+0x20>)
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a04      	ldr	r2, [pc, #16]	; (8008068 <shci_register_io_bus+0x24>)
 8008056:	611a      	str	r2, [r3, #16]
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	08008201 	.word	0x08008201
 8008068:	08008255 	.word	0x08008255

0800806c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008070:	f001 fb1e 	bl	80096b0 <HW_IPCC_Enable>

  return;
 8008074:	bf00      	nop
}
 8008076:	bd80      	pop	{r7, pc}

08008078 <TL_Init>:


void TL_Init( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <TL_Init+0x48>)
 800807e:	4a11      	ldr	r2, [pc, #68]	; (80080c4 <TL_Init+0x4c>)
 8008080:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008082:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <TL_Init+0x48>)
 8008084:	4a10      	ldr	r2, [pc, #64]	; (80080c8 <TL_Init+0x50>)
 8008086:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008088:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <TL_Init+0x48>)
 800808a:	4a10      	ldr	r2, [pc, #64]	; (80080cc <TL_Init+0x54>)
 800808c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <TL_Init+0x48>)
 8008090:	4a0f      	ldr	r2, [pc, #60]	; (80080d0 <TL_Init+0x58>)
 8008092:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <TL_Init+0x48>)
 8008096:	4a0f      	ldr	r2, [pc, #60]	; (80080d4 <TL_Init+0x5c>)
 8008098:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <TL_Init+0x48>)
 800809c:	4a0e      	ldr	r2, [pc, #56]	; (80080d8 <TL_Init+0x60>)
 800809e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <TL_Init+0x48>)
 80080a2:	4a0e      	ldr	r2, [pc, #56]	; (80080dc <TL_Init+0x64>)
 80080a4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80080a6:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <TL_Init+0x48>)
 80080a8:	4a0d      	ldr	r2, [pc, #52]	; (80080e0 <TL_Init+0x68>)
 80080aa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <TL_Init+0x48>)
 80080ae:	4a0d      	ldr	r2, [pc, #52]	; (80080e4 <TL_Init+0x6c>)
 80080b0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80080b2:	4b03      	ldr	r3, [pc, #12]	; (80080c0 <TL_Init+0x48>)
 80080b4:	4a0c      	ldr	r2, [pc, #48]	; (80080e8 <TL_Init+0x70>)
 80080b6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80080b8:	f001 fb0e 	bl	80096d8 <HW_IPCC_Init>

  return;
 80080bc:	bf00      	nop
}
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20030000 	.word	0x20030000
 80080c4:	20030028 	.word	0x20030028
 80080c8:	20030048 	.word	0x20030048
 80080cc:	20030058 	.word	0x20030058
 80080d0:	20030064 	.word	0x20030064
 80080d4:	2003006c 	.word	0x2003006c
 80080d8:	20030074 	.word	0x20030074
 80080dc:	2003007c 	.word	0x2003007c
 80080e0:	20030098 	.word	0x20030098
 80080e4:	2003009c 	.word	0x2003009c
 80080e8:	200300a8 	.word	0x200300a8

080080ec <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80080f8:	4811      	ldr	r0, [pc, #68]	; (8008140 <TL_BLE_Init+0x54>)
 80080fa:	f000 fa27 	bl	800854c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80080fe:	4b11      	ldr	r3, [pc, #68]	; (8008144 <TL_BLE_Init+0x58>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4a0c      	ldr	r2, [pc, #48]	; (8008148 <TL_BLE_Init+0x5c>)
 8008118:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	4a08      	ldr	r2, [pc, #32]	; (8008140 <TL_BLE_Init+0x54>)
 800811e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008120:	f001 faf0 	bl	8009704 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a08      	ldr	r2, [pc, #32]	; (800814c <TL_BLE_Init+0x60>)
 800812a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	4a07      	ldr	r2, [pc, #28]	; (8008150 <TL_BLE_Init+0x64>)
 8008132:	6013      	str	r3, [r2, #0]

  return 0;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	200300c4 	.word	0x200300c4
 8008144:	20030000 	.word	0x20030000
 8008148:	20030a48 	.word	0x20030a48
 800814c:	20000228 	.word	0x20000228
 8008150:	2000022c 	.word	0x2000022c

08008154 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <TL_BLE_SendCmd+0x34>)
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2201      	movs	r2, #1
 8008168:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800816a:	4b07      	ldr	r3, [pc, #28]	; (8008188 <TL_BLE_SendCmd+0x34>)
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4619      	mov	r1, r3
 8008172:	2001      	movs	r0, #1
 8008174:	f000 f96c 	bl	8008450 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008178:	f001 face 	bl	8009718 <HW_IPCC_BLE_SendCmd>

  return 0;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20030000 	.word	0x20030000

0800818c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008192:	e01c      	b.n	80081ce <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008194:	1d3b      	adds	r3, r7, #4
 8008196:	4619      	mov	r1, r3
 8008198:	4812      	ldr	r0, [pc, #72]	; (80081e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800819a:	f000 fa76 	bl	800868a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7a5b      	ldrb	r3, [r3, #9]
 80081a2:	2b0f      	cmp	r3, #15
 80081a4:	d003      	beq.n	80081ae <HW_IPCC_BLE_RxEvtNot+0x22>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	7a5b      	ldrb	r3, [r3, #9]
 80081aa:	2b0e      	cmp	r3, #14
 80081ac:	d105      	bne.n	80081ba <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4619      	mov	r1, r3
 80081b2:	2002      	movs	r0, #2
 80081b4:	f000 f94c 	bl	8008450 <OutputDbgTrace>
 80081b8:	e004      	b.n	80081c4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4619      	mov	r1, r3
 80081be:	2003      	movs	r0, #3
 80081c0:	f000 f946 	bl	8008450 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80081c4:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	4610      	mov	r0, r2
 80081cc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80081ce:	4805      	ldr	r0, [pc, #20]	; (80081e4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80081d0:	f000 f9cc 	bl	800856c <LST_is_empty>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0dc      	beq.n	8008194 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80081da:	bf00      	nop
}
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	200300c4 	.word	0x200300c4
 80081e8:	20000228 	.word	0x20000228

080081ec <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80081f0:	4b02      	ldr	r3, [pc, #8]	; (80081fc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4798      	blx	r3

  return;
 80081f6:	bf00      	nop
}
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	2000022c 	.word	0x2000022c

08008200 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800820c:	480d      	ldr	r0, [pc, #52]	; (8008244 <TL_SYS_Init+0x44>)
 800820e:	f000 f99d 	bl	800854c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008212:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <TL_SYS_Init+0x48>)
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4a08      	ldr	r2, [pc, #32]	; (8008244 <TL_SYS_Init+0x44>)
 8008224:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008226:	f001 fa99 	bl	800975c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a07      	ldr	r2, [pc, #28]	; (800824c <TL_SYS_Init+0x4c>)
 8008230:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	4a06      	ldr	r2, [pc, #24]	; (8008250 <TL_SYS_Init+0x50>)
 8008238:	6013      	str	r3, [r2, #0]

  return 0;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	200300cc 	.word	0x200300cc
 8008248:	20030000 	.word	0x20030000
 800824c:	20000230 	.word	0x20000230
 8008250:	20000234 	.word	0x20000234

08008254 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008260:	4b09      	ldr	r3, [pc, #36]	; (8008288 <TL_SYS_SendCmd+0x34>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2210      	movs	r2, #16
 8008268:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <TL_SYS_SendCmd+0x34>)
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4619      	mov	r1, r3
 8008272:	2004      	movs	r0, #4
 8008274:	f000 f8ec 	bl	8008450 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008278:	f001 fa7a 	bl	8009770 <HW_IPCC_SYS_SendCmd>

  return 0;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20030000 	.word	0x20030000

0800828c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008290:	4b07      	ldr	r3, [pc, #28]	; (80082b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4619      	mov	r1, r3
 8008298:	2005      	movs	r0, #5
 800829a:	f000 f8d9 	bl	8008450 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a03      	ldr	r2, [pc, #12]	; (80082b0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80082a4:	68d2      	ldr	r2, [r2, #12]
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	4610      	mov	r0, r2
 80082aa:	4798      	blx	r3

  return;
 80082ac:	bf00      	nop
}
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20030000 	.word	0x20030000
 80082b4:	20000230 	.word	0x20000230

080082b8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80082be:	e00e      	b.n	80082de <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	4619      	mov	r1, r3
 80082c4:	480b      	ldr	r0, [pc, #44]	; (80082f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80082c6:	f000 f9e0 	bl	800868a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4619      	mov	r1, r3
 80082ce:	2006      	movs	r0, #6
 80082d0:	f000 f8be 	bl	8008450 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80082d4:	4b08      	ldr	r3, [pc, #32]	; (80082f8 <HW_IPCC_SYS_EvtNot+0x40>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	4610      	mov	r0, r2
 80082dc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80082de:	4805      	ldr	r0, [pc, #20]	; (80082f4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80082e0:	f000 f944 	bl	800856c <LST_is_empty>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0ea      	beq.n	80082c0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80082ea:	bf00      	nop
}
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	200300cc 	.word	0x200300cc
 80082f8:	20000234 	.word	0x20000234

080082fc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008304:	4817      	ldr	r0, [pc, #92]	; (8008364 <TL_MM_Init+0x68>)
 8008306:	f000 f921 	bl	800854c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800830a:	4817      	ldr	r0, [pc, #92]	; (8008368 <TL_MM_Init+0x6c>)
 800830c:	f000 f91e 	bl	800854c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008310:	4b16      	ldr	r3, [pc, #88]	; (800836c <TL_MM_Init+0x70>)
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	4a16      	ldr	r2, [pc, #88]	; (8008370 <TL_MM_Init+0x74>)
 8008316:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008318:	4b15      	ldr	r3, [pc, #84]	; (8008370 <TL_MM_Init+0x74>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6892      	ldr	r2, [r2, #8]
 8008320:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008322:	4b13      	ldr	r3, [pc, #76]	; (8008370 <TL_MM_Init+0x74>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	68d2      	ldr	r2, [r2, #12]
 800832a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800832c:	4b10      	ldr	r3, [pc, #64]	; (8008370 <TL_MM_Init+0x74>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a0c      	ldr	r2, [pc, #48]	; (8008364 <TL_MM_Init+0x68>)
 8008332:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008334:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <TL_MM_Init+0x74>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6812      	ldr	r2, [r2, #0]
 800833c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <TL_MM_Init+0x74>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6852      	ldr	r2, [r2, #4]
 8008346:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008348:	4b09      	ldr	r3, [pc, #36]	; (8008370 <TL_MM_Init+0x74>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6912      	ldr	r2, [r2, #16]
 8008350:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008352:	4b07      	ldr	r3, [pc, #28]	; (8008370 <TL_MM_Init+0x74>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6952      	ldr	r2, [r2, #20]
 800835a:	619a      	str	r2, [r3, #24]

  return;
 800835c:	bf00      	nop
}
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	200300b4 	.word	0x200300b4
 8008368:	20000220 	.word	0x20000220
 800836c:	20030000 	.word	0x20030000
 8008370:	20000238 	.word	0x20000238

08008374 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800837c:	6879      	ldr	r1, [r7, #4]
 800837e:	4807      	ldr	r0, [pc, #28]	; (800839c <TL_MM_EvtDone+0x28>)
 8008380:	f000 f93c 	bl	80085fc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	2000      	movs	r0, #0
 8008388:	f000 f862 	bl	8008450 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800838c:	4804      	ldr	r0, [pc, #16]	; (80083a0 <TL_MM_EvtDone+0x2c>)
 800838e:	f001 fa15 	bl	80097bc <HW_IPCC_MM_SendFreeBuf>

  return;
 8008392:	bf00      	nop
}
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000220 	.word	0x20000220
 80083a0:	080083a5 	.word	0x080083a5

080083a4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80083aa:	e00c      	b.n	80083c6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80083ac:	1d3b      	adds	r3, r7, #4
 80083ae:	4619      	mov	r1, r3
 80083b0:	480a      	ldr	r0, [pc, #40]	; (80083dc <SendFreeBuf+0x38>)
 80083b2:	f000 f96a 	bl	800868a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80083b6:	4b0a      	ldr	r3, [pc, #40]	; (80083e0 <SendFreeBuf+0x3c>)
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	4611      	mov	r1, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f91b 	bl	80085fc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80083c6:	4805      	ldr	r0, [pc, #20]	; (80083dc <SendFreeBuf+0x38>)
 80083c8:	f000 f8d0 	bl	800856c <LST_is_empty>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0ec      	beq.n	80083ac <SendFreeBuf+0x8>
  }

  return;
 80083d2:	bf00      	nop
}
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000220 	.word	0x20000220
 80083e0:	20030000 	.word	0x20030000

080083e4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80083e8:	4805      	ldr	r0, [pc, #20]	; (8008400 <TL_TRACES_Init+0x1c>)
 80083ea:	f000 f8af 	bl	800854c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80083ee:	4b05      	ldr	r3, [pc, #20]	; (8008404 <TL_TRACES_Init+0x20>)
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	4a03      	ldr	r2, [pc, #12]	; (8008400 <TL_TRACES_Init+0x1c>)
 80083f4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80083f6:	f001 fa17 	bl	8009828 <HW_IPCC_TRACES_Init>

  return;
 80083fa:	bf00      	nop
}
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	200300bc 	.word	0x200300bc
 8008404:	20030000 	.word	0x20030000

08008408 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800840e:	e008      	b.n	8008422 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008410:	1d3b      	adds	r3, r7, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4808      	ldr	r0, [pc, #32]	; (8008438 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008416:	f000 f938 	bl	800868a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 f80d 	bl	800843c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008422:	4805      	ldr	r0, [pc, #20]	; (8008438 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008424:	f000 f8a2 	bl	800856c <LST_is_empty>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0f0      	beq.n	8008410 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800842e:	bf00      	nop
}
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200300bc 	.word	0x200300bc

0800843c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	2b06      	cmp	r3, #6
 8008460:	d845      	bhi.n	80084ee <OutputDbgTrace+0x9e>
 8008462:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <OutputDbgTrace+0x18>)
 8008464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008468:	08008485 	.word	0x08008485
 800846c:	080084a9 	.word	0x080084a9
 8008470:	080084af 	.word	0x080084af
 8008474:	080084c3 	.word	0x080084c3
 8008478:	080084cf 	.word	0x080084cf
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084e3 	.word	0x080084e3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	7a5b      	ldrb	r3, [r3, #9]
 800848c:	2bff      	cmp	r3, #255	; 0xff
 800848e:	d005      	beq.n	800849c <OutputDbgTrace+0x4c>
 8008490:	2bff      	cmp	r3, #255	; 0xff
 8008492:	dc05      	bgt.n	80084a0 <OutputDbgTrace+0x50>
 8008494:	2b0e      	cmp	r3, #14
 8008496:	d005      	beq.n	80084a4 <OutputDbgTrace+0x54>
 8008498:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800849a:	e001      	b.n	80084a0 <OutputDbgTrace+0x50>
          break;
 800849c:	bf00      	nop
 800849e:	e027      	b.n	80084f0 <OutputDbgTrace+0xa0>
          break;
 80084a0:	bf00      	nop
 80084a2:	e025      	b.n	80084f0 <OutputDbgTrace+0xa0>
          break;
 80084a4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80084a6:	e023      	b.n	80084f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80084ac:	e020      	b.n	80084f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	7a5b      	ldrb	r3, [r3, #9]
 80084b6:	2b0e      	cmp	r3, #14
 80084b8:	d001      	beq.n	80084be <OutputDbgTrace+0x6e>
 80084ba:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80084bc:	e000      	b.n	80084c0 <OutputDbgTrace+0x70>
          break;
 80084be:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084c0:	e016      	b.n	80084f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	7a5b      	ldrb	r3, [r3, #9]
 80084ca:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084cc:	e010      	b.n	80084f0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80084d2:	e00d      	b.n	80084f0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	7a5b      	ldrb	r3, [r3, #9]
 80084dc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80084de:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084e0:	e006      	b.n	80084f0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	7a5b      	ldrb	r3, [r3, #9]
 80084ea:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084ec:	e000      	b.n	80084f0 <OutputDbgTrace+0xa0>

    default:
      break;
 80084ee:	bf00      	nop
  }

  return;
 80084f0:	bf00      	nop
}
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <OTP_Read+0x48>)
 8008508:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800850a:	e002      	b.n	8008512 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3b08      	subs	r3, #8
 8008510:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3307      	adds	r3, #7
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	79fa      	ldrb	r2, [r7, #7]
 800851a:	429a      	cmp	r2, r3
 800851c:	d003      	beq.n	8008526 <OTP_Read+0x2a>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4a09      	ldr	r2, [pc, #36]	; (8008548 <OTP_Read+0x4c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d1f2      	bne.n	800850c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3307      	adds	r3, #7
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	79fa      	ldrb	r2, [r7, #7]
 800852e:	429a      	cmp	r2, r3
 8008530:	d001      	beq.n	8008536 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008536:	68fb      	ldr	r3, [r7, #12]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	1fff73f8 	.word	0x1fff73f8
 8008548:	1fff7000 	.word	0x1fff7000

0800854c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	605a      	str	r2, [r3, #4]
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008574:	f3ef 8310 	mrs	r3, PRIMASK
 8008578:	60fb      	str	r3, [r7, #12]
  return(result);
 800857a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800857c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800857e:	b672      	cpsid	i
}
 8008580:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	429a      	cmp	r2, r3
 800858a:	d102      	bne.n	8008592 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800858c:	2301      	movs	r3, #1
 800858e:	75fb      	strb	r3, [r7, #23]
 8008590:	e001      	b.n	8008596 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008592:	2300      	movs	r3, #0
 8008594:	75fb      	strb	r3, [r7, #23]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f383 8810 	msr	PRIMASK, r3
}
 80085a0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ba:	f3ef 8310 	mrs	r3, PRIMASK
 80085be:	60fb      	str	r3, [r7, #12]
  return(result);
 80085c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085c4:	b672      	cpsid	i
}
 80085c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	605a      	str	r2, [r3, #4]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f383 8810 	msr	PRIMASK, r3
}
 80085ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80085f0:	bf00      	nop
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008606:	f3ef 8310 	mrs	r3, PRIMASK
 800860a:	60fb      	str	r3, [r7, #12]
  return(result);
 800860c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800860e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008610:	b672      	cpsid	i
}
 8008612:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f383 8810 	msr	PRIMASK, r3
}
 800863a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800863c:	bf00      	nop
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008650:	f3ef 8310 	mrs	r3, PRIMASK
 8008654:	60fb      	str	r3, [r7, #12]
  return(result);
 8008656:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008658:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800865a:	b672      	cpsid	i
}
 800865c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6812      	ldr	r2, [r2, #0]
 8008666:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6852      	ldr	r2, [r2, #4]
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f383 8810 	msr	PRIMASK, r3
}
 800867c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b086      	sub	sp, #24
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008694:	f3ef 8310 	mrs	r3, PRIMASK
 8008698:	60fb      	str	r3, [r7, #12]
  return(result);
 800869a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800869c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800869e:	b672      	cpsid	i
}
 80086a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff ffca 	bl	8008648 <LST_remove_node>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f383 8810 	msr	PRIMASK, r3
}
 80086be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086c0:	bf00      	nop
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80086cc:	4b03      	ldr	r3, [pc, #12]	; (80086dc <LL_FLASH_GetUDN+0x14>)
 80086ce:	681b      	ldr	r3, [r3, #0]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	1fff7580 	.word	0x1fff7580

080086e0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80086e0:	b480      	push	{r7}
 80086e2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80086e4:	4b03      	ldr	r3, [pc, #12]	; (80086f4 <LL_FLASH_GetDeviceID+0x14>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	b2db      	uxtb	r3, r3
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	1fff7584 	.word	0x1fff7584

080086f8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80086fc:	4b03      	ldr	r3, [pc, #12]	; (800870c <LL_FLASH_GetSTCompanyID+0x14>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	0a1b      	lsrs	r3, r3, #8
}
 8008702:	4618      	mov	r0, r3
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	1fff7584 	.word	0x1fff7584

08008710 <APP_BLE_Init>:
static void GoSleep( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8008710:	b5b0      	push	{r4, r5, r7, lr}
 8008712:	b08c      	sub	sp, #48	; 0x30
 8008714:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */
	isWorking=0;
 8008716:	4b2b      	ldr	r3, [pc, #172]	; (80087c4 <APP_BLE_Init+0xb4>)
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
	  HW_TS_Create(TEST, &(TESTING), hw_ts_Repeated, GoSleep);
 800871c:	4b2a      	ldr	r3, [pc, #168]	; (80087c8 <APP_BLE_Init+0xb8>)
 800871e:	2201      	movs	r2, #1
 8008720:	492a      	ldr	r1, [pc, #168]	; (80087cc <APP_BLE_Init+0xbc>)
 8008722:	2001      	movs	r0, #1
 8008724:	f7f8 fcc2 	bl	80010ac <HW_TS_Create>
	  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Connection_mgr_timer_Id), hw_ts_SingleShot, AutoDisconnect);
 8008728:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <APP_BLE_Init+0xc0>)
 800872a:	2200      	movs	r2, #0
 800872c:	4929      	ldr	r1, [pc, #164]	; (80087d4 <APP_BLE_Init+0xc4>)
 800872e:	2000      	movs	r0, #0
 8008730:	f7f8 fcbc 	bl	80010ac <HW_TS_Create>
	  UTIL_SEQ_RegTask( 1<< CFG_TASK_ADV_RESTART, UTIL_SEQ_RFU, AdvUpdate );
 8008734:	4a28      	ldr	r2, [pc, #160]	; (80087d8 <APP_BLE_Init+0xc8>)
 8008736:	2100      	movs	r1, #0
 8008738:	2020      	movs	r0, #32
 800873a:	f001 f9b1 	bl	8009aa0 <UTIL_SEQ_RegTask>
/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800873e:	4b27      	ldr	r3, [pc, #156]	; (80087dc <APP_BLE_Init+0xcc>)
 8008740:	463c      	mov	r4, r7
 8008742:	461d      	mov	r5, r3
 8008744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800874a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800874c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8008754:	f000 f932 	bl	80089bc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008758:	2101      	movs	r1, #1
 800875a:	2002      	movs	r0, #2
 800875c:	f001 f88c 	bl	8009878 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008760:	4a1f      	ldr	r2, [pc, #124]	; (80087e0 <APP_BLE_Init+0xd0>)
 8008762:	2100      	movs	r1, #0
 8008764:	2004      	movs	r0, #4
 8008766:	f001 f99b 	bl	8009aa0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800876a:	463b      	mov	r3, r7
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff f985 	bl	8007a7c <SHCI_C2_BLE_Init>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <APP_BLE_Init+0x6c>
  {
    Error_Handler();
 8008778:	f7f9 f886 	bl	8001888 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800877c:	f000 f934 	bl	80089e8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008780:	f7ff f8d8 	bl	8007934 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008784:	4b17      	ldr	r3, [pc, #92]	; (80087e4 <APP_BLE_Init+0xd4>)
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800878c:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <APP_BLE_Init+0xd4>)
 800878e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008792:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008794:	4a14      	ldr	r2, [pc, #80]	; (80087e8 <APP_BLE_Init+0xd8>)
 8008796:	2100      	movs	r1, #0
 8008798:	2001      	movs	r0, #1
 800879a:	f001 f981 	bl	8009aa0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800879e:	2006      	movs	r0, #6
 80087a0:	f7fe ff62 	bl	8007668 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80087a4:	f000 fb88 	bl	8008eb8 <Custom_APP_Init>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80087a8:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <APP_BLE_Init+0xd4>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <APP_BLE_Init+0xd4>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80087b4:	2001      	movs	r0, #1
 80087b6:	f000 f9bf 	bl	8008b38 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
//   HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Connection_mgr_timer_Id), hw_ts_SingleShot, AutoDisconnect);
//     UTIL_SEQ_RegTask( 1<< CFG_TASK_ADV_RESTART, UTIL_SEQ_RFU, AdvUpdate );
/* USER CODE END APP_BLE_Init_2 */
  return;
 80087ba:	bf00      	nop
}
 80087bc:	3730      	adds	r7, #48	; 0x30
 80087be:	46bd      	mov	sp, r7
 80087c0:	bdb0      	pop	{r4, r5, r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000471 	.word	0x20000471
 80087c8:	08008d55 	.word	0x08008d55
 80087cc:	20000470 	.word	0x20000470
 80087d0:	08008d25 	.word	0x08008d25
 80087d4:	20000472 	.word	0x20000472
 80087d8:	08008d17 	.word	0x08008d17
 80087dc:	08009df4 	.word	0x08009df4
 80087e0:	08007b11 	.word	0x08007b11
 80087e4:	20000118 	.word	0x20000118
 80087e8:	08008c31 	.word	0x08008c31

080087ec <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3301      	adds	r3, #1
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */
//  Custom_STM_Opcode_evt_t Notification;
  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2bff      	cmp	r3, #255	; 0xff
 8008800:	d064      	beq.n	80088cc <SVCCTL_App_Notification+0xe0>
 8008802:	2bff      	cmp	r3, #255	; 0xff
 8008804:	f300 80c5 	bgt.w	8008992 <SVCCTL_App_Notification+0x1a6>
 8008808:	2b05      	cmp	r3, #5
 800880a:	d002      	beq.n	8008812 <SVCCTL_App_Notification+0x26>
 800880c:	2b3e      	cmp	r3, #62	; 0x3e
 800880e:	d027      	beq.n	8008860 <SVCCTL_App_Notification+0x74>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008810:	e0bf      	b.n	8008992 <SVCCTL_App_Notification+0x1a6>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	3302      	adds	r3, #2
 8008816:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800881e:	b29a      	uxth	r2, r3
 8008820:	4b60      	ldr	r3, [pc, #384]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 8008822:	8adb      	ldrh	r3, [r3, #22]
 8008824:	429a      	cmp	r2, r3
 8008826:	d106      	bne.n	8008836 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008828:	4b5e      	ldr	r3, [pc, #376]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 800882a:	2200      	movs	r2, #0
 800882c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800882e:	4b5d      	ldr	r3, [pc, #372]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008836:	2001      	movs	r0, #1
 8008838:	f000 f97e 	bl	8008b38 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800883c:	4b5a      	ldr	r3, [pc, #360]	; (80089a8 <SVCCTL_App_Notification+0x1bc>)
 800883e:	2201      	movs	r2, #1
 8008840:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008842:	4b58      	ldr	r3, [pc, #352]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 8008844:	8ada      	ldrh	r2, [r3, #22]
 8008846:	4b58      	ldr	r3, [pc, #352]	; (80089a8 <SVCCTL_App_Notification+0x1bc>)
 8008848:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800884a:	4857      	ldr	r0, [pc, #348]	; (80089a8 <SVCCTL_App_Notification+0x1bc>)
 800884c:	f000 fb0e 	bl	8008e6c <Custom_APP_Notification>
      HW_TS_Start(Connection_mgr_timer_Id, FAST_ADV_TIMEOUT);
 8008850:	4b56      	ldr	r3, [pc, #344]	; (80089ac <SVCCTL_App_Notification+0x1c0>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f24f 0123 	movw	r1, #61475	; 0xf023
 8008858:	4618      	mov	r0, r3
 800885a:	f7f8 fd2d 	bl	80012b8 <HW_TS_Start>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800885e:	e09b      	b.n	8008998 <SVCCTL_App_Notification+0x1ac>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	3302      	adds	r3, #2
 8008864:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d001      	beq.n	8008872 <SVCCTL_App_Notification+0x86>
 800886e:	2b03      	cmp	r3, #3
          break;
 8008870:	e02b      	b.n	80088ca <SVCCTL_App_Notification+0xde>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	3301      	adds	r3, #1
 8008876:	60fb      	str	r3, [r7, #12]
          HW_TS_Stop(Connection_mgr_timer_Id);
 8008878:	4b4c      	ldr	r3, [pc, #304]	; (80089ac <SVCCTL_App_Notification+0x1c0>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f7f8 fc8f 	bl	80011a0 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008882:	4b48      	ldr	r3, [pc, #288]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 8008884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008888:	2b04      	cmp	r3, #4
 800888a:	d104      	bne.n	8008896 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800888c:	4b45      	ldr	r3, [pc, #276]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 800888e:	2206      	movs	r2, #6
 8008890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008894:	e003      	b.n	800889e <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008896:	4b43      	ldr	r3, [pc, #268]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 8008898:	2205      	movs	r2, #5
 800889a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 80088a8:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80088aa:	4b3f      	ldr	r3, [pc, #252]	; (80089a8 <SVCCTL_App_Notification+0x1bc>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80088b0:	4b3c      	ldr	r3, [pc, #240]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 80088b2:	8ada      	ldrh	r2, [r3, #22]
 80088b4:	4b3c      	ldr	r3, [pc, #240]	; (80089a8 <SVCCTL_App_Notification+0x1bc>)
 80088b6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 80088b8:	483b      	ldr	r0, [pc, #236]	; (80089a8 <SVCCTL_App_Notification+0x1bc>)
 80088ba:	f000 fad7 	bl	8008e6c <Custom_APP_Notification>
          HW_TS_Stop(Connection_mgr_timer_Id);
 80088be:	4b3b      	ldr	r3, [pc, #236]	; (80089ac <SVCCTL_App_Notification+0x1c0>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7f8 fc6c 	bl	80011a0 <HW_TS_Stop>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80088c8:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80088ca:	e065      	b.n	8008998 <SVCCTL_App_Notification+0x1ac>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	3302      	adds	r3, #2
 80088d0:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088dc:	d055      	beq.n	800898a <SVCCTL_App_Notification+0x19e>
 80088de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088e2:	dc58      	bgt.n	8008996 <SVCCTL_App_Notification+0x1aa>
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d023      	beq.n	8008930 <SVCCTL_App_Notification+0x144>
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	db54      	blt.n	8008996 <SVCCTL_App_Notification+0x1aa>
 80088ec:	f240 420a 	movw	r2, #1034	; 0x40a
 80088f0:	4293      	cmp	r3, r2
 80088f2:	dc50      	bgt.n	8008996 <SVCCTL_App_Notification+0x1aa>
 80088f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088f8:	dd4d      	ble.n	8008996 <SVCCTL_App_Notification+0x1aa>
 80088fa:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80088fe:	2b09      	cmp	r3, #9
 8008900:	d849      	bhi.n	8008996 <SVCCTL_App_Notification+0x1aa>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <SVCCTL_App_Notification+0x11c>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008983 	.word	0x08008983
 800890c:	08008959 	.word	0x08008959
 8008910:	08008997 	.word	0x08008997
 8008914:	08008997 	.word	0x08008997
 8008918:	08008997 	.word	0x08008997
 800891c:	08008997 	.word	0x08008997
 8008920:	0800898f 	.word	0x0800898f
 8008924:	08008997 	.word	0x08008997
 8008928:	08008967 	.word	0x08008967
 800892c:	0800898f 	.word	0x0800898f
        	isWorking=1;
 8008930:	4b1f      	ldr	r3, [pc, #124]	; (80089b0 <SVCCTL_App_Notification+0x1c4>)
 8008932:	2201      	movs	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8008936:	2201      	movs	r2, #1
 8008938:	2101      	movs	r1, #1
 800893a:	481e      	ldr	r0, [pc, #120]	; (80089b4 <SVCCTL_App_Notification+0x1c8>)
 800893c:	f7fb f9d4 	bl	8003ce8 <HAL_GPIO_WritePin>
        	HAL_Delay(5);
 8008940:	2005      	movs	r0, #5
 8008942:	f7f9 fa2f 	bl	8001da4 <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8008946:	2200      	movs	r2, #0
 8008948:	2101      	movs	r1, #1
 800894a:	481a      	ldr	r0, [pc, #104]	; (80089b4 <SVCCTL_App_Notification+0x1c8>)
 800894c:	f7fb f9cc 	bl	8003ce8 <HAL_GPIO_WritePin>
        	isWorking=0;
 8008950:	4b17      	ldr	r3, [pc, #92]	; (80089b0 <SVCCTL_App_Notification+0x1c4>)
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008956:	e01b      	b.n	8008990 <SVCCTL_App_Notification+0x1a4>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008958:	4b12      	ldr	r3, [pc, #72]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 800895a:	8adb      	ldrh	r3, [r3, #22]
 800895c:	4916      	ldr	r1, [pc, #88]	; (80089b8 <SVCCTL_App_Notification+0x1cc>)
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe f9c4 	bl	8006cec <aci_gap_pass_key_resp>
        break;
 8008964:	e014      	b.n	8008990 <SVCCTL_App_Notification+0x1a4>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	3302      	adds	r3, #2
 800896a:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008972:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008974:	4b0b      	ldr	r3, [pc, #44]	; (80089a4 <SVCCTL_App_Notification+0x1b8>)
 8008976:	8adb      	ldrh	r3, [r3, #22]
 8008978:	2101      	movs	r1, #1
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fb18 	bl	8006fb0 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8008980:	e006      	b.n	8008990 <SVCCTL_App_Notification+0x1a4>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	3302      	adds	r3, #2
 8008986:	617b      	str	r3, [r7, #20]
        break;
 8008988:	e002      	b.n	8008990 <SVCCTL_App_Notification+0x1a4>
      break;
 800898a:	bf00      	nop
 800898c:	e003      	b.n	8008996 <SVCCTL_App_Notification+0x1aa>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800898e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008990:	e001      	b.n	8008996 <SVCCTL_App_Notification+0x1aa>
      break;
 8008992:	bf00      	nop
 8008994:	e000      	b.n	8008998 <SVCCTL_App_Notification+0x1ac>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008996:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008998:	2301      	movs	r3, #1
}
 800899a:	4618      	mov	r0, r3
 800899c:	3728      	adds	r7, #40	; 0x28
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20000118 	.word	0x20000118
 80089a8:	2000046c 	.word	0x2000046c
 80089ac:	20000472 	.word	0x20000472
 80089b0:	20000471 	.word	0x20000471
 80089b4:	48000400 	.word	0x48000400
 80089b8:	0001b207 	.word	0x0001b207

080089bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80089c2:	4b06      	ldr	r3, [pc, #24]	; (80089dc <Ble_Tl_Init+0x20>)
 80089c4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80089c6:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <Ble_Tl_Init+0x24>)
 80089c8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80089ca:	463b      	mov	r3, r7
 80089cc:	4619      	mov	r1, r3
 80089ce:	4805      	ldr	r0, [pc, #20]	; (80089e4 <Ble_Tl_Init+0x28>)
 80089d0:	f7ff f882 	bl	8007ad8 <hci_init>

  return;
 80089d4:	bf00      	nop
}
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	200300d4 	.word	0x200300d4
 80089e0:	08008ce1 	.word	0x08008ce1
 80089e4:	08008ca9 	.word	0x08008ca9

080089e8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80089e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ea:	b08f      	sub	sp, #60	; 0x3c
 80089ec:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80089ee:	2300      	movs	r3, #0
 80089f0:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80089f2:	f7fe fe83 	bl	80076fc <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80089f6:	f000 f8d7 	bl	8008ba8 <BleGetBdAddress>
 80089fa:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	2106      	movs	r1, #6
 8008a00:	2000      	movs	r0, #0
 8008a02:	f7fe fd71 	bl	80074e8 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8008a06:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8008a0a:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8008a0c:	f7ff fe5c 	bl	80086c8 <LL_FLASH_GetUDN>
 8008a10:	4603      	mov	r3, r0
 8008a12:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8008a14:	1d3b      	adds	r3, r7, #4
 8008a16:	461a      	mov	r2, r3
 8008a18:	2106      	movs	r1, #6
 8008a1a:	202e      	movs	r0, #46	; 0x2e
 8008a1c:	f7fe fd64 	bl	80074e8 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8008a20:	4a40      	ldr	r2, [pc, #256]	; (8008b24 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8008a22:	2110      	movs	r1, #16
 8008a24:	2018      	movs	r0, #24
 8008a26:	f7fe fd5f 	bl	80074e8 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8008a2a:	4a3f      	ldr	r2, [pc, #252]	; (8008b28 <Ble_Hci_Gap_Gatt_Init+0x140>)
 8008a2c:	2110      	movs	r1, #16
 8008a2e:	2008      	movs	r0, #8
 8008a30:	f7fe fd5a 	bl	80074e8 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008a34:	2118      	movs	r1, #24
 8008a36:	2001      	movs	r0, #1
 8008a38:	f7fe fdbf 	bl	80075ba <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8008a3c:	f7fe fb0f 	bl	800705e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008a44:	7efb      	ldrb	r3, [r7, #27]
 8008a46:	f043 0301 	orr.w	r3, r3, #1
 8008a4a:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8008a4c:	7efb      	ldrb	r3, [r7, #27]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01e      	beq.n	8008a90 <Ble_Hci_Gap_Gatt_Init+0xa8>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008a52:	4b36      	ldr	r3, [pc, #216]	; (8008b2c <Ble_Hci_Gap_Gatt_Init+0x144>)
 8008a54:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8008a56:	f107 0212 	add.w	r2, r7, #18
 8008a5a:	7ef8      	ldrb	r0, [r7, #27]
 8008a5c:	f107 030e 	add.w	r3, r7, #14
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	f107 0310 	add.w	r3, r7, #16
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	2208      	movs	r2, #8
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f7fe f994 	bl	8006d9a <aci_gap_init>
                CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8008a72:	8a7c      	ldrh	r4, [r7, #18]
 8008a74:	8a3d      	ldrh	r5, [r7, #16]
 8008a76:	6978      	ldr	r0, [r7, #20]
 8008a78:	f7f7 fb80 	bl	800017c <strlen>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	4613      	mov	r3, r2
 8008a86:	2200      	movs	r2, #0
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7fe fca5 	bl	80073da <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8008a90:	8a78      	ldrh	r0, [r7, #18]
 8008a92:	89f9      	ldrh	r1, [r7, #14]
 8008a94:	463b      	mov	r3, r7
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	2302      	movs	r3, #2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f7fe fc9d 	bl	80073da <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	2102      	movs	r1, #2
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f7fe fe4d 	bl	8007744 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008aaa:	4b21      	ldr	r3, [pc, #132]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008ab0:	4b1f      	ldr	r3, [pc, #124]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe f827 	bl	8006b08 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008aba:	4b1d      	ldr	r3, [pc, #116]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008abc:	2201      	movs	r2, #1
 8008abe:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008ac0:	4b1b      	ldr	r3, [pc, #108]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ac2:	2208      	movs	r2, #8
 8008ac4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ac8:	2210      	movs	r2, #16
 8008aca:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008acc:	4b18      	ldr	r3, [pc, #96]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008ad2:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ad4:	4a17      	ldr	r2, [pc, #92]	; (8008b34 <Ble_Hci_Gap_Gatt_Init+0x14c>)
 8008ad6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008ad8:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ada:	2201      	movs	r2, #1
 8008adc:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008ade:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ae0:	789c      	ldrb	r4, [r3, #2]
 8008ae2:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ae4:	785d      	ldrb	r5, [r3, #1]
 8008ae6:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008ae8:	791b      	ldrb	r3, [r3, #4]
 8008aea:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008aec:	7952      	ldrb	r2, [r2, #5]
 8008aee:	4910      	ldr	r1, [pc, #64]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008af0:	78c9      	ldrb	r1, [r1, #3]
 8008af2:	480f      	ldr	r0, [pc, #60]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008af4:	6880      	ldr	r0, [r0, #8]
 8008af6:	2600      	movs	r6, #0
 8008af8:	9604      	str	r6, [sp, #16]
 8008afa:	9003      	str	r0, [sp, #12]
 8008afc:	9102      	str	r1, [sp, #8]
 8008afe:	9201      	str	r2, [sp, #4]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	2300      	movs	r3, #0
 8008b04:	2201      	movs	r2, #1
 8008b06:	4629      	mov	r1, r5
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7fe f847 	bl	8006b9c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008b0e:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008b10:	789b      	ldrb	r3, [r3, #2]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <Ble_Hci_Gap_Gatt_Init+0x132>
   {
     aci_gap_configure_whitelist();
 8008b16:	f7fe fa27 	bl	8006f68 <aci_gap_configure_whitelist>
   }
}
 8008b1a:	bf00      	nop
 8008b1c:	3724      	adds	r7, #36	; 0x24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b22:	bf00      	nop
 8008b24:	0800a010 	.word	0x0800a010
 8008b28:	0800a020 	.word	0x0800a020
 8008b2c:	08009e24 	.word	0x08009e24
 8008b30:	20000118 	.word	0x20000118
 8008b34:	0001b207 	.word	0x0001b207

08008b38 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08c      	sub	sp, #48	; 0x30
 8008b3c:	af08      	add	r7, sp, #32
 8008b3e:	4603      	mov	r3, r0
 8008b40:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008b42:	2342      	movs	r3, #66	; 0x42
 8008b44:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008b46:	4a15      	ldr	r2, [pc, #84]	; (8008b9c <Adv_Request+0x64>)
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9306      	str	r3, [sp, #24]
 8008b52:	2300      	movs	r3, #0
 8008b54:	9305      	str	r3, [sp, #20]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9303      	str	r3, [sp, #12]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9302      	str	r3, [sp, #8]
 8008b62:	2300      	movs	r3, #0
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	2300      	movs	r3, #0
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	22a0      	movs	r2, #160	; 0xa0
 8008b6e:	2180      	movs	r1, #128	; 0x80
 8008b70:	2000      	movs	r0, #0
 8008b72:	f7fd feeb 	bl	800694c <aci_gap_set_discoverable>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8008b7a:	4909      	ldr	r1, [pc, #36]	; (8008ba0 <Adv_Request+0x68>)
 8008b7c:	200c      	movs	r0, #12
 8008b7e:	f7fe f997 	bl	8006eb0 <aci_gap_update_adv_data>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }
    HW_TS_Start(Connection_mgr_timer_Id, FAST_ADV_TIMEOUT);
 8008b86:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <Adv_Request+0x6c>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	f24f 0123 	movw	r1, #61475	; 0xf023
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7f8 fb92 	bl	80012b8 <HW_TS_Start>
  return;
 8008b94:	bf00      	nop
}
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000118 	.word	0x20000118
 8008ba0:	20000010 	.word	0x20000010
 8008ba4:	20000472 	.word	0x20000472

08008ba8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008bae:	f7ff fd8b 	bl	80086c8 <LL_FLASH_GetUDN>
 8008bb2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d023      	beq.n	8008c04 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008bbc:	f7ff fd9c 	bl	80086f8 <LL_FLASH_GetSTCompanyID>
 8008bc0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008bc2:	f7ff fd8d 	bl	80086e0 <LL_FLASH_GetDeviceID>
 8008bc6:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	4b16      	ldr	r3, [pc, #88]	; (8008c28 <BleGetBdAddress+0x80>)
 8008bce:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <BleGetBdAddress+0x80>)
 8008bd8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <BleGetBdAddress+0x80>)
 8008be0:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	4b10      	ldr	r3, [pc, #64]	; (8008c28 <BleGetBdAddress+0x80>)
 8008be8:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <BleGetBdAddress+0x80>)
 8008bf2:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	0c1b      	lsrs	r3, r3, #16
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <BleGetBdAddress+0x80>)
 8008bfc:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8008bfe:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <BleGetBdAddress+0x80>)
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	e00b      	b.n	8008c1c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008c04:	2000      	movs	r0, #0
 8008c06:	f7ff fc79 	bl	80084fc <OTP_Read>
 8008c0a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	617b      	str	r3, [r7, #20]
 8008c16:	e001      	b.n	8008c1c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008c18:	4b04      	ldr	r3, [pc, #16]	; (8008c2c <BleGetBdAddress+0x84>)
 8008c1a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8008c1c:	697b      	ldr	r3, [r7, #20]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	2000023c 	.word	0x2000023c
 8008c2c:	0800a008 	.word	0x0800a008

08008c30 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008c36:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <Adv_Cancel+0x30>)
 8008c38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c3c:	2b05      	cmp	r3, #5
 8008c3e:	d00a      	beq.n	8008c56 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8008c40:	2300      	movs	r3, #0
 8008c42:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008c44:	f7fd fe5e 	bl	8006904 <aci_gap_set_non_discoverable>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008c4c:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <Adv_Cancel+0x30>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
}
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000118 	.word	0x20000118

08008c64 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	2004      	movs	r0, #4
 8008c70:	f000 ff38 	bl	8009ae4 <UTIL_SEQ_SetTask>
  return;
 8008c74:	bf00      	nop
}
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008c84:	2001      	movs	r0, #1
 8008c86:	f000 ff99 	bl	8009bbc <UTIL_SEQ_SetEvt>
  return;
 8008c8a:	bf00      	nop
}
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	f000 ffae 	bl	8009bfc <UTIL_SEQ_WaitEvt>
  return;
 8008ca0:	bf00      	nop
}
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	3308      	adds	r3, #8
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe fe8a 	bl	80079d4 <SVCCTL_UserEvtRx>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008cc4:	7afb      	ldrb	r3, [r7, #11]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8008cd0:	e002      	b.n	8008cd8 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	701a      	strb	r2, [r3, #0]
}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <BLE_StatusNot+0x16>
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d006      	beq.n	8008d02 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008cf4:	e00b      	b.n	8008d0e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008cf6:	233f      	movs	r3, #63	; 0x3f
 8008cf8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 ff1e 	bl	8009b3c <UTIL_SEQ_PauseTask>
      break;
 8008d00:	e005      	b.n	8008d0e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008d02:	233f      	movs	r3, #63	; 0x3f
 8008d04:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 ff38 	bl	8009b7c <UTIL_SEQ_ResumeTask>
      break;
 8008d0c:	bf00      	nop
  }
  return;
 8008d0e:	bf00      	nop
}
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <AdvUpdate>:
  return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
static void AdvUpdate ( void )
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_FAST_ADV);
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	f7ff ff0c 	bl	8008b38 <Adv_Request>

  return;
 8008d20:	bf00      	nop
}
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <AutoDisconnect>:

static void AutoDisconnect( void )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ADV_CANCEL_ID,CFG_SCH_PRIO_0);
 8008d28:	2100      	movs	r1, #0
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	f000 feda 	bl	8009ae4 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8008d30:	2201      	movs	r2, #1
 8008d32:	2120      	movs	r1, #32
 8008d34:	4805      	ldr	r0, [pc, #20]	; (8008d4c <AutoDisconnect+0x28>)
 8008d36:	f7fa ffd7 	bl	8003ce8 <HAL_GPIO_WritePin>
  HW_TS_Start(TESTING, SLEEP_TIMEOUT);
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <AutoDisconnect+0x2c>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	f640 0101 	movw	r1, #2049	; 0x801
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7f8 fab8 	bl	80012b8 <HW_TS_Start>
  return;
 8008d48:	bf00      	nop
}
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	48000400 	.word	0x48000400
 8008d50:	20000470 	.word	0x20000470

08008d54 <GoSleep>:

static void GoSleep( void )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
	if(isWorking==0){
 8008d58:	4b14      	ldr	r3, [pc, #80]	; (8008dac <GoSleep+0x58>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d123      	bne.n	8008da8 <GoSleep+0x54>
		HAL_PWREx_EnableFlashPowerDown(PWR_FLASHPD_LPSLEEP);
 8008d60:	2020      	movs	r0, #32
 8008d62:	f7fb f867 	bl	8003e34 <HAL_PWREx_EnableFlashPowerDown>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8008d66:	2200      	movs	r2, #0
 8008d68:	2120      	movs	r1, #32
 8008d6a:	4811      	ldr	r0, [pc, #68]	; (8008db0 <GoSleep+0x5c>)
 8008d6c:	f7fa ffbc 	bl	8003ce8 <HAL_GPIO_WritePin>
		HW_TS_Stop(TESTING);
 8008d70:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <GoSleep+0x60>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7f8 fa13 	bl	80011a0 <HW_TS_Stop>
		HAL_SuspendTick();
 8008d7a:	f7f9 f837 	bl	8001dec <HAL_SuspendTick>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	2102      	movs	r1, #2
 8008d82:	480b      	ldr	r0, [pc, #44]	; (8008db0 <GoSleep+0x5c>)
 8008d84:	f7fa ffb0 	bl	8003ce8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	4808      	ldr	r0, [pc, #32]	; (8008db0 <GoSleep+0x5c>)
 8008d8e:	f7fa ffab 	bl	8003ce8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8008d92:	2200      	movs	r2, #0
 8008d94:	2120      	movs	r1, #32
 8008d96:	4806      	ldr	r0, [pc, #24]	; (8008db0 <GoSleep+0x5c>)
 8008d98:	f7fa ffa6 	bl	8003ce8 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008da2:	f7fb f805 	bl	8003db0 <HAL_PWR_EnterSLEEPMode>
	}
  return;
 8008da6:	bf00      	nop
 8008da8:	bf00      	nop
}
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20000471 	.word	0x20000471
 8008db0:	48000400 	.word	0x48000400
 8008db4:	20000470 	.word	0x20000470

08008db8 <Custom_STM_App_Notification>:
static void callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

/* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b05      	cmp	r3, #5
 8008dc6:	d848      	bhi.n	8008e5a <Custom_STM_App_Notification+0xa2>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <Custom_STM_App_Notification+0x18>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008de9 	.word	0x08008de9
 8008dd4:	08008df3 	.word	0x08008df3
 8008dd8:	08008e05 	.word	0x08008e05
 8008ddc:	08008e17 	.word	0x08008e17
 8008de0:	08008e21 	.word	0x08008e21
 8008de4:	08008e3f 	.word	0x08008e3f
/* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

  /* battery_service */
    case CUSTOM_STM_BVAL_READ_EVT:
/* USER CODE BEGIN CUSTOM_STM_BVAL_READ_EVT */
    	UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_BATT,CFG_SCH_PRIO_0);
 8008de8:	2100      	movs	r1, #0
 8008dea:	2010      	movs	r0, #16
 8008dec:	f000 fe7a 	bl	8009ae4 <UTIL_SEQ_SetTask>
/* USER CODE END CUSTOM_STM_BVAL_READ_EVT */
      break;
 8008df0:	e034      	b.n	8008e5c <Custom_STM_App_Notification+0xa4>

    case CUSTOM_STM_BVAL_NOTIFY_ENABLED_EVT:
/* USER CODE BEGIN CUSTOM_STM_BVAL_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Bval_Notification_Status=1;
 8008df2:	4b1c      	ldr	r3, [pc, #112]	; (8008e64 <Custom_STM_App_Notification+0xac>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8008df8:	2201      	movs	r2, #1
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	481a      	ldr	r0, [pc, #104]	; (8008e68 <Custom_STM_App_Notification+0xb0>)
 8008dfe:	f7fa ff73 	bl	8003ce8 <HAL_GPIO_WritePin>
//    	HW_TS_Start(Custom_App_Context.TIMER,eeg_chnge_period);
/* USER CODE END CUSTOM_STM_BVAL_NOTIFY_ENABLED_EVT */
      break;
 8008e02:	e02b      	b.n	8008e5c <Custom_STM_App_Notification+0xa4>

    case CUSTOM_STM_BVAL_NOTIFY_DISABLED_EVT:
/* USER CODE BEGIN CUSTOM_STM_BVAL_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Bval_Notification_Status=0;
 8008e04:	4b17      	ldr	r3, [pc, #92]	; (8008e64 <Custom_STM_App_Notification+0xac>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2102      	movs	r1, #2
 8008e0e:	4816      	ldr	r0, [pc, #88]	; (8008e68 <Custom_STM_App_Notification+0xb0>)
 8008e10:	f7fa ff6a 	bl	8003ce8 <HAL_GPIO_WritePin>
//    	HW_TS_Stop(Custom_App_Context.TIMER);
/* USER CODE END CUSTOM_STM_BVAL_NOTIFY_DISABLED_EVT */
      break;
 8008e14:	e022      	b.n	8008e5c <Custom_STM_App_Notification+0xa4>

  /* eeg_service */
    case CUSTOM_STM_VAL_READ_EVT:
/* USER CODE BEGIN CUSTOM_STM_VAL_READ_EVT */
    	UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_TEMP,CFG_SCH_PRIO_0);
 8008e16:	2100      	movs	r1, #0
 8008e18:	2008      	movs	r0, #8
 8008e1a:	f000 fe63 	bl	8009ae4 <UTIL_SEQ_SetTask>
/* USER CODE END CUSTOM_STM_VAL_READ_EVT */
      break;
 8008e1e:	e01d      	b.n	8008e5c <Custom_STM_App_Notification+0xa4>

    case CUSTOM_STM_VAL_NOTIFY_ENABLED_EVT:
/* USER CODE BEGIN CUSTOM_STM_VAL_NOTIFY_ENABLED_EVT */
//    	HW_TS_Start(Custom_App_Context.TIMER,eeg_chnge_period);
    	Custom_App_Context.Val_Notification_Status=1;
 8008e20:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <Custom_STM_App_Notification+0xac>)
 8008e22:	2201      	movs	r2, #1
 8008e24:	705a      	strb	r2, [r3, #1]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8008e26:	2201      	movs	r2, #1
 8008e28:	2120      	movs	r1, #32
 8008e2a:	480f      	ldr	r0, [pc, #60]	; (8008e68 <Custom_STM_App_Notification+0xb0>)
 8008e2c:	f7fa ff5c 	bl	8003ce8 <HAL_GPIO_WritePin>
    	HW_TS_Start(Custom_App_Context.TIMER,eeg_chnge_period);
 8008e30:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <Custom_STM_App_Notification+0xac>)
 8008e32:	7a1b      	ldrb	r3, [r3, #8]
 8008e34:	2114      	movs	r1, #20
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7f8 fa3e 	bl	80012b8 <HW_TS_Start>
/* USER CODE END CUSTOM_STM_VAL_NOTIFY_ENABLED_EVT */
      break;
 8008e3c:	e00e      	b.n	8008e5c <Custom_STM_App_Notification+0xa4>

    case CUSTOM_STM_VAL_NOTIFY_DISABLED_EVT:
/* USER CODE BEGIN CUSTOM_STM_VAL_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Val_Notification_Status=0;
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <Custom_STM_App_Notification+0xac>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	705a      	strb	r2, [r3, #1]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8008e44:	2200      	movs	r2, #0
 8008e46:	2120      	movs	r1, #32
 8008e48:	4807      	ldr	r0, [pc, #28]	; (8008e68 <Custom_STM_App_Notification+0xb0>)
 8008e4a:	f7fa ff4d 	bl	8003ce8 <HAL_GPIO_WritePin>
     	HW_TS_Stop(Custom_App_Context.TIMER);
 8008e4e:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <Custom_STM_App_Notification+0xac>)
 8008e50:	7a1b      	ldrb	r3, [r3, #8]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7f8 f9a4 	bl	80011a0 <HW_TS_Stop>
/* USER CODE END CUSTOM_STM_VAL_NOTIFY_DISABLED_EVT */
      break;
 8008e58:	e000      	b.n	8008e5c <Custom_STM_App_Notification+0xa4>

    default:
/* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

/* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008e5a:	bf00      	nop
  }
/* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

/* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008e5c:	bf00      	nop
}
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	2000019c 	.word	0x2000019c
 8008e68:	48000400 	.word	0x48000400

08008e6c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN CUSTOM_APP_Notification_1 */

/* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d013      	beq.n	8008ea4 <Custom_APP_Notification+0x38>
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d000      	beq.n	8008e82 <Custom_APP_Notification+0x16>

    default:
/* USER CODE BEGIN CUSTOM_APP_Notification_default */

/* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008e80:	e011      	b.n	8008ea6 <Custom_APP_Notification+0x3a>
    	Custom_App_Context.Val_Notification_Status=0;
 8008e82:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <Custom_APP_Notification+0x44>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	705a      	strb	r2, [r3, #1]
    	Custom_App_Context.Bval_Notification_Status=0;
 8008e88:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <Custom_APP_Notification+0x44>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2120      	movs	r1, #32
 8008e92:	4808      	ldr	r0, [pc, #32]	; (8008eb4 <Custom_APP_Notification+0x48>)
 8008e94:	f7fa ff28 	bl	8003ce8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2102      	movs	r1, #2
 8008e9c:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <Custom_APP_Notification+0x48>)
 8008e9e:	f7fa ff23 	bl	8003ce8 <HAL_GPIO_WritePin>
    break;
 8008ea2:	e000      	b.n	8008ea6 <Custom_APP_Notification+0x3a>
    break;
 8008ea4:	bf00      	nop

/* USER CODE BEGIN CUSTOM_APP_Notification_2 */

/* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008ea6:	bf00      	nop
}
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	2000019c 	.word	0x2000019c
 8008eb4:	48000400 	.word	0x48000400

08008eb8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN CUSTOM_APP_Init */
//	CFG_TASK_NOTIFY_TEMP,
//		CFG_TASK_NOTIFY_BATT,
	  /* battery_service */
	Custom_App_Context.EEG_VAL=0;
 8008ebc:	4b10      	ldr	r3, [pc, #64]	; (8008f00 <Custom_APP_Init+0x48>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	809a      	strh	r2, [r3, #4]
	Custom_App_Context.BAT_VAL=85;
 8008ec2:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <Custom_APP_Init+0x48>)
 8008ec4:	2255      	movs	r2, #85	; 0x55
 8008ec6:	805a      	strh	r2, [r3, #2]
	Custom_App_Context.STEP=eeg_chnge_step;
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <Custom_APP_Init+0x48>)
 8008eca:	220a      	movs	r2, #10
 8008ecc:	80da      	strh	r2, [r3, #6]
	Custom_App_Context.Val_Notification_Status=0;
 8008ece:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <Custom_APP_Init+0x48>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	705a      	strb	r2, [r3, #1]
	Custom_App_Context.Bval_Notification_Status=0;
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <Custom_APP_Init+0x48>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_RegTask(1<<CFG_TASK_NOTIFY_TEMP,UTIL_SEQ_RFU,Custom_Val_Send_Notification);
 8008eda:	4a0a      	ldr	r2, [pc, #40]	; (8008f04 <Custom_APP_Init+0x4c>)
 8008edc:	2100      	movs	r1, #0
 8008ede:	2008      	movs	r0, #8
 8008ee0:	f000 fdde 	bl	8009aa0 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_NOTIFY_BATT,UTIL_SEQ_RFU,Custom_Bval_Update_Char);
 8008ee4:	4a08      	ldr	r2, [pc, #32]	; (8008f08 <Custom_APP_Init+0x50>)
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	2010      	movs	r0, #16
 8008eea:	f000 fdd9 	bl	8009aa0 <UTIL_SEQ_RegTask>

	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(Custom_App_Context.TIMER),hw_ts_Repeated,callback);
 8008eee:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <Custom_APP_Init+0x54>)
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	4907      	ldr	r1, [pc, #28]	; (8008f10 <Custom_APP_Init+0x58>)
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	f7f8 f8d9 	bl	80010ac <HW_TS_Create>
/* USER CODE END CUSTOM_APP_Init */
  return;
 8008efa:	bf00      	nop
}
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	2000019c 	.word	0x2000019c
 8008f04:	08008f61 	.word	0x08008f61
 8008f08:	08008f25 	.word	0x08008f25
 8008f0c:	08008f15 	.word	0x08008f15
 8008f10:	200001a4 	.word	0x200001a4

08008f14 <callback>:

/* USER CODE BEGIN FD */
static void callback(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
	UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_TEMP,CFG_SCH_PRIO_0);
 8008f18:	2100      	movs	r1, #0
 8008f1a:	2008      	movs	r0, #8
 8008f1c:	f000 fde2 	bl	8009ae4 <UTIL_SEQ_SetTask>
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
}
 8008f20:	bf00      	nop
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <Custom_Bval_Update_Char>:
 *
 *************************************************************/

  /* battery_service */
void Custom_Bval_Update_Char(void) /* Property Read */
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
//  Custom_STM_App_Update_Char(CUSTOM_STM_BVAL, (uint8_t *)UpdateCharData);
  /* USER CODE BEGIN Bval_UC*/
  UpdateCharData[0]=(uint8_t)(Custom_App_Context.BAT_VAL& 0x00FF);
 8008f28:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <Custom_Bval_Update_Char+0x34>)
 8008f2a:	885b      	ldrh	r3, [r3, #2]
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	4b0b      	ldr	r3, [pc, #44]	; (8008f5c <Custom_Bval_Update_Char+0x38>)
 8008f30:	701a      	strb	r2, [r3, #0]
  UpdateCharData[1]=(uint8_t)(Custom_App_Context.BAT_VAL>>8);
 8008f32:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <Custom_Bval_Update_Char+0x34>)
 8008f34:	885b      	ldrh	r3, [r3, #2]
 8008f36:	0a1b      	lsrs	r3, r3, #8
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	4b07      	ldr	r3, [pc, #28]	; (8008f5c <Custom_Bval_Update_Char+0x38>)
 8008f3e:	705a      	strb	r2, [r3, #1]
  Custom_App_Context.BAT_VAL-=1;
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <Custom_Bval_Update_Char+0x34>)
 8008f42:	885b      	ldrh	r3, [r3, #2]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	4b03      	ldr	r3, [pc, #12]	; (8008f58 <Custom_Bval_Update_Char+0x34>)
 8008f4a:	805a      	strh	r2, [r3, #2]
  Custom_STM_App_Update_Char(CUSTOM_STM_BVAL, (uint8_t *)UpdateCharData);
 8008f4c:	4903      	ldr	r1, [pc, #12]	; (8008f5c <Custom_Bval_Update_Char+0x38>)
 8008f4e:	2000      	movs	r0, #0
 8008f50:	f000 f9e6 	bl	8009320 <Custom_STM_App_Update_Char>
  /* USER CODE END Bval_UC*/
  return;
 8008f54:	bf00      	nop
}
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	2000019c 	.word	0x2000019c
 8008f5c:	20000570 	.word	0x20000570

08008f60 <Custom_Val_Send_Notification>:
  /* USER CODE END Val_UC*/
  return;
}

void Custom_Val_Send_Notification(void) /* Property Notification */
 {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
  if(Custom_App_Context.Val_Notification_Status)
 8008f66:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <Custom_Val_Send_Notification+0x58>)
 8008f68:	785b      	ldrb	r3, [r3, #1]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d020      	beq.n	8008fb0 <Custom_Val_Send_Notification+0x50>
  {
//    Custom_STM_App_Update_Char(CUSTOM_STM_VAL, (uint8_t *)NotifyCharData);
    /* USER CODE BEGIN Val_NS*/
	  		  uint16_t i;
	  		  HAL_ADC_Start(&hadc1);
 8008f6e:	4813      	ldr	r0, [pc, #76]	; (8008fbc <Custom_Val_Send_Notification+0x5c>)
 8008f70:	f7f9 fabe 	bl	80024f0 <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1,100);
 8008f74:	2164      	movs	r1, #100	; 0x64
 8008f76:	4811      	ldr	r0, [pc, #68]	; (8008fbc <Custom_Val_Send_Notification+0x5c>)
 8008f78:	f7f9 fb41 	bl	80025fe <HAL_ADC_PollForConversion>
	  		  i = (uint32_t) HAL_ADC_GetValue(&hadc1);
 8008f7c:	480f      	ldr	r0, [pc, #60]	; (8008fbc <Custom_Val_Send_Notification+0x5c>)
 8008f7e:	f7f9 fbcb 	bl	8002718 <HAL_ADC_GetValue>
 8008f82:	4603      	mov	r3, r0
 8008f84:	80fb      	strh	r3, [r7, #6]
	  		  HAL_ADC_Stop(&hadc1);
 8008f86:	480d      	ldr	r0, [pc, #52]	; (8008fbc <Custom_Val_Send_Notification+0x5c>)
 8008f88:	f7f9 fb06 	bl	8002598 <HAL_ADC_Stop>
//	  		data[0]=(uint8_t)(i& 0x00FF);
//	  		data[1]=(uint8_t)(i>>8);
	  		Custom_App_Context.EEG_VAL=i;
 8008f8c:	4a0a      	ldr	r2, [pc, #40]	; (8008fb8 <Custom_Val_Send_Notification+0x58>)
 8008f8e:	88fb      	ldrh	r3, [r7, #6]
 8008f90:	8093      	strh	r3, [r2, #4]
	NotifyCharData[0]=(uint8_t)(i& 0x00FF);
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <Custom_Val_Send_Notification+0x60>)
 8008f98:	701a      	strb	r2, [r3, #0]
	NotifyCharData[1]=(uint8_t)(i>>8);
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	0a1b      	lsrs	r3, r3, #8
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <Custom_Val_Send_Notification+0x60>)
 8008fa4:	705a      	strb	r2, [r3, #1]
//	Custom_App_Context.EEG_VAL+=1;
	Custom_STM_App_Update_Char(CUSTOM_STM_VAL, (uint8_t *)NotifyCharData);
 8008fa6:	4906      	ldr	r1, [pc, #24]	; (8008fc0 <Custom_Val_Send_Notification+0x60>)
 8008fa8:	2001      	movs	r0, #1
 8008faa:	f000 f9b9 	bl	8009320 <Custom_STM_App_Update_Char>
  }
  else
  {
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
  }
  return;
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
}
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	2000019c 	.word	0x2000019c
 8008fbc:	200003e0 	.word	0x200003e0
 8008fc0:	20000478 	.word	0x20000478

08008fc4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08a      	sub	sp, #40	; 0x28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Custom_STM_Event_Handler_1 */
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  Custom_STM_App_Notification_evt_t  Notification;
/* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2bff      	cmp	r3, #255	; 0xff
 8008fde:	f040 8133 	bne.w	8009248 <Custom_STM_Event_Handler+0x284>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	3302      	adds	r3, #2
 8008fe6:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	f640 4214 	movw	r2, #3092	; 0xc14
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	f000 80a2 	beq.w	800913c <Custom_STM_Event_Handler+0x178>
 8008ff8:	f640 4214 	movw	r2, #3092	; 0xc14
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	f300 8121 	bgt.w	8009244 <Custom_STM_Event_Handler+0x280>
 8009002:	f640 4201 	movw	r2, #3073	; 0xc01
 8009006:	4293      	cmp	r3, r2
 8009008:	d005      	beq.n	8009016 <Custom_STM_Event_Handler+0x52>
 800900a:	f640 4213 	movw	r2, #3091	; 0xc13
 800900e:	4293      	cmp	r3, r2
 8009010:	f000 80e3 	beq.w	80091da <Custom_STM_Event_Handler+0x216>

        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009014:	e116      	b.n	8009244 <Custom_STM_Event_Handler+0x280>
        	attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	3302      	adds	r3, #2
 800901a:	61bb      	str	r3, [r7, #24]
        	if(attribute_modified->Attr_Handle == 16)
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	885b      	ldrh	r3, [r3, #2]
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b10      	cmp	r3, #16
 8009024:	d11c      	bne.n	8009060 <Custom_STM_Event_Handler+0x9c>
        		return_value = SVCCTL_EvtAckFlowEnable;
 8009026:	2301      	movs	r3, #1
 8009028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        		if (CustomContext.Bval_Notification_Status==1){
 800902c:	4b8a      	ldr	r3, [pc, #552]	; (8009258 <Custom_STM_Event_Handler+0x294>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d10a      	bne.n	800904a <Custom_STM_Event_Handler+0x86>
        			CustomContext.Bval_Notification_Status=0;
 8009034:	4b88      	ldr	r3, [pc, #544]	; (8009258 <Custom_STM_Event_Handler+0x294>)
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_BVAL_NOTIFY_DISABLED_EVT;
 800903a:	2302      	movs	r3, #2
 800903c:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 800903e:	f107 0308 	add.w	r3, r7, #8
 8009042:	4618      	mov	r0, r3
 8009044:	f7ff feb8 	bl	8008db8 <Custom_STM_App_Notification>
          break;
 8009048:	e0fd      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        			CustomContext.Bval_Notification_Status=1;
 800904a:	4b83      	ldr	r3, [pc, #524]	; (8009258 <Custom_STM_Event_Handler+0x294>)
 800904c:	2201      	movs	r2, #1
 800904e:	701a      	strb	r2, [r3, #0]
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_BVAL_NOTIFY_ENABLED_EVT;
 8009050:	2301      	movs	r3, #1
 8009052:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 8009054:	f107 0308 	add.w	r3, r7, #8
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff fead 	bl	8008db8 <Custom_STM_App_Notification>
          break;
 800905e:	e0f2      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        	else if(attribute_modified->Attr_Handle ==21)
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	885b      	ldrh	r3, [r3, #2]
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b15      	cmp	r3, #21
 8009068:	d11c      	bne.n	80090a4 <Custom_STM_Event_Handler+0xe0>
        		return_value = SVCCTL_EvtAckFlowEnable;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        		if (CustomContext.Val_Notification_Status==1){
 8009070:	4b79      	ldr	r3, [pc, #484]	; (8009258 <Custom_STM_Event_Handler+0x294>)
 8009072:	785b      	ldrb	r3, [r3, #1]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d10a      	bne.n	800908e <Custom_STM_Event_Handler+0xca>
        			CustomContext.Val_Notification_Status=0;
 8009078:	4b77      	ldr	r3, [pc, #476]	; (8009258 <Custom_STM_Event_Handler+0x294>)
 800907a:	2200      	movs	r2, #0
 800907c:	705a      	strb	r2, [r3, #1]
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_VAL_NOTIFY_DISABLED_EVT;
 800907e:	2305      	movs	r3, #5
 8009080:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff fe96 	bl	8008db8 <Custom_STM_App_Notification>
          break;
 800908c:	e0db      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        			CustomContext.Val_Notification_Status=1;
 800908e:	4b72      	ldr	r3, [pc, #456]	; (8009258 <Custom_STM_Event_Handler+0x294>)
 8009090:	2201      	movs	r2, #1
 8009092:	705a      	strb	r2, [r3, #1]
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_VAL_NOTIFY_ENABLED_EVT;
 8009094:	2304      	movs	r3, #4
 8009096:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff fe8b 	bl	8008db8 <Custom_STM_App_Notification>
          break;
 80090a2:	e0d0      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        	else if(attribute_modified->Attr_Handle ==4)
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	885b      	ldrh	r3, [r3, #2]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d107      	bne.n	80090be <Custom_STM_Event_Handler+0xfa>
    			Notification.Custom_Evt_Opcode = CUSTOM_STM_BVAL_READ_EVT;
 80090ae:	2300      	movs	r3, #0
 80090b0:	723b      	strb	r3, [r7, #8]
    			Custom_STM_App_Notification(&Notification);
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7ff fe7e 	bl	8008db8 <Custom_STM_App_Notification>
          break;
 80090bc:	e0c3      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        	else if(attribute_modified->Attr_Handle ==9)
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	d107      	bne.n	80090d8 <Custom_STM_Event_Handler+0x114>
        		Notification.Custom_Evt_Opcode = CUSTOM_STM_VAL_READ_EVT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	723b      	strb	r3, [r7, #8]
        		Custom_STM_App_Notification(&Notification);
 80090cc:	f107 0308 	add.w	r3, r7, #8
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7ff fe71 	bl	8008db8 <Custom_STM_App_Notification>
          break;
 80090d6:	e0b6      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 80090d8:	2300      	movs	r3, #0
 80090da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80090de:	e016      	b.n	800910e <Custom_STM_Event_Handler+0x14a>
        		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 80090e0:	2201      	movs	r2, #1
 80090e2:	2120      	movs	r1, #32
 80090e4:	485d      	ldr	r0, [pc, #372]	; (800925c <Custom_STM_Event_Handler+0x298>)
 80090e6:	f7fa fdff 	bl	8003ce8 <HAL_GPIO_WritePin>
        		    HAL_Delay(500);
 80090ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090ee:	f7f8 fe59 	bl	8001da4 <HAL_Delay>
        		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80090f2:	2200      	movs	r2, #0
 80090f4:	2120      	movs	r1, #32
 80090f6:	4859      	ldr	r0, [pc, #356]	; (800925c <Custom_STM_Event_Handler+0x298>)
 80090f8:	f7fa fdf6 	bl	8003ce8 <HAL_GPIO_WritePin>
        			HAL_Delay(500);
 80090fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009100:	f7f8 fe50 	bl	8001da4 <HAL_Delay>
        		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 8009104:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009108:	3301      	adds	r3, #1
 800910a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800910e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009112:	b29a      	uxth	r2, r3
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	885b      	ldrh	r3, [r3, #2]
 8009118:	b29b      	uxth	r3, r3
 800911a:	429a      	cmp	r2, r3
 800911c:	d9e0      	bls.n	80090e0 <Custom_STM_Event_Handler+0x11c>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 800911e:	2201      	movs	r2, #1
 8009120:	2120      	movs	r1, #32
 8009122:	484e      	ldr	r0, [pc, #312]	; (800925c <Custom_STM_Event_Handler+0x298>)
 8009124:	f7fa fde0 	bl	8003ce8 <HAL_GPIO_WritePin>
        		HAL_Delay(2000);
 8009128:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800912c:	f7f8 fe3a 	bl	8001da4 <HAL_Delay>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8009130:	2200      	movs	r2, #0
 8009132:	2120      	movs	r1, #32
 8009134:	4849      	ldr	r0, [pc, #292]	; (800925c <Custom_STM_Event_Handler+0x298>)
 8009136:	f7fa fdd7 	bl	8003ce8 <HAL_GPIO_WritePin>
          break;
 800913a:	e084      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        	attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	3302      	adds	r3, #2
 8009140:	61bb      	str	r3, [r7, #24]
        	if(attribute_modified->Attr_Handle == 14)
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	885b      	ldrh	r3, [r3, #2]
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b0e      	cmp	r3, #14
 800914a:	d107      	bne.n	800915c <Custom_STM_Event_Handler+0x198>
    			Notification.Custom_Evt_Opcode = CUSTOM_STM_BVAL_READ_EVT;
 800914c:	2300      	movs	r3, #0
 800914e:	723b      	strb	r3, [r7, #8]
    			Custom_STM_App_Notification(&Notification);
 8009150:	f107 0308 	add.w	r3, r7, #8
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fe2f 	bl	8008db8 <Custom_STM_App_Notification>
          break;
 800915a:	e074      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        	else if(attribute_modified->Attr_Handle ==19)
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	885b      	ldrh	r3, [r3, #2]
 8009160:	b29b      	uxth	r3, r3
 8009162:	2b13      	cmp	r3, #19
 8009164:	d107      	bne.n	8009176 <Custom_STM_Event_Handler+0x1b2>
        		Notification.Custom_Evt_Opcode = CUSTOM_STM_VAL_READ_EVT;
 8009166:	2303      	movs	r3, #3
 8009168:	723b      	strb	r3, [r7, #8]
        		Custom_STM_App_Notification(&Notification);
 800916a:	f107 0308 	add.w	r3, r7, #8
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff fe22 	bl	8008db8 <Custom_STM_App_Notification>
          break;
 8009174:	e067      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 8009176:	2300      	movs	r3, #0
 8009178:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800917c:	e016      	b.n	80091ac <Custom_STM_Event_Handler+0x1e8>
        		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 800917e:	2201      	movs	r2, #1
 8009180:	2120      	movs	r1, #32
 8009182:	4836      	ldr	r0, [pc, #216]	; (800925c <Custom_STM_Event_Handler+0x298>)
 8009184:	f7fa fdb0 	bl	8003ce8 <HAL_GPIO_WritePin>
        		    HAL_Delay(500);
 8009188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800918c:	f7f8 fe0a 	bl	8001da4 <HAL_Delay>
        		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8009190:	2200      	movs	r2, #0
 8009192:	2120      	movs	r1, #32
 8009194:	4831      	ldr	r0, [pc, #196]	; (800925c <Custom_STM_Event_Handler+0x298>)
 8009196:	f7fa fda7 	bl	8003ce8 <HAL_GPIO_WritePin>
        			HAL_Delay(500);
 800919a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800919e:	f7f8 fe01 	bl	8001da4 <HAL_Delay>
        		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 80091a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80091a6:	3301      	adds	r3, #1
 80091a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80091ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d9e0      	bls.n	800917e <Custom_STM_Event_Handler+0x1ba>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 80091bc:	2201      	movs	r2, #1
 80091be:	2120      	movs	r1, #32
 80091c0:	4826      	ldr	r0, [pc, #152]	; (800925c <Custom_STM_Event_Handler+0x298>)
 80091c2:	f7fa fd91 	bl	8003ce8 <HAL_GPIO_WritePin>
        		HAL_Delay(2000);
 80091c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80091ca:	f7f8 fdeb 	bl	8001da4 <HAL_Delay>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80091ce:	2200      	movs	r2, #0
 80091d0:	2120      	movs	r1, #32
 80091d2:	4822      	ldr	r0, [pc, #136]	; (800925c <Custom_STM_Event_Handler+0x298>)
 80091d4:	f7fa fd88 	bl	8003ce8 <HAL_GPIO_WritePin>
          break;
 80091d8:	e035      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
        	attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	3302      	adds	r3, #2
 80091de:	61bb      	str	r3, [r7, #24]
    		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 80091e0:	2300      	movs	r3, #0
 80091e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80091e6:	e016      	b.n	8009216 <Custom_STM_Event_Handler+0x252>
    		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 80091e8:	2201      	movs	r2, #1
 80091ea:	2120      	movs	r1, #32
 80091ec:	481b      	ldr	r0, [pc, #108]	; (800925c <Custom_STM_Event_Handler+0x298>)
 80091ee:	f7fa fd7b 	bl	8003ce8 <HAL_GPIO_WritePin>
    		    HAL_Delay(500);
 80091f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091f6:	f7f8 fdd5 	bl	8001da4 <HAL_Delay>
    		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80091fa:	2200      	movs	r2, #0
 80091fc:	2120      	movs	r1, #32
 80091fe:	4817      	ldr	r0, [pc, #92]	; (800925c <Custom_STM_Event_Handler+0x298>)
 8009200:	f7fa fd72 	bl	8003ce8 <HAL_GPIO_WritePin>
    			HAL_Delay(500);
 8009204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009208:	f7f8 fdcc 	bl	8001da4 <HAL_Delay>
    		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 800920c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009210:	3301      	adds	r3, #1
 8009212:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8009216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800921a:	b29a      	uxth	r2, r3
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	885b      	ldrh	r3, [r3, #2]
 8009220:	b29b      	uxth	r3, r3
 8009222:	429a      	cmp	r2, r3
 8009224:	d9e0      	bls.n	80091e8 <Custom_STM_Event_Handler+0x224>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8009226:	2201      	movs	r2, #1
 8009228:	2120      	movs	r1, #32
 800922a:	480c      	ldr	r0, [pc, #48]	; (800925c <Custom_STM_Event_Handler+0x298>)
 800922c:	f7fa fd5c 	bl	8003ce8 <HAL_GPIO_WritePin>
    		HAL_Delay(2000);
 8009230:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009234:	f7f8 fdb6 	bl	8001da4 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8009238:	2200      	movs	r2, #0
 800923a:	2120      	movs	r1, #32
 800923c:	4807      	ldr	r0, [pc, #28]	; (800925c <Custom_STM_Event_Handler+0x298>)
 800923e:	f7fa fd53 	bl	8003ce8 <HAL_GPIO_WritePin>
          break;
 8009242:	e000      	b.n	8009246 <Custom_STM_Event_Handler+0x282>
          break;
 8009244:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009246:	e000      	b.n	800924a <Custom_STM_Event_Handler+0x286>
    /* USER CODE BEGIN EVENT_PCKT_CASES*/

    /* USER CODE END EVENT_PCKT_CASES*/

    default:
      break;
 8009248:	bf00      	nop

/* USER CODE BEGIN Custom_STM_Event_Handler_2 */

/* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800924a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800924e:	4618      	mov	r0, r3
 8009250:	3728      	adds	r7, #40	; 0x28
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	200000f8 	.word	0x200000f8
 800925c:	48000400 	.word	0x48000400

08009260 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
/* USER CODE BEGIN SVCCTL_InitCustomSvc_1 */
  CustomContext.Bval_Notification_Status=0;
 8009266:	4b28      	ldr	r3, [pc, #160]	; (8009308 <SVCCTL_InitCustomSvc+0xa8>)
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
  CustomContext.Val_Notification_Status=0;
 800926c:	4b26      	ldr	r3, [pc, #152]	; (8009308 <SVCCTL_InitCustomSvc+0xa8>)
 800926e:	2200      	movs	r2, #0
 8009270:	705a      	strb	r2, [r3, #1]
/* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8009272:	4826      	ldr	r0, [pc, #152]	; (800930c <SVCCTL_InitCustomSvc+0xac>)
 8009274:	f7fe fb94 	bl	80079a0 <SVCCTL_RegisterSvcHandler>
     *                                1 for battery_value configuration descriptor +
     *                                1 for battery_value broadcast property +
     *                              = 5
     */

    uuid.Char_UUID_16 = 0x180f;
 8009278:	f641 030f 	movw	r3, #6159	; 0x180f
 800927c:	803b      	strh	r3, [r7, #0]
    aci_gatt_add_service(UUID_TYPE_16,
 800927e:	4639      	mov	r1, r7
 8009280:	4b23      	ldr	r3, [pc, #140]	; (8009310 <SVCCTL_InitCustomSvc+0xb0>)
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	2305      	movs	r3, #5
 8009286:	2201      	movs	r2, #1
 8009288:	2001      	movs	r0, #1
 800928a:	f7fd ff0d 	bl	80070a8 <aci_gatt_add_service>
                      &(CustomContext.CustomBservHdle));

    /**
     *  battery_value
     */
    uuid.Char_UUID_16 = 0x2a19;
 800928e:	f642 2319 	movw	r3, #10777	; 0x2a19
 8009292:	803b      	strh	r3, [r7, #0]
    aci_gatt_add_char(CustomContext.CustomBservHdle,
 8009294:	4b1c      	ldr	r3, [pc, #112]	; (8009308 <SVCCTL_InitCustomSvc+0xa8>)
 8009296:	8858      	ldrh	r0, [r3, #2]
 8009298:	2302      	movs	r3, #2
 800929a:	b29b      	uxth	r3, r3
 800929c:	463a      	mov	r2, r7
 800929e:	491d      	ldr	r1, [pc, #116]	; (8009314 <SVCCTL_InitCustomSvc+0xb4>)
 80092a0:	9105      	str	r1, [sp, #20]
 80092a2:	2100      	movs	r1, #0
 80092a4:	9104      	str	r1, [sp, #16]
 80092a6:	2110      	movs	r1, #16
 80092a8:	9103      	str	r1, [sp, #12]
 80092aa:	2100      	movs	r1, #0
 80092ac:	9102      	str	r1, [sp, #8]
 80092ae:	2100      	movs	r1, #0
 80092b0:	9101      	str	r1, [sp, #4]
 80092b2:	2113      	movs	r1, #19
 80092b4:	9100      	str	r1, [sp, #0]
 80092b6:	2101      	movs	r1, #1
 80092b8:	f7fd ffa5 	bl	8007206 <aci_gatt_add_char>
     *                                1 for eeg_value configuration descriptor +
     *                                1 for eeg_value broadcast property +
     *                              = 5
     */

    uuid.Char_UUID_16 = 0x180d;
 80092bc:	f641 030d 	movw	r3, #6157	; 0x180d
 80092c0:	803b      	strh	r3, [r7, #0]
    aci_gatt_add_service(UUID_TYPE_16,
 80092c2:	4639      	mov	r1, r7
 80092c4:	4b14      	ldr	r3, [pc, #80]	; (8009318 <SVCCTL_InitCustomSvc+0xb8>)
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	2305      	movs	r3, #5
 80092ca:	2201      	movs	r2, #1
 80092cc:	2001      	movs	r0, #1
 80092ce:	f7fd feeb 	bl	80070a8 <aci_gatt_add_service>
                      &(CustomContext.CustomEservHdle));

    /**
     *  eeg_value
     */
    uuid.Char_UUID_16 = 0x2a37;
 80092d2:	f642 2337 	movw	r3, #10807	; 0x2a37
 80092d6:	803b      	strh	r3, [r7, #0]
    aci_gatt_add_char(CustomContext.CustomEservHdle,
 80092d8:	4b0b      	ldr	r3, [pc, #44]	; (8009308 <SVCCTL_InitCustomSvc+0xa8>)
 80092da:	88d8      	ldrh	r0, [r3, #6]
 80092dc:	2302      	movs	r3, #2
 80092de:	b29b      	uxth	r3, r3
 80092e0:	463a      	mov	r2, r7
 80092e2:	490e      	ldr	r1, [pc, #56]	; (800931c <SVCCTL_InitCustomSvc+0xbc>)
 80092e4:	9105      	str	r1, [sp, #20]
 80092e6:	2100      	movs	r1, #0
 80092e8:	9104      	str	r1, [sp, #16]
 80092ea:	2110      	movs	r1, #16
 80092ec:	9103      	str	r1, [sp, #12]
 80092ee:	2100      	movs	r1, #0
 80092f0:	9102      	str	r1, [sp, #8]
 80092f2:	2100      	movs	r1, #0
 80092f4:	9101      	str	r1, [sp, #4]
 80092f6:	2113      	movs	r1, #19
 80092f8:	9100      	str	r1, [sp, #0]
 80092fa:	2101      	movs	r1, #1
 80092fc:	f7fd ff83 	bl	8007206 <aci_gatt_add_char>

/* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

/* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009300:	bf00      	nop
}
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	200000f8 	.word	0x200000f8
 800930c:	08008fc5 	.word	0x08008fc5
 8009310:	200000fa 	.word	0x200000fa
 8009314:	200000fc 	.word	0x200000fc
 8009318:	200000fe 	.word	0x200000fe
 800931c:	20000100 	.word	0x20000100

08009320 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af02      	add	r7, sp, #8
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800932c:	2342      	movs	r3, #66	; 0x42
 800932e:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

/* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <Custom_STM_App_Update_Char+0x1c>
 8009336:	2b01      	cmp	r3, #1
 8009338:	d016      	beq.n	8009368 <Custom_STM_App_Update_Char+0x48>

    /* USER CODE END CUSTOM_STM_VAL*/
      break;

    default:
      break;
 800933a:	e024      	b.n	8009386 <Custom_STM_App_Update_Char+0x66>
      result = aci_gatt_update_char_value(CustomContext.CustomBservHdle,
 800933c:	4b14      	ldr	r3, [pc, #80]	; (8009390 <Custom_STM_App_Update_Char+0x70>)
 800933e:	8858      	ldrh	r0, [r3, #2]
 8009340:	4b13      	ldr	r3, [pc, #76]	; (8009390 <Custom_STM_App_Update_Char+0x70>)
 8009342:	8899      	ldrh	r1, [r3, #4]
 8009344:	2202      	movs	r2, #2
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	4613      	mov	r3, r2
 800934c:	2200      	movs	r2, #0
 800934e:	f7fe f844 	bl	80073da <aci_gatt_update_char_value>
 8009352:	4603      	mov	r3, r0
 8009354:	73fb      	strb	r3, [r7, #15]
      if(result!=0x00) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d013      	beq.n	8009384 <Custom_STM_App_Update_Char+0x64>
 800935c:	2201      	movs	r2, #1
 800935e:	2120      	movs	r1, #32
 8009360:	480c      	ldr	r0, [pc, #48]	; (8009394 <Custom_STM_App_Update_Char+0x74>)
 8009362:	f7fa fcc1 	bl	8003ce8 <HAL_GPIO_WritePin>
      break;
 8009366:	e00d      	b.n	8009384 <Custom_STM_App_Update_Char+0x64>
      result = aci_gatt_update_char_value(CustomContext.CustomEservHdle,
 8009368:	4b09      	ldr	r3, [pc, #36]	; (8009390 <Custom_STM_App_Update_Char+0x70>)
 800936a:	88d8      	ldrh	r0, [r3, #6]
 800936c:	4b08      	ldr	r3, [pc, #32]	; (8009390 <Custom_STM_App_Update_Char+0x70>)
 800936e:	8919      	ldrh	r1, [r3, #8]
 8009370:	2202      	movs	r2, #2
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	4613      	mov	r3, r2
 8009378:	2200      	movs	r2, #0
 800937a:	f7fe f82e 	bl	80073da <aci_gatt_update_char_value>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]
      break;
 8009382:	e000      	b.n	8009386 <Custom_STM_App_Update_Char+0x66>
      break;
 8009384:	bf00      	nop

/* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

/* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8009386:	7bfb      	ldrb	r3, [r7, #15]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	200000f8 	.word	0x200000f8
 8009394:	48000400 	.word	0x48000400

08009398 <LL_PWR_EnableBootC2>:
{
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800939c:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <LL_PWR_EnableBootC2+0x1c>)
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	4a04      	ldr	r2, [pc, #16]	; (80093b4 <LL_PWR_EnableBootC2+0x1c>)
 80093a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093a6:	60d3      	str	r3, [r2, #12]
}
 80093a8:	bf00      	nop
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	58000400 	.word	0x58000400

080093b8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80093c0:	4b06      	ldr	r3, [pc, #24]	; (80093dc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80093c2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80093c6:	4905      	ldr	r1, [pc, #20]	; (80093dc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	58000800 	.word	0x58000800

080093e0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80093e8:	4b05      	ldr	r3, [pc, #20]	; (8009400 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80093ea:	6a1a      	ldr	r2, [r3, #32]
 80093ec:	4904      	ldr	r1, [pc, #16]	; (8009400 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	620b      	str	r3, [r1, #32]
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	58000800 	.word	0x58000800

08009404 <LL_AHB3_GRP1_EnableClock>:
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800940c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4313      	orrs	r3, r2
 800941a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800941c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4013      	ands	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009428:	68fb      	ldr	r3, [r7, #12]
}
 800942a:	bf00      	nop
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800943e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009442:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4313      	orrs	r3, r2
 800944e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009456:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4013      	ands	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009460:	68fb      	ldr	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	601a      	str	r2, [r3, #0]
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f043 0201 	orr.w	r2, r3, #1
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	601a      	str	r2, [r3, #0]
}
 80094a2:	bf00      	nop
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	041b      	lsls	r3, r3, #16
 80094c0:	43db      	mvns	r3, r3
 80094c2:	401a      	ands	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	041b      	lsls	r3, r3, #16
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	605a      	str	r2, [r3, #4]
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	43db      	mvns	r3, r3
 800950a:	401a      	ands	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	605a      	str	r2, [r3, #4]
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	609a      	str	r2, [r3, #8]
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	041a      	lsls	r2, r3, #16
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	609a      	str	r2, [r3, #8]
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	4013      	ands	r3, r2
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	429a      	cmp	r2, r3
 800956c:	d101      	bne.n	8009572 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	69da      	ldr	r2, [r3, #28]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	4013      	ands	r3, r2
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d101      	bne.n	800959c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
	...

080095ac <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80095b0:	2102      	movs	r1, #2
 80095b2:	4819      	ldr	r0, [pc, #100]	; (8009618 <HW_IPCC_Rx_Handler+0x6c>)
 80095b4:	f7ff ffe4 	bl	8009580 <LL_C2_IPCC_IsActiveFlag_CHx>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d009      	beq.n	80095d2 <HW_IPCC_Rx_Handler+0x26>
 80095be:	4b16      	ldr	r3, [pc, #88]	; (8009618 <HW_IPCC_Rx_Handler+0x6c>)
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	43db      	mvns	r3, r3
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80095cc:	f000 f8ea 	bl	80097a4 <HW_IPCC_SYS_EvtHandler>
 80095d0:	e01f      	b.n	8009612 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80095d2:	2101      	movs	r1, #1
 80095d4:	4810      	ldr	r0, [pc, #64]	; (8009618 <HW_IPCC_Rx_Handler+0x6c>)
 80095d6:	f7ff ffd3 	bl	8009580 <LL_C2_IPCC_IsActiveFlag_CHx>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d008      	beq.n	80095f2 <HW_IPCC_Rx_Handler+0x46>
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <HW_IPCC_Rx_Handler+0x6c>)
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d102      	bne.n	80095f2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80095ec:	f000 f89e 	bl	800972c <HW_IPCC_BLE_EvtHandler>
 80095f0:	e00f      	b.n	8009612 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80095f2:	2108      	movs	r1, #8
 80095f4:	4808      	ldr	r0, [pc, #32]	; (8009618 <HW_IPCC_Rx_Handler+0x6c>)
 80095f6:	f7ff ffc3 	bl	8009580 <LL_C2_IPCC_IsActiveFlag_CHx>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d009      	beq.n	8009614 <HW_IPCC_Rx_Handler+0x68>
 8009600:	4b05      	ldr	r3, [pc, #20]	; (8009618 <HW_IPCC_Rx_Handler+0x6c>)
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	43db      	mvns	r3, r3
 8009606:	f003 0308 	and.w	r3, r3, #8
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800960e:	f000 f915 	bl	800983c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009612:	bf00      	nop
 8009614:	bf00      	nop
}
 8009616:	bd80      	pop	{r7, pc}
 8009618:	58000c00 	.word	0x58000c00

0800961c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009620:	2102      	movs	r1, #2
 8009622:	4822      	ldr	r0, [pc, #136]	; (80096ac <HW_IPCC_Tx_Handler+0x90>)
 8009624:	f7ff ff97 	bl	8009556 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d109      	bne.n	8009642 <HW_IPCC_Tx_Handler+0x26>
 800962e:	4b1f      	ldr	r3, [pc, #124]	; (80096ac <HW_IPCC_Tx_Handler+0x90>)
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	43db      	mvns	r3, r3
 8009634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800963c:	f000 f8a6 	bl	800978c <HW_IPCC_SYS_CmdEvtHandler>
 8009640:	e031      	b.n	80096a6 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009642:	2102      	movs	r1, #2
 8009644:	4819      	ldr	r0, [pc, #100]	; (80096ac <HW_IPCC_Tx_Handler+0x90>)
 8009646:	f7ff ff86 	bl	8009556 <LL_C1_IPCC_IsActiveFlag_CHx>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d109      	bne.n	8009664 <HW_IPCC_Tx_Handler+0x48>
 8009650:	4b16      	ldr	r3, [pc, #88]	; (80096ac <HW_IPCC_Tx_Handler+0x90>)
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	43db      	mvns	r3, r3
 8009656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800965e:	f000 f895 	bl	800978c <HW_IPCC_SYS_CmdEvtHandler>
 8009662:	e020      	b.n	80096a6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009664:	2108      	movs	r1, #8
 8009666:	4811      	ldr	r0, [pc, #68]	; (80096ac <HW_IPCC_Tx_Handler+0x90>)
 8009668:	f7ff ff75 	bl	8009556 <LL_C1_IPCC_IsActiveFlag_CHx>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d109      	bne.n	8009686 <HW_IPCC_Tx_Handler+0x6a>
 8009672:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <HW_IPCC_Tx_Handler+0x90>)
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	43db      	mvns	r3, r3
 8009678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009680:	f000 f8be 	bl	8009800 <HW_IPCC_MM_FreeBufHandler>
 8009684:	e00f      	b.n	80096a6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009686:	2120      	movs	r1, #32
 8009688:	4808      	ldr	r0, [pc, #32]	; (80096ac <HW_IPCC_Tx_Handler+0x90>)
 800968a:	f7ff ff64 	bl	8009556 <LL_C1_IPCC_IsActiveFlag_CHx>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d109      	bne.n	80096a8 <HW_IPCC_Tx_Handler+0x8c>
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <HW_IPCC_Tx_Handler+0x90>)
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	43db      	mvns	r3, r3
 800969a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80096a2:	f000 f84f 	bl	8009744 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
}
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	58000c00 	.word	0x58000c00

080096b0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80096b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80096b8:	f7ff febd 	bl	8009436 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80096bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80096c0:	f7ff fe7a 	bl	80093b8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80096c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80096c8:	f7ff fe8a 	bl	80093e0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80096cc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80096ce:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80096d0:	f7ff fe62 	bl	8009398 <LL_PWR_EnableBootC2>

  return;
 80096d4:	bf00      	nop
}
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80096dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80096e0:	f7ff fe90 	bl	8009404 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80096e4:	4806      	ldr	r0, [pc, #24]	; (8009700 <HW_IPCC_Init+0x28>)
 80096e6:	f7ff fed2 	bl	800948e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80096ea:	4805      	ldr	r0, [pc, #20]	; (8009700 <HW_IPCC_Init+0x28>)
 80096ec:	f7ff febf 	bl	800946e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80096f0:	202c      	movs	r0, #44	; 0x2c
 80096f2:	f7f9 fed0 	bl	8003496 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80096f6:	202d      	movs	r0, #45	; 0x2d
 80096f8:	f7f9 fecd 	bl	8003496 <HAL_NVIC_EnableIRQ>

  return;
 80096fc:	bf00      	nop
}
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	58000c00 	.word	0x58000c00

08009704 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009708:	2101      	movs	r1, #1
 800970a:	4802      	ldr	r0, [pc, #8]	; (8009714 <HW_IPCC_BLE_Init+0x10>)
 800970c:	f7ff fef4 	bl	80094f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009710:	bf00      	nop
}
 8009712:	bd80      	pop	{r7, pc}
 8009714:	58000c00 	.word	0x58000c00

08009718 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800971c:	2101      	movs	r1, #1
 800971e:	4802      	ldr	r0, [pc, #8]	; (8009728 <HW_IPCC_BLE_SendCmd+0x10>)
 8009720:	f7ff ff0a 	bl	8009538 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009724:	bf00      	nop
}
 8009726:	bd80      	pop	{r7, pc}
 8009728:	58000c00 	.word	0x58000c00

0800972c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009730:	f7fe fd2c 	bl	800818c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009734:	2101      	movs	r1, #1
 8009736:	4802      	ldr	r0, [pc, #8]	; (8009740 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009738:	f7ff fef0 	bl	800951c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800973c:	bf00      	nop
}
 800973e:	bd80      	pop	{r7, pc}
 8009740:	58000c00 	.word	0x58000c00

08009744 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009748:	2120      	movs	r1, #32
 800974a:	4803      	ldr	r0, [pc, #12]	; (8009758 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800974c:	f7ff fec2 	bl	80094d4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009750:	f7fe fd4c 	bl	80081ec <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009754:	bf00      	nop
}
 8009756:	bd80      	pop	{r7, pc}
 8009758:	58000c00 	.word	0x58000c00

0800975c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009760:	2102      	movs	r1, #2
 8009762:	4802      	ldr	r0, [pc, #8]	; (800976c <HW_IPCC_SYS_Init+0x10>)
 8009764:	f7ff fec8 	bl	80094f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009768:	bf00      	nop
}
 800976a:	bd80      	pop	{r7, pc}
 800976c:	58000c00 	.word	0x58000c00

08009770 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009774:	2102      	movs	r1, #2
 8009776:	4804      	ldr	r0, [pc, #16]	; (8009788 <HW_IPCC_SYS_SendCmd+0x18>)
 8009778:	f7ff fede 	bl	8009538 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800977c:	2102      	movs	r1, #2
 800977e:	4802      	ldr	r0, [pc, #8]	; (8009788 <HW_IPCC_SYS_SendCmd+0x18>)
 8009780:	f7ff fe95 	bl	80094ae <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009784:	bf00      	nop
}
 8009786:	bd80      	pop	{r7, pc}
 8009788:	58000c00 	.word	0x58000c00

0800978c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009790:	2102      	movs	r1, #2
 8009792:	4803      	ldr	r0, [pc, #12]	; (80097a0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009794:	f7ff fe9e 	bl	80094d4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009798:	f7fe fd78 	bl	800828c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800979c:	bf00      	nop
}
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	58000c00 	.word	0x58000c00

080097a4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80097a8:	f7fe fd86 	bl	80082b8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80097ac:	2102      	movs	r1, #2
 80097ae:	4802      	ldr	r0, [pc, #8]	; (80097b8 <HW_IPCC_SYS_EvtHandler+0x14>)
 80097b0:	f7ff feb4 	bl	800951c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80097b4:	bf00      	nop
}
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	58000c00 	.word	0x58000c00

080097bc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80097c4:	2108      	movs	r1, #8
 80097c6:	480c      	ldr	r0, [pc, #48]	; (80097f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80097c8:	f7ff fec5 	bl	8009556 <LL_C1_IPCC_IsActiveFlag_CHx>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d007      	beq.n	80097e2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80097d2:	4a0a      	ldr	r2, [pc, #40]	; (80097fc <HW_IPCC_MM_SendFreeBuf+0x40>)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80097d8:	2108      	movs	r1, #8
 80097da:	4807      	ldr	r0, [pc, #28]	; (80097f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80097dc:	f7ff fe67 	bl	80094ae <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80097e0:	e006      	b.n	80097f0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80097e6:	2108      	movs	r1, #8
 80097e8:	4803      	ldr	r0, [pc, #12]	; (80097f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80097ea:	f7ff fea5 	bl	8009538 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80097ee:	bf00      	nop
}
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	58000c00 	.word	0x58000c00
 80097fc:	20000244 	.word	0x20000244

08009800 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009804:	2108      	movs	r1, #8
 8009806:	4806      	ldr	r0, [pc, #24]	; (8009820 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009808:	f7ff fe64 	bl	80094d4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009812:	2108      	movs	r1, #8
 8009814:	4802      	ldr	r0, [pc, #8]	; (8009820 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009816:	f7ff fe8f 	bl	8009538 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800981a:	bf00      	nop
}
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	58000c00 	.word	0x58000c00
 8009824:	20000244 	.word	0x20000244

08009828 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800982c:	2108      	movs	r1, #8
 800982e:	4802      	ldr	r0, [pc, #8]	; (8009838 <HW_IPCC_TRACES_Init+0x10>)
 8009830:	f7ff fe62 	bl	80094f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009834:	bf00      	nop
}
 8009836:	bd80      	pop	{r7, pc}
 8009838:	58000c00 	.word	0x58000c00

0800983c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009840:	f7fe fde2 	bl	8008408 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009844:	2108      	movs	r1, #8
 8009846:	4802      	ldr	r0, [pc, #8]	; (8009850 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009848:	f7ff fe68 	bl	800951c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800984c:	bf00      	nop
}
 800984e:	bd80      	pop	{r7, pc}
 8009850:	58000c00 	.word	0x58000c00

08009854 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009858:	4b05      	ldr	r3, [pc, #20]	; (8009870 <UTIL_LPM_Init+0x1c>)
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800985e:	4b05      	ldr	r3, [pc, #20]	; (8009874 <UTIL_LPM_Init+0x20>)
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009864:	bf00      	nop
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	20000248 	.word	0x20000248
 8009874:	2000024c 	.word	0x2000024c

08009878 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009884:	f3ef 8310 	mrs	r3, PRIMASK
 8009888:	613b      	str	r3, [r7, #16]
  return(result);
 800988a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800988c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800988e:	b672      	cpsid	i
}
 8009890:	bf00      	nop
  
  switch(state)
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d008      	beq.n	80098aa <UTIL_LPM_SetOffMode+0x32>
 8009898:	2b01      	cmp	r3, #1
 800989a:	d10e      	bne.n	80098ba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <UTIL_LPM_SetOffMode+0x5c>)
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	4a0b      	ldr	r2, [pc, #44]	; (80098d4 <UTIL_LPM_SetOffMode+0x5c>)
 80098a6:	6013      	str	r3, [r2, #0]
      break;
 80098a8:	e008      	b.n	80098bc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	43da      	mvns	r2, r3
 80098ae:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <UTIL_LPM_SetOffMode+0x5c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4013      	ands	r3, r2
 80098b4:	4a07      	ldr	r2, [pc, #28]	; (80098d4 <UTIL_LPM_SetOffMode+0x5c>)
 80098b6:	6013      	str	r3, [r2, #0]
      break;
 80098b8:	e000      	b.n	80098bc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80098ba:	bf00      	nop
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f383 8810 	msr	PRIMASK, r3
}
 80098c6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80098c8:	bf00      	nop
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	2000024c 	.word	0x2000024c

080098d8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08c      	sub	sp, #48	; 0x30
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80098e0:	4b67      	ldr	r3, [pc, #412]	; (8009a80 <UTIL_SEQ_Run+0x1a8>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80098e6:	4b66      	ldr	r3, [pc, #408]	; (8009a80 <UTIL_SEQ_Run+0x1a8>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4013      	ands	r3, r2
 80098ee:	4a64      	ldr	r2, [pc, #400]	; (8009a80 <UTIL_SEQ_Run+0x1a8>)
 80098f0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80098f2:	e083      	b.n	80099fc <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80098f8:	e002      	b.n	8009900 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	3301      	adds	r3, #1
 80098fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009900:	4a60      	ldr	r2, [pc, #384]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 8009902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009904:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009908:	4b5f      	ldr	r3, [pc, #380]	; (8009a88 <UTIL_SEQ_Run+0x1b0>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	401a      	ands	r2, r3
 800990e:	4b5c      	ldr	r3, [pc, #368]	; (8009a80 <UTIL_SEQ_Run+0x1a8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4013      	ands	r3, r2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d0f0      	beq.n	80098fa <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8009918:	4a5a      	ldr	r2, [pc, #360]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009920:	4b59      	ldr	r3, [pc, #356]	; (8009a88 <UTIL_SEQ_Run+0x1b0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	401a      	ands	r2, r3
 8009926:	4b56      	ldr	r3, [pc, #344]	; (8009a80 <UTIL_SEQ_Run+0x1a8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4013      	ands	r3, r2
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800992e:	4a55      	ldr	r2, [pc, #340]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	4413      	add	r3, r2
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	4013      	ands	r3, r2
 800993c:	2b00      	cmp	r3, #0
 800993e:	d106      	bne.n	800994e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009940:	4a50      	ldr	r2, [pc, #320]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	4413      	add	r3, r2
 8009948:	f04f 32ff 	mov.w	r2, #4294967295
 800994c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800994e:	4a4d      	ldr	r2, [pc, #308]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	4413      	add	r3, r2
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	4013      	ands	r3, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f000 f99d 	bl	8009c9c <SEQ_BitPosition>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	4b49      	ldr	r3, [pc, #292]	; (8009a8c <UTIL_SEQ_Run+0x1b4>)
 8009968:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800996a:	4a46      	ldr	r2, [pc, #280]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 800996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	4413      	add	r3, r2
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	4b45      	ldr	r3, [pc, #276]	; (8009a8c <UTIL_SEQ_Run+0x1b4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2101      	movs	r1, #1
 800997a:	fa01 f303 	lsl.w	r3, r1, r3
 800997e:	43db      	mvns	r3, r3
 8009980:	401a      	ands	r2, r3
 8009982:	4940      	ldr	r1, [pc, #256]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	440b      	add	r3, r1
 800998a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800998c:	f3ef 8310 	mrs	r3, PRIMASK
 8009990:	61bb      	str	r3, [r7, #24]
  return(result);
 8009992:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009994:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009996:	b672      	cpsid	i
}
 8009998:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800999a:	4b3c      	ldr	r3, [pc, #240]	; (8009a8c <UTIL_SEQ_Run+0x1b4>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2201      	movs	r2, #1
 80099a0:	fa02 f303 	lsl.w	r3, r2, r3
 80099a4:	43da      	mvns	r2, r3
 80099a6:	4b3a      	ldr	r3, [pc, #232]	; (8009a90 <UTIL_SEQ_Run+0x1b8>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4013      	ands	r3, r2
 80099ac:	4a38      	ldr	r2, [pc, #224]	; (8009a90 <UTIL_SEQ_Run+0x1b8>)
 80099ae:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80099b0:	2302      	movs	r3, #2
 80099b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099b4:	e013      	b.n	80099de <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80099b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b8:	3b01      	subs	r3, #1
 80099ba:	4a32      	ldr	r2, [pc, #200]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 80099bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80099c0:	4b32      	ldr	r3, [pc, #200]	; (8009a8c <UTIL_SEQ_Run+0x1b4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2201      	movs	r2, #1
 80099c6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ca:	43da      	mvns	r2, r3
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	3b01      	subs	r3, #1
 80099d0:	400a      	ands	r2, r1
 80099d2:	492c      	ldr	r1, [pc, #176]	; (8009a84 <UTIL_SEQ_Run+0x1ac>)
 80099d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	3b01      	subs	r3, #1
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e8      	bne.n	80099b6 <UTIL_SEQ_Run+0xde>
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f383 8810 	msr	PRIMASK, r3
}
 80099ee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80099f0:	4b26      	ldr	r3, [pc, #152]	; (8009a8c <UTIL_SEQ_Run+0x1b4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a27      	ldr	r2, [pc, #156]	; (8009a94 <UTIL_SEQ_Run+0x1bc>)
 80099f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099fa:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80099fc:	4b24      	ldr	r3, [pc, #144]	; (8009a90 <UTIL_SEQ_Run+0x1b8>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	4b21      	ldr	r3, [pc, #132]	; (8009a88 <UTIL_SEQ_Run+0x1b0>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	401a      	ands	r2, r3
 8009a06:	4b1e      	ldr	r3, [pc, #120]	; (8009a80 <UTIL_SEQ_Run+0x1a8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d007      	beq.n	8009a20 <UTIL_SEQ_Run+0x148>
 8009a10:	4b21      	ldr	r3, [pc, #132]	; (8009a98 <UTIL_SEQ_Run+0x1c0>)
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	4b21      	ldr	r3, [pc, #132]	; (8009a9c <UTIL_SEQ_Run+0x1c4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f43f af6a 	beq.w	80098f4 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009a20:	4b1a      	ldr	r3, [pc, #104]	; (8009a8c <UTIL_SEQ_Run+0x1b4>)
 8009a22:	f04f 32ff 	mov.w	r2, #4294967295
 8009a26:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009a28:	f000 f92a 	bl	8009c80 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a30:	613b      	str	r3, [r7, #16]
  return(result);
 8009a32:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009a34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a36:	b672      	cpsid	i
}
 8009a38:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8009a3a:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <UTIL_SEQ_Run+0x1b8>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	4b12      	ldr	r3, [pc, #72]	; (8009a88 <UTIL_SEQ_Run+0x1b0>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	401a      	ands	r2, r3
 8009a44:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <UTIL_SEQ_Run+0x1a8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d108      	bne.n	8009a60 <UTIL_SEQ_Run+0x188>
 8009a4e:	4b12      	ldr	r3, [pc, #72]	; (8009a98 <UTIL_SEQ_Run+0x1c0>)
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <UTIL_SEQ_Run+0x1c4>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4013      	ands	r3, r2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8009a5c:	f7f6 fddf 	bl	800061e <UTIL_SEQ_Idle>
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f383 8810 	msr	PRIMASK, r3
}
 8009a6a:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8009a6c:	f000 f90f 	bl	8009c8e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009a70:	4a03      	ldr	r2, [pc, #12]	; (8009a80 <UTIL_SEQ_Run+0x1a8>)
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	6013      	str	r3, [r2, #0]

  return;
 8009a76:	bf00      	nop
}
 8009a78:	3730      	adds	r7, #48	; 0x30
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000020 	.word	0x20000020
 8009a84:	200002e0 	.word	0x200002e0
 8009a88:	2000001c 	.word	0x2000001c
 8009a8c:	2000025c 	.word	0x2000025c
 8009a90:	20000250 	.word	0x20000250
 8009a94:	20000260 	.word	0x20000260
 8009a98:	20000254 	.word	0x20000254
 8009a9c:	20000258 	.word	0x20000258

08009aa0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aac:	f3ef 8310 	mrs	r3, PRIMASK
 8009ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ab2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009ab4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ab6:	b672      	cpsid	i
}
 8009ab8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 f8ee 	bl	8009c9c <SEQ_BitPosition>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4a06      	ldr	r2, [pc, #24]	; (8009ae0 <UTIL_SEQ_RegTask+0x40>)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	f383 8810 	msr	PRIMASK, r3
}
 8009ad6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009ad8:	bf00      	nop
}
 8009ada:	3720      	adds	r7, #32
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20000260 	.word	0x20000260

08009ae4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aee:	f3ef 8310 	mrs	r3, PRIMASK
 8009af2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009af4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009af6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009af8:	b672      	cpsid	i
}
 8009afa:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009afc:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <UTIL_SEQ_SetTask+0x50>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	4a0b      	ldr	r2, [pc, #44]	; (8009b34 <UTIL_SEQ_SetTask+0x50>)
 8009b06:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009b08:	4a0b      	ldr	r2, [pc, #44]	; (8009b38 <UTIL_SEQ_SetTask+0x54>)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	431a      	orrs	r2, r3
 8009b14:	4908      	ldr	r1, [pc, #32]	; (8009b38 <UTIL_SEQ_SetTask+0x54>)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f383 8810 	msr	PRIMASK, r3
}
 8009b26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009b28:	bf00      	nop
}
 8009b2a:	371c      	adds	r7, #28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20000250 	.word	0x20000250
 8009b38:	200002e0 	.word	0x200002e0

08009b3c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b44:	f3ef 8310 	mrs	r3, PRIMASK
 8009b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009b4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b4e:	b672      	cpsid	i
}
 8009b50:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	43da      	mvns	r2, r3
 8009b56:	4b08      	ldr	r3, [pc, #32]	; (8009b78 <UTIL_SEQ_PauseTask+0x3c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	4a06      	ldr	r2, [pc, #24]	; (8009b78 <UTIL_SEQ_PauseTask+0x3c>)
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f383 8810 	msr	PRIMASK, r3
}
 8009b6a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009b6c:	bf00      	nop
}
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	2000001c 	.word	0x2000001c

08009b7c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b84:	f3ef 8310 	mrs	r3, PRIMASK
 8009b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b8e:	b672      	cpsid	i
}
 8009b90:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009b92:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <UTIL_SEQ_ResumeTask+0x3c>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	4a07      	ldr	r2, [pc, #28]	; (8009bb8 <UTIL_SEQ_ResumeTask+0x3c>)
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	f383 8810 	msr	PRIMASK, r3
}
 8009ba8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009baa:	bf00      	nop
}
 8009bac:	371c      	adds	r7, #28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	2000001c 	.word	0x2000001c

08009bbc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bce:	b672      	cpsid	i
}
 8009bd0:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009bd2:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <UTIL_SEQ_SetEvt+0x3c>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	4a07      	ldr	r2, [pc, #28]	; (8009bf8 <UTIL_SEQ_SetEvt+0x3c>)
 8009bdc:	6013      	str	r3, [r2, #0]
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f383 8810 	msr	PRIMASK, r3
}
 8009be8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009bea:	bf00      	nop
}
 8009bec:	371c      	adds	r7, #28
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20000254 	.word	0x20000254

08009bfc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009c04:	4b1b      	ldr	r3, [pc, #108]	; (8009c74 <UTIL_SEQ_WaitEvt+0x78>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009c0a:	4b1a      	ldr	r3, [pc, #104]	; (8009c74 <UTIL_SEQ_WaitEvt+0x78>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c12:	d102      	bne.n	8009c1a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e005      	b.n	8009c26 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8009c1a:	4b16      	ldr	r3, [pc, #88]	; (8009c74 <UTIL_SEQ_WaitEvt+0x78>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009c26:	4b14      	ldr	r3, [pc, #80]	; (8009c78 <UTIL_SEQ_WaitEvt+0x7c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8009c2c:	4a12      	ldr	r2, [pc, #72]	; (8009c78 <UTIL_SEQ_WaitEvt+0x7c>)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8009c32:	e005      	b.n	8009c40 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8009c34:	4b10      	ldr	r3, [pc, #64]	; (8009c78 <UTIL_SEQ_WaitEvt+0x7c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6978      	ldr	r0, [r7, #20]
 8009c3c:	f7f6 fcf6 	bl	800062c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8009c40:	4b0e      	ldr	r3, [pc, #56]	; (8009c7c <UTIL_SEQ_WaitEvt+0x80>)
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <UTIL_SEQ_WaitEvt+0x7c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0f2      	beq.n	8009c34 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009c4e:	4a09      	ldr	r2, [pc, #36]	; (8009c74 <UTIL_SEQ_WaitEvt+0x78>)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8009c54:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <UTIL_SEQ_WaitEvt+0x7c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	43da      	mvns	r2, r3
 8009c5a:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <UTIL_SEQ_WaitEvt+0x80>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4013      	ands	r3, r2
 8009c60:	4a06      	ldr	r2, [pc, #24]	; (8009c7c <UTIL_SEQ_WaitEvt+0x80>)
 8009c62:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8009c64:	4a04      	ldr	r2, [pc, #16]	; (8009c78 <UTIL_SEQ_WaitEvt+0x7c>)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6013      	str	r3, [r2, #0]

  return;
 8009c6a:	bf00      	nop
}
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	2000025c 	.word	0x2000025c
 8009c78:	20000258 	.word	0x20000258
 8009c7c:	20000254 	.word	0x20000254

08009c80 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009c84:	bf00      	nop
}
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009c8e:	b480      	push	{r7}
 8009c90:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009c92:	bf00      	nop
}
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	0c1b      	lsrs	r3, r3, #16
 8009cac:	041b      	lsls	r3, r3, #16
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <SEQ_BitPosition+0x20>
 8009cb2:	2310      	movs	r3, #16
 8009cb4:	73fb      	strb	r3, [r7, #15]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d105      	bne.n	8009cd2 <SEQ_BitPosition+0x36>
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	73fb      	strb	r3, [r7, #15]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	021b      	lsls	r3, r3, #8
 8009cd0:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d105      	bne.n	8009ce8 <SEQ_BitPosition+0x4c>
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	73fb      	strb	r3, [r7, #15]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	0f1b      	lsrs	r3, r3, #28
 8009cec:	4a07      	ldr	r2, [pc, #28]	; (8009d0c <SEQ_BitPosition+0x70>)
 8009cee:	5cd2      	ldrb	r2, [r2, r3]
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	f1c3 031f 	rsb	r3, r3, #31
 8009cfc:	b2db      	uxtb	r3, r3
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	0800a030 	.word	0x0800a030

08009d10 <__libc_init_array>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4d0d      	ldr	r5, [pc, #52]	; (8009d48 <__libc_init_array+0x38>)
 8009d14:	4c0d      	ldr	r4, [pc, #52]	; (8009d4c <__libc_init_array+0x3c>)
 8009d16:	1b64      	subs	r4, r4, r5
 8009d18:	10a4      	asrs	r4, r4, #2
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	d109      	bne.n	8009d34 <__libc_init_array+0x24>
 8009d20:	4d0b      	ldr	r5, [pc, #44]	; (8009d50 <__libc_init_array+0x40>)
 8009d22:	4c0c      	ldr	r4, [pc, #48]	; (8009d54 <__libc_init_array+0x44>)
 8009d24:	f000 f82e 	bl	8009d84 <_init>
 8009d28:	1b64      	subs	r4, r4, r5
 8009d2a:	10a4      	asrs	r4, r4, #2
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	d105      	bne.n	8009d3e <__libc_init_array+0x2e>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d38:	4798      	blx	r3
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	e7ee      	b.n	8009d1c <__libc_init_array+0xc>
 8009d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d42:	4798      	blx	r3
 8009d44:	3601      	adds	r6, #1
 8009d46:	e7f2      	b.n	8009d2e <__libc_init_array+0x1e>
 8009d48:	0800a048 	.word	0x0800a048
 8009d4c:	0800a048 	.word	0x0800a048
 8009d50:	0800a048 	.word	0x0800a048
 8009d54:	0800a04c 	.word	0x0800a04c

08009d58 <memcpy>:
 8009d58:	440a      	add	r2, r1
 8009d5a:	4291      	cmp	r1, r2
 8009d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d60:	d100      	bne.n	8009d64 <memcpy+0xc>
 8009d62:	4770      	bx	lr
 8009d64:	b510      	push	{r4, lr}
 8009d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6e:	4291      	cmp	r1, r2
 8009d70:	d1f9      	bne.n	8009d66 <memcpy+0xe>
 8009d72:	bd10      	pop	{r4, pc}

08009d74 <memset>:
 8009d74:	4402      	add	r2, r0
 8009d76:	4603      	mov	r3, r0
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d100      	bne.n	8009d7e <memset+0xa>
 8009d7c:	4770      	bx	lr
 8009d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d82:	e7f9      	b.n	8009d78 <memset+0x4>

08009d84 <_init>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	bf00      	nop
 8009d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d8a:	bc08      	pop	{r3}
 8009d8c:	469e      	mov	lr, r3
 8009d8e:	4770      	bx	lr

08009d90 <_fini>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	bf00      	nop
 8009d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d96:	bc08      	pop	{r3}
 8009d98:	469e      	mov	lr, r3
 8009d9a:	4770      	bx	lr
