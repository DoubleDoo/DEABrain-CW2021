
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009260  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009648  08009648  00019648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000004  08009650  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000024  08009670  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000042  200000c0  08009709  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800974b  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000090  20000118  0800975c  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000004bc  200001a8  080097ec  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000664  080097ec  00020664  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00039ecc  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000063f1  00000000  00000000  0005a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000024e0  00000000  00000000  00060498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002288  00000000  00000000  00062978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002cd92  00000000  00000000  00064c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00026f3b  00000000  00000000  00091992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00100f0e  00000000  00000000  000b88cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001b97db  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009944  00000000  00000000  001b9830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a8 	.word	0x200001a8
 8000158:	00000000 	.word	0x00000000
 800015c:	08009384 	.word	0x08009384

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001ac 	.word	0x200001ac
 8000178:	08009384 	.word	0x08009384

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	468c      	mov	ip, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	f040 8083 	bne.w	80002d2 <__udivmoddi4+0x116>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d947      	bls.n	8000262 <__udivmoddi4+0xa6>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b142      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d8:	f1c2 0020 	rsb	r0, r2, #32
 80001dc:	fa24 f000 	lsr.w	r0, r4, r0
 80001e0:	4091      	lsls	r1, r2
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea40 0c01 	orr.w	ip, r0, r1
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6f8 	udiv	r6, ip, r8
 80001f4:	fa1f fe87 	uxth.w	lr, r7
 80001f8:	fb08 c116 	mls	r1, r8, r6, ip
 80001fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000200:	fb06 f10e 	mul.w	r1, r6, lr
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18fb      	adds	r3, r7, r3
 800020a:	f106 30ff 	add.w	r0, r6, #4294967295
 800020e:	f080 8119 	bcs.w	8000444 <__udivmoddi4+0x288>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8116 	bls.w	8000444 <__udivmoddi4+0x288>
 8000218:	3e02      	subs	r6, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	45a6      	cmp	lr, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8105 	bcs.w	8000448 <__udivmoddi4+0x28c>
 800023e:	45a6      	cmp	lr, r4
 8000240:	f240 8102 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	eba4 040e 	sub.w	r4, r4, lr
 8000250:	2600      	movs	r6, #0
 8000252:	b11d      	cbz	r5, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c5 4300 	strd	r4, r3, [r5]
 800025c:	4631      	mov	r1, r6
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	b902      	cbnz	r2, 8000266 <__udivmoddi4+0xaa>
 8000264:	deff      	udf	#255	; 0xff
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	2a00      	cmp	r2, #0
 800026c:	d150      	bne.n	8000310 <__udivmoddi4+0x154>
 800026e:	1bcb      	subs	r3, r1, r7
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f f887 	uxth.w	r8, r7
 8000278:	2601      	movs	r6, #1
 800027a:	fbb3 fcfe 	udiv	ip, r3, lr
 800027e:	0c21      	lsrs	r1, r4, #16
 8000280:	fb0e 331c 	mls	r3, lr, ip, r3
 8000284:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000288:	fb08 f30c 	mul.w	r3, r8, ip
 800028c:	428b      	cmp	r3, r1
 800028e:	d907      	bls.n	80002a0 <__udivmoddi4+0xe4>
 8000290:	1879      	adds	r1, r7, r1
 8000292:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000296:	d202      	bcs.n	800029e <__udivmoddi4+0xe2>
 8000298:	428b      	cmp	r3, r1
 800029a:	f200 80e9 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 800029e:	4684      	mov	ip, r0
 80002a0:	1ac9      	subs	r1, r1, r3
 80002a2:	b2a3      	uxth	r3, r4
 80002a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002b0:	fb08 f800 	mul.w	r8, r8, r0
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0x10c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x10a>
 80002c0:	45a0      	cmp	r8, r4
 80002c2:	f200 80d9 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002c6:	4618      	mov	r0, r3
 80002c8:	eba4 0408 	sub.w	r4, r4, r8
 80002cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d0:	e7bf      	b.n	8000252 <__udivmoddi4+0x96>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80b1 	beq.w	800043e <__udivmoddi4+0x282>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x1cc>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b8 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	468c      	mov	ip, r1
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0a8      	beq.n	800025c <__udivmoddi4+0xa0>
 800030a:	e9c5 4c00 	strd	r4, ip, [r5]
 800030e:	e7a5      	b.n	800025c <__udivmoddi4+0xa0>
 8000310:	f1c2 0320 	rsb	r3, r2, #32
 8000314:	fa20 f603 	lsr.w	r6, r0, r3
 8000318:	4097      	lsls	r7, r2
 800031a:	fa01 f002 	lsl.w	r0, r1, r2
 800031e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000322:	40d9      	lsrs	r1, r3
 8000324:	4330      	orrs	r0, r6
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	fbb1 f6fe 	udiv	r6, r1, lr
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	fb0e 1116 	mls	r1, lr, r6, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb06 f108 	mul.w	r1, r6, r8
 800033c:	4299      	cmp	r1, r3
 800033e:	fa04 f402 	lsl.w	r4, r4, r2
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f106 3cff 	add.w	ip, r6, #4294967295
 800034a:	f080 808d 	bcs.w	8000468 <__udivmoddi4+0x2ac>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 808a 	bls.w	8000468 <__udivmoddi4+0x2ac>
 8000354:	3e02      	subs	r6, #2
 8000356:	443b      	add	r3, r7
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b281      	uxth	r1, r0
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000368:	fb00 f308 	mul.w	r3, r0, r8
 800036c:	428b      	cmp	r3, r1
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	1879      	adds	r1, r7, r1
 8000372:	f100 3cff 	add.w	ip, r0, #4294967295
 8000376:	d273      	bcs.n	8000460 <__udivmoddi4+0x2a4>
 8000378:	428b      	cmp	r3, r1
 800037a:	d971      	bls.n	8000460 <__udivmoddi4+0x2a4>
 800037c:	3802      	subs	r0, #2
 800037e:	4439      	add	r1, r7
 8000380:	1acb      	subs	r3, r1, r3
 8000382:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000386:	e778      	b.n	800027a <__udivmoddi4+0xbe>
 8000388:	f1c6 0c20 	rsb	ip, r6, #32
 800038c:	fa03 f406 	lsl.w	r4, r3, r6
 8000390:	fa22 f30c 	lsr.w	r3, r2, ip
 8000394:	431c      	orrs	r4, r3
 8000396:	fa20 f70c 	lsr.w	r7, r0, ip
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003a2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003a6:	431f      	orrs	r7, r3
 80003a8:	0c3b      	lsrs	r3, r7, #16
 80003aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ae:	fa1f f884 	uxth.w	r8, r4
 80003b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003ba:	fb09 fa08 	mul.w	sl, r9, r8
 80003be:	458a      	cmp	sl, r1
 80003c0:	fa02 f206 	lsl.w	r2, r2, r6
 80003c4:	fa00 f306 	lsl.w	r3, r0, r6
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x220>
 80003ca:	1861      	adds	r1, r4, r1
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	d248      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 80003d2:	458a      	cmp	sl, r1
 80003d4:	d946      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4421      	add	r1, r4
 80003dc:	eba1 010a 	sub.w	r1, r1, sl
 80003e0:	b2bf      	uxth	r7, r7
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003ee:	fb00 f808 	mul.w	r8, r0, r8
 80003f2:	45b8      	cmp	r8, r7
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x24a>
 80003f6:	19e7      	adds	r7, r4, r7
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d22e      	bcs.n	800045c <__udivmoddi4+0x2a0>
 80003fe:	45b8      	cmp	r8, r7
 8000400:	d92c      	bls.n	800045c <__udivmoddi4+0x2a0>
 8000402:	3802      	subs	r0, #2
 8000404:	4427      	add	r7, r4
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	eba7 0708 	sub.w	r7, r7, r8
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	454f      	cmp	r7, r9
 8000414:	46c6      	mov	lr, r8
 8000416:	4649      	mov	r1, r9
 8000418:	d31a      	bcc.n	8000450 <__udivmoddi4+0x294>
 800041a:	d017      	beq.n	800044c <__udivmoddi4+0x290>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x27a>
 800041e:	ebb3 020e 	subs.w	r2, r3, lr
 8000422:	eb67 0701 	sbc.w	r7, r7, r1
 8000426:	fa07 fc0c 	lsl.w	ip, r7, ip
 800042a:	40f2      	lsrs	r2, r6
 800042c:	ea4c 0202 	orr.w	r2, ip, r2
 8000430:	40f7      	lsrs	r7, r6
 8000432:	e9c5 2700 	strd	r2, r7, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e70b      	b.n	800025c <__udivmoddi4+0xa0>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e9      	b.n	800021c <__udivmoddi4+0x60>
 8000448:	4618      	mov	r0, r3
 800044a:	e6fd      	b.n	8000248 <__udivmoddi4+0x8c>
 800044c:	4543      	cmp	r3, r8
 800044e:	d2e5      	bcs.n	800041c <__udivmoddi4+0x260>
 8000450:	ebb8 0e02 	subs.w	lr, r8, r2
 8000454:	eb69 0104 	sbc.w	r1, r9, r4
 8000458:	3801      	subs	r0, #1
 800045a:	e7df      	b.n	800041c <__udivmoddi4+0x260>
 800045c:	4608      	mov	r0, r1
 800045e:	e7d2      	b.n	8000406 <__udivmoddi4+0x24a>
 8000460:	4660      	mov	r0, ip
 8000462:	e78d      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000464:	4681      	mov	r9, r0
 8000466:	e7b9      	b.n	80003dc <__udivmoddi4+0x220>
 8000468:	4666      	mov	r6, ip
 800046a:	e775      	b.n	8000358 <__udivmoddi4+0x19c>
 800046c:	4630      	mov	r0, r6
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0x14a>
 8000470:	f1ac 0c02 	sub.w	ip, ip, #2
 8000474:	4439      	add	r1, r7
 8000476:	e713      	b.n	80002a0 <__udivmoddi4+0xe4>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	e724      	b.n	80002c8 <__udivmoddi4+0x10c>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <APPD_EnableCPU2+0x34>)
 800048c:	1d3c      	adds	r4, r7, #4
 800048e:	461d      	mov	r5, r3
 8000490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000494:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000498:	c403      	stmia	r4!, {r0, r1}
 800049a:	8022      	strh	r2, [r4, #0]
 800049c:	3402      	adds	r4, #2
 800049e:	0c13      	lsrs	r3, r2, #16
 80004a0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004a2:	f007 fb53 	bl	8007b4c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f006 feb2 	bl	8007212 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004ae:	bf00      	nop
}
 80004b0:	3720      	adds	r7, #32
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bdb0      	pop	{r4, r5, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	0800939c 	.word	0x0800939c

080004bc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80004c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ca:	f023 0207 	bic.w	r2, r3, #7
 80004ce:	4905      	ldr	r1, [pc, #20]	; (80004e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	58000400 	.word	0x58000400

080004e8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	608b      	str	r3, [r1, #8]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000514:	f000 f80a 	bl	800052c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000518:	4903      	ldr	r1, [pc, #12]	; (8000528 <APPE_Init+0x18>)
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fcc6 	bl	8000eac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000520:	f000 f812 	bl	8000548 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000524:	bf00      	nop
}
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000444 	.word	0x20000444

0800052c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000534:	f7ff ffd8 	bl	80004e8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000538:	f008 fc8c 	bl	8008e54 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800053c:	2004      	movs	r0, #4
 800053e:	f7ff ffbd 	bl	80004bc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000542:	bf00      	nop
}
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800054e:	f007 f947 	bl	80077e0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000552:	4a11      	ldr	r2, [pc, #68]	; (8000598 <appe_Tl_Init+0x50>)
 8000554:	2100      	movs	r1, #0
 8000556:	2020      	movs	r0, #32
 8000558:	f008 fda2 	bl	80090a0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <appe_Tl_Init+0x54>)
 800055e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <appe_Tl_Init+0x58>)
 8000562:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <appe_Tl_Init+0x5c>)
 800056a:	f006 ffff 	bl	800756c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <appe_Tl_Init+0x60>)
 8000570:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <appe_Tl_Init+0x64>)
 8000574:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <appe_Tl_Init+0x68>)
 8000578:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800057a:	f240 533c 	movw	r3, #1340	; 0x53c
 800057e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4618      	mov	r0, r3
 8000586:	f007 fa6d 	bl	8007a64 <TL_MM_Init>

  TL_Enable();
 800058a:	f007 f923 	bl	80077d4 <TL_Enable>

  return;
 800058e:	bf00      	nop
}
 8000590:	3720      	adds	r7, #32
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	080075a5 	.word	0x080075a5
 800059c:	20030724 	.word	0x20030724
 80005a0:	080005b5 	.word	0x080005b5
 80005a4:	080005cb 	.word	0x080005cb
 80005a8:	2003093c 	.word	0x2003093c
 80005ac:	20030830 	.word	0x20030830
 80005b0:	200301e8 	.word	0x200301e8

080005b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80005be:	bf00      	nop
}
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80005d2:	f7ff ff57 	bl	8000484 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80005d6:	f007 fc4f 	bl	8007e78 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80005da:	2100      	movs	r1, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	f008 fc4b 	bl	8008e78 <UTIL_LPM_SetOffMode>
  return;
 80005e2:	bf00      	nop
}
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80005ee:	bf00      	nop
}
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000602:	f04f 30ff 	mov.w	r0, #4294967295
 8000606:	f008 fc67 	bl	8008ed8 <UTIL_SEQ_Run>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800061a:	2100      	movs	r1, #0
 800061c:	2020      	movs	r0, #32
 800061e:	f008 fd61 	bl	80090e4 <UTIL_SEQ_SetTask>
  return;
 8000622:	bf00      	nop
}
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000632:	2002      	movs	r0, #2
 8000634:	f008 fdc2 	bl	80091bc <UTIL_SEQ_SetEvt>
  return;
 8000638:	bf00      	nop
}
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000648:	2002      	movs	r0, #2
 800064a:	f008 fdd7 	bl	80091fc <UTIL_SEQ_WaitEvt>
  return;
 800064e:	bf00      	nop
}
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <LL_EXTI_EnableIT_0_31+0x24>)
 8000662:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000666:	4905      	ldr	r1, [pc, #20]	; (800067c <LL_EXTI_EnableIT_0_31+0x24>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4313      	orrs	r3, r2
 800066c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	58000800 	.word	0x58000800

08000680 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4904      	ldr	r1, [pc, #16]	; (80006a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	600b      	str	r3, [r1, #0]

}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	58000800 	.word	0x58000800

080006a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <ReadRtcSsrValue+0x3c>)
 80006ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <ReadRtcSsrValue+0x3c>)
 80006b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006ba:	e005      	b.n	80006c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <ReadRtcSsrValue+0x3c>)
 80006c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d1f5      	bne.n	80006bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80006d0:	683b      	ldr	r3, [r7, #0]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40002800 	.word	0x40002800

080006e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	491d      	ldr	r1, [pc, #116]	; (800076c <LinkTimerAfter+0x88>)
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	440b      	add	r3, r1
 8000702:	3315      	adds	r3, #21
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b06      	cmp	r3, #6
 800070c:	d009      	beq.n	8000722 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	4916      	ldr	r1, [pc, #88]	; (800076c <LinkTimerAfter+0x88>)
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	440b      	add	r3, r1
 800071c:	3314      	adds	r3, #20
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000722:	79fa      	ldrb	r2, [r7, #7]
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <LinkTimerAfter+0x88>)
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	440b      	add	r3, r1
 8000730:	3315      	adds	r3, #21
 8000732:	7bfa      	ldrb	r2, [r7, #15]
 8000734:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	490c      	ldr	r1, [pc, #48]	; (800076c <LinkTimerAfter+0x88>)
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3314      	adds	r3, #20
 8000746:	79ba      	ldrb	r2, [r7, #6]
 8000748:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	4907      	ldr	r1, [pc, #28]	; (800076c <LinkTimerAfter+0x88>)
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	440b      	add	r3, r1
 8000758:	3315      	adds	r3, #21
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	701a      	strb	r2, [r3, #0]

  return;
 800075e:	bf00      	nop
}
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000024 	.word	0x20000024

08000770 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	460a      	mov	r2, r1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <LinkTimerBefore+0xb8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	79ba      	ldrb	r2, [r7, #6]
 8000788:	429a      	cmp	r2, r3
 800078a:	d032      	beq.n	80007f2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	4927      	ldr	r1, [pc, #156]	; (800082c <LinkTimerBefore+0xbc>)
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	440b      	add	r3, r1
 800079a:	3314      	adds	r3, #20
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007a0:	7bfa      	ldrb	r2, [r7, #15]
 80007a2:	4922      	ldr	r1, [pc, #136]	; (800082c <LinkTimerBefore+0xbc>)
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	440b      	add	r3, r1
 80007ae:	3315      	adds	r3, #21
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	491d      	ldr	r1, [pc, #116]	; (800082c <LinkTimerBefore+0xbc>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	440b      	add	r3, r1
 80007c2:	3315      	adds	r3, #21
 80007c4:	79ba      	ldrb	r2, [r7, #6]
 80007c6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	4918      	ldr	r1, [pc, #96]	; (800082c <LinkTimerBefore+0xbc>)
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3314      	adds	r3, #20
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007dc:	79ba      	ldrb	r2, [r7, #6]
 80007de:	4913      	ldr	r1, [pc, #76]	; (800082c <LinkTimerBefore+0xbc>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	3314      	adds	r3, #20
 80007ec:	79fa      	ldrb	r2, [r7, #7]
 80007ee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80007f0:	e014      	b.n	800081c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	490d      	ldr	r1, [pc, #52]	; (800082c <LinkTimerBefore+0xbc>)
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	3315      	adds	r3, #21
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000806:	79ba      	ldrb	r2, [r7, #6]
 8000808:	4908      	ldr	r1, [pc, #32]	; (800082c <LinkTimerBefore+0xbc>)
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3314      	adds	r3, #20
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	701a      	strb	r2, [r3, #0]
  return;
 800081a:	bf00      	nop
}
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	200000b4 	.word	0x200000b4
 800082c:	20000024 	.word	0x20000024

08000830 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800083a:	4b4e      	ldr	r3, [pc, #312]	; (8000974 <linkTimer+0x144>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b06      	cmp	r3, #6
 8000842:	d118      	bne.n	8000876 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000844:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <linkTimer+0x144>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <linkTimer+0x148>)
 800084c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800084e:	4a49      	ldr	r2, [pc, #292]	; (8000974 <linkTimer+0x144>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	4949      	ldr	r1, [pc, #292]	; (800097c <linkTimer+0x14c>)
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	3315      	adds	r3, #21
 8000864:	2206      	movs	r2, #6
 8000866:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000868:	4b45      	ldr	r3, [pc, #276]	; (8000980 <linkTimer+0x150>)
 800086a:	f04f 32ff 	mov.w	r2, #4294967295
 800086e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	e078      	b.n	8000968 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000876:	f000 f909 	bl	8000a8c <ReturnTimeElapsed>
 800087a:	4603      	mov	r3, r0
 800087c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	493e      	ldr	r1, [pc, #248]	; (800097c <linkTimer+0x14c>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3308      	adds	r3, #8
 800088e:	6819      	ldr	r1, [r3, #0]
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	79fa      	ldrb	r2, [r7, #7]
 8000894:	4419      	add	r1, r3
 8000896:	4839      	ldr	r0, [pc, #228]	; (800097c <linkTimer+0x14c>)
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	4403      	add	r3, r0
 80008a2:	3308      	adds	r3, #8
 80008a4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	4934      	ldr	r1, [pc, #208]	; (800097c <linkTimer+0x14c>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	440b      	add	r3, r1
 80008b4:	3308      	adds	r3, #8
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <linkTimer+0x144>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	4a2e      	ldr	r2, [pc, #184]	; (800097c <linkTimer+0x14c>)
 80008c4:	460b      	mov	r3, r1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	440b      	add	r3, r1
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	3308      	adds	r3, #8
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d337      	bcc.n	8000948 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <linkTimer+0x144>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80008de:	7b7a      	ldrb	r2, [r7, #13]
 80008e0:	4926      	ldr	r1, [pc, #152]	; (800097c <linkTimer+0x14c>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	440b      	add	r3, r1
 80008ec:	3315      	adds	r3, #21
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008f2:	e013      	b.n	800091c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80008f4:	7b7a      	ldrb	r2, [r7, #13]
 80008f6:	4921      	ldr	r1, [pc, #132]	; (800097c <linkTimer+0x14c>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	440b      	add	r3, r1
 8000902:	3315      	adds	r3, #21
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000908:	7b7a      	ldrb	r2, [r7, #13]
 800090a:	491c      	ldr	r1, [pc, #112]	; (800097c <linkTimer+0x14c>)
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	440b      	add	r3, r1
 8000916:	3315      	adds	r3, #21
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800091c:	7b3b      	ldrb	r3, [r7, #12]
 800091e:	2b06      	cmp	r3, #6
 8000920:	d00b      	beq.n	800093a <linkTimer+0x10a>
 8000922:	7b3a      	ldrb	r2, [r7, #12]
 8000924:	4915      	ldr	r1, [pc, #84]	; (800097c <linkTimer+0x14c>)
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	440b      	add	r3, r1
 8000930:	3308      	adds	r3, #8
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	429a      	cmp	r2, r3
 8000938:	d2dc      	bcs.n	80008f4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800093a:	7b7a      	ldrb	r2, [r7, #13]
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fecf 	bl	80006e4 <LinkTimerAfter>
 8000946:	e00f      	b.n	8000968 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <linkTimer+0x144>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff0c 	bl	8000770 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <linkTimer+0x144>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <linkTimer+0x148>)
 8000960:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <linkTimer+0x144>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000968:	89fb      	ldrh	r3, [r7, #14]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000b4 	.word	0x200000b4
 8000978:	200000b5 	.word	0x200000b5
 800097c:	20000024 	.word	0x20000024
 8000980:	200000b8 	.word	0x200000b8

08000984 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000994:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <UnlinkTimer+0xf8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	429a      	cmp	r2, r3
 800099e:	d111      	bne.n	80009c4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009a0:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <UnlinkTimer+0xf8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <UnlinkTimer+0xfc>)
 80009a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	4935      	ldr	r1, [pc, #212]	; (8000a84 <UnlinkTimer+0x100>)
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	440b      	add	r3, r1
 80009b8:	3315      	adds	r3, #21
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <UnlinkTimer+0xf8>)
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e03e      	b.n	8000a42 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	492f      	ldr	r1, [pc, #188]	; (8000a84 <UnlinkTimer+0x100>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	440b      	add	r3, r1
 80009d2:	3314      	adds	r3, #20
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	492a      	ldr	r1, [pc, #168]	; (8000a84 <UnlinkTimer+0x100>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	3315      	adds	r3, #21
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80009ec:	79f9      	ldrb	r1, [r7, #7]
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	4824      	ldr	r0, [pc, #144]	; (8000a84 <UnlinkTimer+0x100>)
 80009f2:	460b      	mov	r3, r1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	440b      	add	r3, r1
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4403      	add	r3, r0
 80009fc:	3315      	adds	r3, #21
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2d8      	uxtb	r0, r3
 8000a02:	4920      	ldr	r1, [pc, #128]	; (8000a84 <UnlinkTimer+0x100>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3315      	adds	r3, #21
 8000a10:	4602      	mov	r2, r0
 8000a12:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a14:	7bbb      	ldrb	r3, [r7, #14]
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d013      	beq.n	8000a42 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a1a:	79f9      	ldrb	r1, [r7, #7]
 8000a1c:	7bba      	ldrb	r2, [r7, #14]
 8000a1e:	4819      	ldr	r0, [pc, #100]	; (8000a84 <UnlinkTimer+0x100>)
 8000a20:	460b      	mov	r3, r1
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	440b      	add	r3, r1
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	4403      	add	r3, r0
 8000a2a:	3314      	adds	r3, #20
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b2d8      	uxtb	r0, r3
 8000a30:	4914      	ldr	r1, [pc, #80]	; (8000a84 <UnlinkTimer+0x100>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3314      	adds	r3, #20
 8000a3e:	4602      	mov	r2, r0
 8000a40:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	490f      	ldr	r1, [pc, #60]	; (8000a84 <UnlinkTimer+0x100>)
 8000a46:	4613      	mov	r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	440b      	add	r3, r1
 8000a50:	330c      	adds	r3, #12
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <UnlinkTimer+0xf8>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b06      	cmp	r3, #6
 8000a5e:	d107      	bne.n	8000a70 <UnlinkTimer+0xec>
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d104      	bne.n	8000a70 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <UnlinkTimer+0x104>)
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
}
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	200000b4 	.word	0x200000b4
 8000a80:	200000b5 	.word	0x200000b5
 8000a84:	20000024 	.word	0x20000024
 8000a88:	200000b8 	.word	0x200000b8

08000a8c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <ReturnTimeElapsed+0x70>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a9a:	d026      	beq.n	8000aea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a9c:	f7ff fe02 	bl	80006a4 <ReadRtcSsrValue>
 8000aa0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <ReturnTimeElapsed+0x70>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d805      	bhi.n	8000ab8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <ReturnTimeElapsed+0x70>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	e00a      	b.n	8000ace <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <ReturnTimeElapsed+0x74>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <ReturnTimeElapsed+0x70>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <ReturnTimeElapsed+0x78>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	fb02 f303 	mul.w	r3, r2, r3
 8000ada:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <ReturnTimeElapsed+0x7c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	40d3      	lsrs	r3, r2
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	e001      	b.n	8000aee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	b29b      	uxth	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000b8 	.word	0x200000b8
 8000b00:	200001ca 	.word	0x200001ca
 8000b04:	200001c9 	.word	0x200001c9
 8000b08:	200001c8 	.word	0x200001c8

08000b0c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d108      	bne.n	8000b2e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b1c:	f7ff fdc2 	bl	80006a4 <ReadRtcSsrValue>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a24      	ldr	r2, [pc, #144]	; (8000bb4 <RestartWakeupCounter+0xa8>)
 8000b24:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f002 f941 	bl	8002dae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b2c:	e03e      	b.n	8000bac <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d803      	bhi.n	8000b3c <RestartWakeupCounter+0x30>
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <RestartWakeupCounter+0xac>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d002      	beq.n	8000b42 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b42:	bf00      	nop
 8000b44:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f7      	beq.n	8000b44 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b68:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <RestartWakeupCounter+0xb4>)
 8000b6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b70:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b72:	2003      	movs	r0, #3
 8000b74:	f002 f929 	bl	8002dca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <RestartWakeupCounter+0xb8>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	0c1b      	lsrs	r3, r3, #16
 8000b7e:	041b      	lsls	r3, r3, #16
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	4910      	ldr	r1, [pc, #64]	; (8000bc4 <RestartWakeupCounter+0xb8>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b88:	f7ff fd8c 	bl	80006a4 <ReadRtcSsrValue>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <RestartWakeupCounter+0xa8>)
 8000b90:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <RestartWakeupCounter+0xb0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ba4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000ba6:	f3af 8000 	nop.w
  return ;
 8000baa:	bf00      	nop
}
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000b8 	.word	0x200000b8
 8000bb8:	200001c8 	.word	0x200001c8
 8000bbc:	200001c4 	.word	0x200001c4
 8000bc0:	58000800 	.word	0x58000800
 8000bc4:	40002800 	.word	0x40002800

08000bc8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <RescheduleTimerList+0x124>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bda:	d108      	bne.n	8000bee <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000bdc:	bf00      	nop
 8000bde:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <RescheduleTimerList+0x128>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f7      	bne.n	8000bde <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000bee:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <RescheduleTimerList+0x128>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <RescheduleTimerList+0x128>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c00:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <RescheduleTimerList+0x12c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	493b      	ldr	r1, [pc, #236]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	3308      	adds	r3, #8
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c1c:	f7ff ff36 	bl	8000a8c <ReturnTimeElapsed>
 8000c20:	4603      	mov	r3, r0
 8000c22:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d205      	bcs.n	8000c38 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c30:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <RescheduleTimerList+0x134>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e04d      	b.n	8000cd4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <RescheduleTimerList+0x138>)
 8000c3c:	8812      	ldrh	r2, [r2, #0]
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	4413      	add	r3, r2
 8000c42:	461a      	mov	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d906      	bls.n	8000c58 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <RescheduleTimerList+0x138>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <RescheduleTimerList+0x134>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e03d      	b.n	8000cd4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c62:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <RescheduleTimerList+0x134>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c68:	e034      	b.n	8000cd4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	4922      	ldr	r1, [pc, #136]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	3308      	adds	r3, #8
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d20a      	bcs.n	8000c98 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	491c      	ldr	r1, [pc, #112]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000c86:	4613      	mov	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	440b      	add	r3, r1
 8000c90:	3308      	adds	r3, #8
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e013      	b.n	8000cc0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c98:	7bfa      	ldrb	r2, [r7, #15]
 8000c9a:	4917      	ldr	r1, [pc, #92]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	6819      	ldr	r1, [r3, #0]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4403      	add	r3, r0
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <RescheduleTimerList+0x130>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	3315      	adds	r3, #21
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d1c7      	bne.n	8000c6a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000cda:	89bb      	ldrh	r3, [r7, #12]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff15 	bl	8000b0c <RestartWakeupCounter>

  return ;
 8000ce2:	bf00      	nop
}
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40002800 	.word	0x40002800
 8000cf0:	200001c4 	.word	0x200001c4
 8000cf4:	200000b4 	.word	0x200000b4
 8000cf8:	20000024 	.word	0x20000024
 8000cfc:	200000bc 	.word	0x200000bc
 8000d00:	200001cc 	.word	0x200001cc

08000d04 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8000d0e:	617b      	str	r3, [r7, #20]
  return(result);
 8000d10:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d18:	4b5f      	ldr	r3, [pc, #380]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	22ca      	movs	r2, #202	; 0xca
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
 8000d22:	4b5d      	ldr	r3, [pc, #372]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2253      	movs	r2, #83	; 0x53
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000d2c:	4b5a      	ldr	r3, [pc, #360]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d3e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d40:	4b56      	ldr	r3, [pc, #344]	; (8000e9c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d4c:	4954      	ldr	r1, [pc, #336]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	330c      	adds	r3, #12
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d172      	bne.n	8000e48 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d62:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d66:	494e      	ldr	r1, [pc, #312]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d76:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d7a:	4949      	ldr	r1, [pc, #292]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	440b      	add	r3, r1
 8000d86:	3310      	adds	r3, #16
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d8c:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d050      	beq.n	8000e38 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d96:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d9a:	4941      	ldr	r1, [pc, #260]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	330d      	adds	r3, #13
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d126      	bne.n	8000dfe <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fde4 	bl	8000984 <UnlinkTimer>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	f383 8810 	msr	PRIMASK, r3
}
 8000dc6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000dc8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dcc:	4934      	ldr	r1, [pc, #208]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fa4e 	bl	8001284 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	22ca      	movs	r2, #202	; 0xca
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2253      	movs	r2, #83	; 0x53
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
 8000dfc:	e014      	b.n	8000e28 <HW_TS_RTC_Wakeup_Handler+0x124>
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f383 8810 	msr	PRIMASK, r3
}
 8000e08:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f9ac 	bl	800116c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e14:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	22ca      	movs	r2, #202	; 0xca
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2253      	movs	r2, #83	; 0x53
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	69b8      	ldr	r0, [r7, #24]
 8000e32:	f000 faaf 	bl	8001394 <HW_TS_RTC_Int_AppNot>
 8000e36:	e025      	b.n	8000e84 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000e38:	f7ff fec6 	bl	8000bc8 <RescheduleTimerList>
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	f383 8810 	msr	PRIMASK, r3
}
 8000e46:	e01d      	b.n	8000e84 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e48:	bf00      	nop
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f7      	beq.n	8000e4a <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e6e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000e72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f383 8810 	msr	PRIMASK, r3
}
 8000e82:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	22ff      	movs	r2, #255	; 0xff
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e8e:	bf00      	nop
}
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001c4 	.word	0x200001c4
 8000e9c:	200000b4 	.word	0x200000b4
 8000ea0:	20000024 	.word	0x20000024
 8000ea4:	200000bc 	.word	0x200000bc
 8000ea8:	58000800 	.word	0x58000800

08000eac <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000eb8:	4a64      	ldr	r2, [pc, #400]	; (800104c <HW_TS_Init+0x1a0>)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ebe:	4b63      	ldr	r3, [pc, #396]	; (800104c <HW_TS_Init+0x1a0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	22ca      	movs	r2, #202	; 0xca
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ec8:	4b60      	ldr	r3, [pc, #384]	; (800104c <HW_TS_Init+0x1a0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2253      	movs	r2, #83	; 0x53
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	; (8001050 <HW_TS_Init+0x1a4>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	4a5e      	ldr	r2, [pc, #376]	; (8001050 <HW_TS_Init+0x1a4>)
 8000ed8:	f043 0320 	orr.w	r3, r3, #32
 8000edc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000ede:	4b5c      	ldr	r3, [pc, #368]	; (8001050 <HW_TS_Init+0x1a4>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f1c3 0304 	rsb	r3, r3, #4
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b58      	ldr	r3, [pc, #352]	; (8001054 <HW_TS_Init+0x1a8>)
 8000ef2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000ef4:	4b56      	ldr	r3, [pc, #344]	; (8001050 <HW_TS_Init+0x1a4>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000efc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000f00:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	fa92 f2a2 	rbit	r2, r2
 8000f08:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d101      	bne.n	8000f18 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000f14:	2220      	movs	r2, #32
 8000f16:	e003      	b.n	8000f20 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	fab2 f282 	clz	r2, r2
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	40d3      	lsrs	r3, r2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <HW_TS_Init+0x1ac>)
 8000f2a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f2c:	4b48      	ldr	r3, [pc, #288]	; (8001050 <HW_TS_Init+0x1a4>)
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b47      	ldr	r3, [pc, #284]	; (800105c <HW_TS_Init+0x1b0>)
 8000f3e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f40:	4b46      	ldr	r3, [pc, #280]	; (800105c <HW_TS_Init+0x1b0>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	4a44      	ldr	r2, [pc, #272]	; (8001058 <HW_TS_Init+0x1ac>)
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	fb02 f303 	mul.w	r3, r2, r3
 8000f4e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <HW_TS_Init+0x1a8>)
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	40d3      	lsrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d904      	bls.n	8000f6e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f64:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <HW_TS_Init+0x1b4>)
 8000f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6a:	801a      	strh	r2, [r3, #0]
 8000f6c:	e003      	b.n	8000f76 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <HW_TS_Init+0x1b4>)
 8000f74:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f7a:	f7ff fb81 	bl	8000680 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f7e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f82:	f7ff fb69 	bl	8000658 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d143      	bne.n	8001014 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f8c:	4b35      	ldr	r3, [pc, #212]	; (8001064 <HW_TS_Init+0x1b8>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f92:	4b35      	ldr	r3, [pc, #212]	; (8001068 <HW_TS_Init+0x1bc>)
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	77fb      	strb	r3, [r7, #31]
 8000f9e:	e00c      	b.n	8000fba <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fa0:	7ffa      	ldrb	r2, [r7, #31]
 8000fa2:	4932      	ldr	r1, [pc, #200]	; (800106c <HW_TS_Init+0x1c0>)
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	330c      	adds	r3, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fb4:	7ffb      	ldrb	r3, [r7, #31]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	77fb      	strb	r3, [r7, #31]
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d9ef      	bls.n	8000fa0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	; (8001070 <HW_TS_Init+0x1c4>)
 8000fc2:	2206      	movs	r2, #6
 8000fc4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <HW_TS_Init+0x1a0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HW_TS_Init+0x1a0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fd8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HW_TS_Init+0x1a0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HW_TS_Init+0x1a0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fee:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HW_TS_Init+0x1c8>)
 8000ff2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f001 fee6 	bl	8002dca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <HW_TS_Init+0x1a0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HW_TS_Init+0x1a0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	e00a      	b.n	800102a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HW_TS_Init+0x1a0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001024:	2003      	movs	r0, #3
 8001026:	f001 fec2 	bl	8002dae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HW_TS_Init+0x1a0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	22ff      	movs	r2, #255	; 0xff
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001034:	2200      	movs	r2, #0
 8001036:	2103      	movs	r1, #3
 8001038:	2003      	movs	r0, #3
 800103a:	f001 fe76 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800103e:	2003      	movs	r0, #3
 8001040:	f001 fe8d 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  return;
 8001044:	bf00      	nop
}
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200001c4 	.word	0x200001c4
 8001050:	40002800 	.word	0x40002800
 8001054:	200001c8 	.word	0x200001c8
 8001058:	200001c9 	.word	0x200001c9
 800105c:	200001ca 	.word	0x200001ca
 8001060:	200001cc 	.word	0x200001cc
 8001064:	200000bc 	.word	0x200000bc
 8001068:	200000b8 	.word	0x200000b8
 800106c:	20000024 	.word	0x20000024
 8001070:	200000b4 	.word	0x200000b4
 8001074:	58000800 	.word	0x58000800

08001078 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001078:	b480      	push	{r7}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800108e:	f3ef 8310 	mrs	r3, PRIMASK
 8001092:	61fb      	str	r3, [r7, #28]
  return(result);
 8001094:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001096:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800109c:	e004      	b.n	80010a8 <HW_TS_Create+0x30>
  {
    loop++;
 800109e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d80c      	bhi.n	80010ca <HW_TS_Create+0x52>
 80010b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010b4:	492c      	ldr	r1, [pc, #176]	; (8001168 <HW_TS_Create+0xf0>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	330c      	adds	r3, #12
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1e9      	bne.n	800109e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d038      	beq.n	8001144 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010d6:	4924      	ldr	r1, [pc, #144]	; (8001168 <HW_TS_Create+0xf0>)
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	330c      	adds	r3, #12
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f383 8810 	msr	PRIMASK, r3
}
 80010f2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80010f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010f8:	491b      	ldr	r1, [pc, #108]	; (8001168 <HW_TS_Create+0xf0>)
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	3310      	adds	r3, #16
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800110a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800110e:	4916      	ldr	r1, [pc, #88]	; (8001168 <HW_TS_Create+0xf0>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	440b      	add	r3, r1
 800111a:	330d      	adds	r3, #13
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001120:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001124:	4910      	ldr	r1, [pc, #64]	; (8001168 <HW_TS_Create+0xf0>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800113a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001142:	e008      	b.n	8001156 <HW_TS_Create+0xde>
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f383 8810 	msr	PRIMASK, r3
}
 800114e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800115a:	4618      	mov	r0, r3
 800115c:	372c      	adds	r7, #44	; 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000024 	.word	0x20000024

0800116c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001176:	f3ef 8310 	mrs	r3, PRIMASK
 800117a:	60fb      	str	r3, [r7, #12]
  return(result);
 800117c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800117e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001184:	2003      	movs	r0, #3
 8001186:	f001 fdf8 	bl	8002d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <HW_TS_Stop+0x100>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	22ca      	movs	r2, #202	; 0xca
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <HW_TS_Stop+0x100>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2253      	movs	r2, #83	; 0x53
 800119c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	4933      	ldr	r1, [pc, #204]	; (8001270 <HW_TS_Stop+0x104>)
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	440b      	add	r3, r1
 80011ac:	330c      	adds	r3, #12
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d148      	bne.n	8001248 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fbe2 	bl	8000984 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <HW_TS_Stop+0x108>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011c6:	7cfb      	ldrb	r3, [r7, #19]
 80011c8:	2b06      	cmp	r3, #6
 80011ca:	d135      	bne.n	8001238 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HW_TS_Stop+0x10c>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d8:	d108      	bne.n	80011ec <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80011da:	bf00      	nop
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <HW_TS_Stop+0x100>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f7      	bne.n	80011dc <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HW_TS_Stop+0x100>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HW_TS_Stop+0x100>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011fe:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001200:	bf00      	nop
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HW_TS_Stop+0x100>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f7      	beq.n	8001202 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <HW_TS_Stop+0x100>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <HW_TS_Stop+0x100>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001226:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <HW_TS_Stop+0x110>)
 800122a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800122e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001230:	2003      	movs	r0, #3
 8001232:	f001 fdca 	bl	8002dca <HAL_NVIC_ClearPendingIRQ>
 8001236:	e007      	b.n	8001248 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HW_TS_Stop+0x114>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	7cfa      	ldrb	r2, [r7, #19]
 8001240:	429a      	cmp	r2, r3
 8001242:	d001      	beq.n	8001248 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001244:	f7ff fcc0 	bl	8000bc8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HW_TS_Stop+0x100>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001252:	2003      	movs	r0, #3
 8001254:	f001 fd83 	bl	8002d5e <HAL_NVIC_EnableIRQ>
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	f383 8810 	msr	PRIMASK, r3
}
 8001262:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001264:	bf00      	nop
}
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200001c4 	.word	0x200001c4
 8001270:	20000024 	.word	0x20000024
 8001274:	200000b4 	.word	0x200000b4
 8001278:	40002800 	.word	0x40002800
 800127c:	58000800 	.word	0x58000800
 8001280:	200000b5 	.word	0x200000b5

08001284 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	493c      	ldr	r1, [pc, #240]	; (8001384 <HW_TS_Start+0x100>)
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	330c      	adds	r3, #12
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d103      	bne.n	80012b0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff5e 	bl	800116c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012b0:	f3ef 8310 	mrs	r3, PRIMASK
 80012b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80012b6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012ba:	b672      	cpsid	i
}
 80012bc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012be:	2003      	movs	r0, #3
 80012c0:	f001 fd5b 	bl	8002d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HW_TS_Start+0x104>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	22ca      	movs	r2, #202	; 0xca
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HW_TS_Start+0x104>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2253      	movs	r2, #83	; 0x53
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012d8:	79fa      	ldrb	r2, [r7, #7]
 80012da:	492a      	ldr	r1, [pc, #168]	; (8001384 <HW_TS_Start+0x100>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	330c      	adds	r3, #12
 80012e8:	2202      	movs	r2, #2
 80012ea:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012ec:	79fa      	ldrb	r2, [r7, #7]
 80012ee:	4925      	ldr	r1, [pc, #148]	; (8001384 <HW_TS_Start+0x100>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	3308      	adds	r3, #8
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001300:	79fa      	ldrb	r2, [r7, #7]
 8001302:	4920      	ldr	r1, [pc, #128]	; (8001384 <HW_TS_Start+0x100>)
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	440b      	add	r3, r1
 800130e:	3304      	adds	r3, #4
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fa8a 	bl	8000830 <linkTimer>
 800131c:	4603      	mov	r3, r0
 800131e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HW_TS_Start+0x108>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <HW_TS_Start+0x10c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	7c7a      	ldrb	r2, [r7, #17]
 800132e:	429a      	cmp	r2, r3
 8001330:	d002      	beq.n	8001338 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001332:	f7ff fc49 	bl	8000bc8 <RescheduleTimerList>
 8001336:	e013      	b.n	8001360 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	4912      	ldr	r1, [pc, #72]	; (8001384 <HW_TS_Start+0x100>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	3308      	adds	r3, #8
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	8a7b      	ldrh	r3, [r7, #18]
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	1ac9      	subs	r1, r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <HW_TS_Start+0x100>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4403      	add	r3, r0
 800135c:	3308      	adds	r3, #8
 800135e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HW_TS_Start+0x104>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	22ff      	movs	r2, #255	; 0xff
 8001368:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800136a:	2003      	movs	r0, #3
 800136c:	f001 fcf7 	bl	8002d5e <HAL_NVIC_EnableIRQ>
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f383 8810 	msr	PRIMASK, r3
}
 800137a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800137c:	bf00      	nop
}
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000024 	.word	0x20000024
 8001388:	200001c4 	.word	0x200001c4
 800138c:	200000b4 	.word	0x200000b4
 8001390:	200000b5 	.word	0x200000b5

08001394 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	460b      	mov	r3, r1
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4798      	blx	r3

  return;
 80013a6:	bf00      	nop
}
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <LL_RCC_LSE_SetDriveCapability>:
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013be:	f023 0218 	bic.w	r2, r3, #24
 80013c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001430:	68fb      	ldr	r3, [r7, #12]
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001446:	f000 fbed 	bl	8001c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144a:	f000 f825 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144e:	f000 f9c1 	bl	80017d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001452:	f000 f9ad 	bl	80017b0 <MX_DMA_Init>
  MX_RF_Init();
 8001456:	f000 f92d 	bl	80016b4 <MX_RF_Init>
  MX_RTC_Init();
 800145a:	f000 f933 	bl	80016c4 <MX_RTC_Init>
  MX_ADC1_Init();
 800145e:	f000 f8c5 	bl	80015ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001462:	f000 f959 	bl	8001718 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t str[] = "Hello World!\r\n";
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <main+0x50>)
 8001468:	463c      	mov	r4, r7
 800146a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146c:	c407      	stmia	r4!, {r0, r1, r2}
 800146e:	8023      	strh	r3, [r4, #0]
 8001470:	3402      	adds	r4, #2
 8001472:	0c1b      	lsrs	r3, r3, #16
 8001474:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit_DMA(&huart1, str, sizeof(str));
 8001476:	463b      	mov	r3, r7
 8001478:	220f      	movs	r2, #15
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <main+0x54>)
 800147e:	f004 f819 	bl	80054b4 <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001482:	f7ff f845 	bl	8000510 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001486:	f04f 30ff 	mov.w	r0, #4294967295
 800148a:	f007 fd25 	bl	8008ed8 <UTIL_SEQ_Run>
 800148e:	e7fa      	b.n	8001486 <main+0x46>
 8001490:	080093b8 	.word	0x080093b8
 8001494:	200002f0 	.word	0x200002f0

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	; 0xb8
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014a2:	2248      	movs	r2, #72	; 0x48
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f007 ff64 	bl	8009374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2250      	movs	r2, #80	; 0x50
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f007 ff54 	bl	8009374 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80014cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014da:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f023 0303 	bic.w	r3, r3, #3
 80014e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014f0:	f002 f89a 	bl	8003628 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ff5a 	bl	80013ae <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <SystemClock_Config+0x150>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001502:	4a39      	ldr	r2, [pc, #228]	; (80015e8 <SystemClock_Config+0x150>)
 8001504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <SystemClock_Config+0x150>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001516:	2327      	movs	r3, #39	; 0x27
 8001518:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001528:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800152a:	2301      	movs	r3, #1
 800152c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001530:	2340      	movs	r3, #64	; 0x40
 8001532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fbff 	bl	8003d50 <HAL_RCC_OscConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001558:	f000 f964 	bl	8001824 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800155c:	236f      	movs	r3, #111	; 0x6f
 800155e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001560:	2302      	movs	r3, #2
 8001562:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001578:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800157c:	2101      	movs	r1, #1
 800157e:	4618      	mov	r0, r3
 8001580:	f002 ff72 	bl	8004468 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800158a:	f000 f94b 	bl	8001824 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800158e:	f643 4301 	movw	r3, #15361	; 0x3c01
 8001592:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001594:	2318      	movs	r3, #24
 8001596:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800159e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80015a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80015aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ae:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015b8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80015c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80015c6:	2302      	movs	r3, #2
 80015c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fb8a 	bl	8004cea <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80015dc:	f000 f922 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80015e0:	bf00      	nop
 80015e2:	37b8      	adds	r7, #184	; 0xb8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	58000400 	.word	0x58000400

080015ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001604:	4a29      	ldr	r2, [pc, #164]	; (80016ac <MX_ADC1_Init+0xc0>)
 8001606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001622:	2204      	movs	r2, #4
 8001624:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001628:	2200      	movs	r2, #0
 800162a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800162e:	2200      	movs	r2, #0
 8001630:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001634:	2201      	movs	r2, #1
 8001636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001648:	2200      	movs	r2, #0
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001656:	2200      	movs	r2, #0
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_ADC1_Init+0xbc>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001664:	f000 fd14 	bl	8002090 <HAL_ADC_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800166e:	f000 f8d9 	bl	8001824 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_ADC1_Init+0xc4>)
 8001674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001676:	2306      	movs	r3, #6
 8001678:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800167e:	237f      	movs	r3, #127	; 0x7f
 8001680:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001682:	2304      	movs	r3, #4
 8001684:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_ADC1_Init+0xbc>)
 8001690:	f000 fe4a 	bl	8002328 <HAL_ADC_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800169a:	f000 f8c3 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200003e0 	.word	0x200003e0
 80016ac:	50040000 	.word	0x50040000
 80016b0:	04300002 	.word	0x04300002

080016b4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_RTC_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_RTC_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_RTC_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_RTC_Init+0x4c>)
 80016d6:	220f      	movs	r2, #15
 80016d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <MX_RTC_Init+0x4c>)
 80016dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_RTC_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_RTC_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_RTC_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_RTC_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_RTC_Init+0x4c>)
 80016fc:	f003 fd7c 	bl	80051f8 <HAL_RTC_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 f88d 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000444 	.word	0x20000444
 8001714:	40002800 	.word	0x40002800

08001718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <MX_USART1_UART_Init+0x94>)
 8001720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001762:	f003 fe57 	bl	8005414 <HAL_UART_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800176c:	f000 f85a 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001774:	f004 fbb0 	bl	8005ed8 <HAL_UARTEx_SetTxFifoThreshold>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800177e:	f000 f851 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001782:	2100      	movs	r1, #0
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001786:	f004 fbe5 	bl	8005f54 <HAL_UARTEx_SetRxFifoThreshold>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001790:	f000 f848 	bl	8001824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001796:	f004 fb66 	bl	8005e66 <HAL_UARTEx_DisableFifoMode>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f000 f840 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200002f0 	.word	0x200002f0
 80017ac:	40013800 	.word	0x40013800

080017b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017b4:	2004      	movs	r0, #4
 80017b6:	f7ff fe10 	bl	80013da <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7ff fe0d 	bl	80013da <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	203a      	movs	r0, #58	; 0x3a
 80017c6:	f001 fab0 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80017ca:	203a      	movs	r0, #58	; 0x3a
 80017cc:	f001 fac7 	bl	8002d5e <HAL_NVIC_EnableIRQ>

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e8:	2004      	movs	r0, #4
 80017ea:	f7ff fe0f 	bl	800140c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7ff fe0c 	bl	800140c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2123      	movs	r1, #35	; 0x23
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_GPIO_Init+0x4c>)
 80017fa:	f001 fed9 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80017fe:	2323      	movs	r3, #35	; 0x23
 8001800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <MX_GPIO_Init+0x4c>)
 8001814:	f001 fd5c 	bl	80032d0 <HAL_GPIO_Init>

}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	48000400 	.word	0x48000400

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	e7fe      	b.n	800182c <Error_Handler+0x8>

0800182e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_AHB2_GRP1_EnableClock>:
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800185e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4313      	orrs	r3, r2
 8001866:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001874:	68fb      	ldr	r3, [r7, #12]
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4313      	orrs	r3, r2
 8001898:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800191c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001920:	f7ff ffaf 	bl	8001882 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	202e      	movs	r0, #46	; 0x2e
 800192a:	f001 f9fe 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800192e:	202e      	movs	r0, #46	; 0x2e
 8001930:	f001 fa15 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_ADC_MspInit+0x50>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d112      	bne.n	8001980 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800195a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800195e:	f7ff ff77 	bl	8001850 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	2004      	movs	r0, #4
 8001964:	f7ff ff74 	bl	8001850 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001968:	2301      	movs	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196c:	2303      	movs	r3, #3
 800196e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	4619      	mov	r1, r3
 800197a:	4804      	ldr	r0, [pc, #16]	; (800198c <HAL_ADC_MspInit+0x54>)
 800197c:	f001 fca8 	bl	80032d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	50040000 	.word	0x50040000
 800198c:	48000800 	.word	0x48000800

08001990 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_RTC_MspInit+0x28>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d105      	bne.n	80019ae <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019a2:	f7ff ff44 	bl	800182e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019aa:	f7ff ff83 	bl	80018b4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40002800 	.word	0x40002800

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_UART_MspInit+0xac>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d13f      	bne.n	8001a5e <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019e2:	f7ff ff80 	bl	80018e6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff ff32 	bl	8001850 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ec:	23c0      	movs	r3, #192	; 0xc0
 80019ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fc:	2307      	movs	r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	4819      	ldr	r0, [pc, #100]	; (8001a6c <HAL_UART_MspInit+0xb0>)
 8001a08:	f001 fc62 	bl	80032d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_UART_MspInit+0xb8>)
 8001a10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a14:	220f      	movs	r2, #15
 8001a16:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a42:	480b      	ldr	r0, [pc, #44]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a44:	f001 f9d0 	bl	8002de8 <HAL_DMA_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8001a4e:	f7ff fee9 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a56:	679a      	str	r2, [r3, #120]	; 0x78
 8001a58:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	20000380 	.word	0x20000380
 8001a74:	40020444 	.word	0x40020444

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f908 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001ad0:	f001 fd86 	bl	80035e0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA2_Channel4_IRQHandler+0x10>)
 8001ade:	f001 faa6 	bl	800302e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000380 	.word	0x20000380

08001aec <RTC_WKUP_IRQHandler>:

*/

void RTC_WKUP_IRQHandler(void)

{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0

HW_TS_RTC_Wakeup_Handler();
 8001af0:	f7ff f908 	bl	8000d04 <HW_TS_RTC_Wakeup_Handler>

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <IPCC_C1_RX_IRQHandler>:

*/

void IPCC_C1_RX_IRQHandler(void)

{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

HW_IPCC_Rx_Handler();
 8001afc:	f007 f856 	bl	8008bac <HW_IPCC_Rx_Handler>

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <IPCC_C1_TX_IRQHandler>:

*/

void IPCC_C1_TX_IRQHandler(void)

{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0

HW_IPCC_Tx_Handler();
 8001b08:	f007 f888 	bl	8008c1c <HW_IPCC_Tx_Handler>

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <SystemInit+0x98>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <SystemInit+0x98>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001b3c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <SystemInit+0x9c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5a:	f023 0305 	bic.w	r3, r3, #5
 8001b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <SystemInit+0xa0>)
 8001b7c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <SystemInit+0xa0>)
 8001b84:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	faf6fefb 	.word	0xfaf6fefb
 8001bb0:	22041000 	.word	0x22041000

08001bb4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001bb4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb8:	3304      	adds	r3, #4

08001bba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001bbe:	d3f9      	bcc.n	8001bb4 <CopyDataInit>
  bx lr
 8001bc0:	4770      	bx	lr

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001bc2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001bc4:	3004      	adds	r0, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001bc6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>
  bx lr
 8001bca:	4770      	bx	lr

08001bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001bce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bd0:	f7ff ff9e 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <LoopForever+0x8>)
 8001bd6:	490c      	ldr	r1, [pc, #48]	; (8001c08 <LoopForever+0xc>)
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <LoopForever+0x10>)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f7ff ffed 	bl	8001bba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <LoopForever+0x14>)
 8001be2:	490c      	ldr	r1, [pc, #48]	; (8001c14 <LoopForever+0x18>)
 8001be4:	2300      	movs	r3, #0
 8001be6:	f7ff ffee 	bl	8001bc6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001bea:	480b      	ldr	r0, [pc, #44]	; (8001c18 <LoopForever+0x1c>)
 8001bec:	490b      	ldr	r1, [pc, #44]	; (8001c1c <LoopForever+0x20>)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f7ff ffe9 	bl	8001bc6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bf4:	f007 fb8c 	bl	8009310 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001bf8:	f7ff fc22 	bl	8001440 <main>

08001bfc <LoopForever>:

LoopForever:
  b LoopForever
 8001bfc:	e7fe      	b.n	8001bfc <LoopForever>
 8001bfe:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001c00:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001c04:	20000004 	.word	0x20000004
 8001c08:	20000024 	.word	0x20000024
 8001c0c:	08009650 	.word	0x08009650
  INIT_BSS _sbss, _ebss
 8001c10:	200001a8 	.word	0x200001a8
 8001c14:	20000664 	.word	0x20000664
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c18:	200301e0 	.word	0x200301e0
 8001c1c:	20030a57 	.word	0x20030a57

08001c20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC1_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_Init+0x3c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_Init+0x3c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	f001 f86a 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c40:	2000      	movs	r0, #0
 8001c42:	f000 f80f 	bl	8001c64 <HAL_InitTick>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	e001      	b.n	8001c56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c52:	f7ff fe61 	bl	8001918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c56:	79fb      	ldrb	r3, [r7, #7]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58004000 	.word	0x58004000

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001c70:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_InitTick+0x6c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d024      	beq.n	8001cc2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c78:	f002 fda2 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_InitTick+0x6c>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c88:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 f880 	bl	8002d96 <HAL_SYSTICK_Config>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10f      	bne.n	8001cbc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	d809      	bhi.n	8001cb6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8001caa:	f001 f83e 	bl	8002d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_InitTick+0x70>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e007      	b.n	8001cc6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	e004      	b.n	8001cc6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e001      	b.n	8001cc6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000000c 	.word	0x2000000c
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000000c 	.word	0x2000000c
 8001cfc:	20000468 	.word	0x20000468

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000468 	.word	0x20000468

08001d18 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_GetTickPrio+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff ffe2 	bl	8001d00 <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffd2 	bl	8001d00 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
    {
    }
  }
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	609a      	str	r2, [r3, #8]
#endif
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3360      	adds	r3, #96	; 0x60
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <LL_ADC_SetOffset+0x44>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	03fff000 	.word	0x03fff000

08001e28 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3360      	adds	r3, #96	; 0x60
 8001e36:	461a      	mov	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3360      	adds	r3, #96	; 0x60
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e7e:	bf00      	nop
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b087      	sub	sp, #28
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3330      	adds	r3, #48	; 0x30
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	4413      	add	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	211f      	movs	r1, #31
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0e9b      	lsrs	r3, r3, #26
 8001ec2:	f003 011f 	and.w	r1, r3, #31
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b087      	sub	sp, #28
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3314      	adds	r3, #20
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	0e5b      	lsrs	r3, r3, #25
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	4413      	add	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0d1b      	lsrs	r3, r3, #20
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2107      	movs	r1, #7
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	0d1b      	lsrs	r3, r3, #20
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	431a      	orrs	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8001f2c:	bf00      	nop
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0318 	and.w	r3, r3, #24
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f5c:	40d9      	lsrs	r1, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	400b      	ands	r3, r1
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	431a      	orrs	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	0007ffff 	.word	0x0007ffff

08001f80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6093      	str	r3, [r2, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fb8:	d101      	bne.n	8001fbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fe0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002008:	d101      	bne.n	800200e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <LL_ADC_IsEnabled+0x18>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <LL_ADC_IsEnabled+0x1a>
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b04      	cmp	r3, #4
 8002054:	d101      	bne.n	800205a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b08      	cmp	r3, #8
 800207a:	d101      	bne.n	8002080 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e12e      	b.n	800230c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d109      	bne.n	80020d0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fc3b 	bl	8001938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff65 	bl	8001fa4 <LL_ADC_IsDeepPowerDownEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff4b 	bl	8001f80 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff80 	bl	8001ff4 <LL_ADC_IsInternalRegulatorEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d115      	bne.n	8002126 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff64 	bl	8001fcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002104:	4b83      	ldr	r3, [pc, #524]	; (8002314 <HAL_ADC_Init+0x284>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	4a83      	ldr	r2, [pc, #524]	; (8002318 <HAL_ADC_Init+0x288>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	3301      	adds	r3, #1
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002118:	e002      	b.n	8002120 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3b01      	subs	r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff62 	bl	8001ff4 <LL_ADC_IsInternalRegulatorEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff73 	bl	8002042 <LL_ADC_REG_IsConversionOngoing>
 800215c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80c7 	bne.w	80022fa <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 80c3 	bne.w	80022fa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff47 	bl	800201c <LL_ADC_IsEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002194:	4861      	ldr	r0, [pc, #388]	; (800231c <HAL_ADC_Init+0x28c>)
 8002196:	f7ff ff41 	bl	800201c <LL_ADC_IsEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4619      	mov	r1, r3
 80021a6:	485e      	ldr	r0, [pc, #376]	; (8002320 <HAL_ADC_Init+0x290>)
 80021a8:	f7ff fde6 	bl	8001d78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e5b      	ldrb	r3, [r3, #25]
 80021b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ca:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80021cc:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	3b01      	subs	r3, #1
 80021e4:	045b      	lsls	r3, r3, #17
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	4b45      	ldr	r3, [pc, #276]	; (8002324 <HAL_ADC_Init+0x294>)
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	69b9      	ldr	r1, [r7, #24]
 8002218:	430b      	orrs	r3, r1
 800221a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff0e 	bl	8002042 <LL_ADC_REG_IsConversionOngoing>
 8002226:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff1b 	bl	8002068 <LL_ADC_INJ_IsConversionOngoing>
 8002232:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d13d      	bne.n	80022b6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d13a      	bne.n	80022b6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002244:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800224c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800225c:	f023 0302 	bic.w	r3, r3, #2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	430b      	orrs	r3, r1
 8002268:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002270:	2b01      	cmp	r3, #1
 8002272:	d118      	bne.n	80022a6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800227e:	f023 0304 	bic.w	r3, r3, #4
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002296:	430a      	orrs	r2, r1
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	611a      	str	r2, [r3, #16]
 80022a4:	e007      	b.n	80022b6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10c      	bne.n	80022d8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	f023 010f 	bic.w	r1, r3, #15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
 80022d6:	e007      	b.n	80022e8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 020f 	bic.w	r2, r2, #15
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	f023 0303 	bic.w	r3, r3, #3
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
 80022f8:	e007      	b.n	800230a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800230a:	7ffb      	ldrb	r3, [r7, #31]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000004 	.word	0x20000004
 8002318:	053e2d63 	.word	0x053e2d63
 800231c:	50040000 	.word	0x50040000
 8002320:	50040300 	.word	0x50040300
 8002324:	fff0c007 	.word	0xfff0c007

08002328 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0b6      	sub	sp, #216	; 0xd8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x22>
 8002346:	2302      	movs	r3, #2
 8002348:	e39f      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x762>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fe73 	bl	8002042 <LL_ADC_REG_IsConversionOngoing>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8384 	bne.w	8002a6c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	f7ff fd8a 	bl	8001e8a <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fe61 	bl	8002042 <LL_ADC_REG_IsConversionOngoing>
 8002380:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe6d 	bl	8002068 <LL_ADC_INJ_IsConversionOngoing>
 800238e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 81a6 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800239c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 81a1 	bne.w	80026e8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff fd95 	bl	8001ee2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d00a      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023ea:	f7ff fcf9 	bl	8001de0 <LL_ADC_SetOffset>
 80023ee:	e17b      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fd16 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_ADC_ConfigChannel+0xf4>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fd0b 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	e01e      	b.n	800245a <HAL_ADC_ConfigChannel+0x132>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fd00 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800243a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800243e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e004      	b.n	8002458 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800244e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x14a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x17c>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800248a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800248e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800249a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fccf 	bl	8001e54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fcb3 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x1ba>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fca8 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	e01e      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1f8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fc9d 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002500:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002504:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e004      	b.n	800251e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x210>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	e018      	b.n	800256a <HAL_ADC_ConfigChannel+0x242>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800254c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e004      	b.n	800256a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	429a      	cmp	r2, r3
 800256c:	d106      	bne.n	800257c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fc6c 	bl	8001e54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2102      	movs	r1, #2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fc50 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x280>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fc45 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 021f 	and.w	r2, r3, #31
 80025a6:	e01e      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x2be>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fc3a 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80025d6:	2320      	movs	r3, #32
 80025d8:	e004      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80025da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x2d6>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	e016      	b.n	800262c <HAL_ADC_ConfigChannel+0x304>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e004      	b.n	800262c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	429a      	cmp	r2, r3
 800262e:	d106      	bne.n	800263e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fc0b 	bl	8001e54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2103      	movs	r1, #3
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fbef 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x342>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fbe4 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	e017      	b.n	800269a <HAL_ADC_ConfigChannel+0x372>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2103      	movs	r1, #3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fbd9 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002684:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x38a>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	e011      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x3ae>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d106      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	2103      	movs	r1, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fbb6 	bl	8001e54 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fc95 	bl	800201c <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 81c2 	bne.w	8002a7e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	461a      	mov	r2, r3
 8002708:	f7ff fc16 	bl	8001f38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a8e      	ldr	r2, [pc, #568]	; (800294c <HAL_ADC_ConfigChannel+0x624>)
 8002712:	4293      	cmp	r3, r2
 8002714:	f040 8130 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x418>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e9b      	lsrs	r3, r3, #26
 800272e:	3301      	adds	r3, #1
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	2b09      	cmp	r3, #9
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e019      	b.n	8002774 <HAL_ADC_ConfigChannel+0x44c>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800274e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002750:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800275c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b09      	cmp	r3, #9
 800276c:	bf94      	ite	ls
 800276e:	2301      	movls	r3, #1
 8002770:	2300      	movhi	r3, #0
 8002772:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002774:	2b00      	cmp	r3, #0
 8002776:	d079      	beq.n	800286c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d107      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x46c>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	3301      	adds	r3, #1
 800278c:	069b      	lsls	r3, r3, #26
 800278e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002792:	e015      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x498>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e003      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	069b      	lsls	r3, r3, #26
 80027bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x4b8>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	e017      	b.n	8002810 <HAL_ADC_ConfigChannel+0x4e8>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e003      	b.n	8002804 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2101      	movs	r1, #1
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	ea42 0103 	orr.w	r1, r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x50e>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	051b      	lsls	r3, r3, #20
 8002834:	e018      	b.n	8002868 <HAL_ADC_ConfigChannel+0x540>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002868:	430b      	orrs	r3, r1
 800286a:	e080      	b.n	800296e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x560>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	3301      	adds	r3, #1
 8002880:	069b      	lsls	r3, r3, #26
 8002882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002886:	e015      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x58c>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	069b      	lsls	r3, r3, #26
 80028b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x5ac>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	e017      	b.n	8002904 <HAL_ADC_ConfigChannel+0x5dc>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	61fb      	str	r3, [r7, #28]
  return result;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e003      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	ea42 0103 	orr.w	r1, r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x608>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	3301      	adds	r3, #1
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	3b1e      	subs	r3, #30
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800292e:	e01d      	b.n	800296c <HAL_ADC_ConfigChannel+0x644>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	613b      	str	r3, [r7, #16]
  return result;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e005      	b.n	8002958 <HAL_ADC_ConfigChannel+0x630>
 800294c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f003 021f 	and.w	r2, r3, #31
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	3b1e      	subs	r3, #30
 8002966:	051b      	lsls	r3, r3, #20
 8002968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	430b      	orrs	r3, r1
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	4619      	mov	r1, r3
 8002974:	f7ff fab5 	bl	8001ee2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b45      	ldr	r3, [pc, #276]	; (8002a94 <HAL_ADC_ConfigChannel+0x76c>)
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d07c      	beq.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002984:	4844      	ldr	r0, [pc, #272]	; (8002a98 <HAL_ADC_ConfigChannel+0x770>)
 8002986:	f7ff fa1d 	bl	8001dc4 <LL_ADC_GetCommonPathInternalCh>
 800298a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800298e:	4843      	ldr	r0, [pc, #268]	; (8002a9c <HAL_ADC_ConfigChannel+0x774>)
 8002990:	f7ff fb44 	bl	800201c <LL_ADC_IsEnabled>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d15e      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <HAL_ADC_ConfigChannel+0x778>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d127      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x6cc>
 80029a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d121      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a39      	ldr	r2, [pc, #228]	; (8002a9c <HAL_ADC_ConfigChannel+0x774>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d161      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c2:	4619      	mov	r1, r3
 80029c4:	4834      	ldr	r0, [pc, #208]	; (8002a98 <HAL_ADC_ConfigChannel+0x770>)
 80029c6:	f7ff f9ea 	bl	8001d9e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_ADC_ConfigChannel+0x77c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	4a35      	ldr	r2, [pc, #212]	; (8002aa8 <HAL_ADC_ConfigChannel+0x780>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f2:	e044      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <HAL_ADC_ConfigChannel+0x784>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d113      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x6fe>
 80029fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_ADC_ConfigChannel+0x774>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d134      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	481e      	ldr	r0, [pc, #120]	; (8002a98 <HAL_ADC_ConfigChannel+0x770>)
 8002a20:	f7ff f9bd 	bl	8001d9e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a24:	e02b      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_ADC_ConfigChannel+0x788>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d126      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
 8002a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d120      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_ADC_ConfigChannel+0x774>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d11b      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4811      	ldr	r0, [pc, #68]	; (8002a98 <HAL_ADC_ConfigChannel+0x770>)
 8002a52:	f7ff f9a4 	bl	8001d9e <LL_ADC_SetCommonPathInternalCh>
 8002a56:	e012      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a6a:	e008      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002a86:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	37d8      	adds	r7, #216	; 0xd8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	80080000 	.word	0x80080000
 8002a98:	50040300 	.word	0x50040300
 8002a9c:	50040000 	.word	0x50040000
 8002aa0:	c7520000 	.word	0xc7520000
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	053e2d63 	.word	0x053e2d63
 8002aac:	cb840000 	.word	0xcb840000
 8002ab0:	80000001 	.word	0x80000001

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	60d3      	str	r3, [r2, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4907      	ldr	r1, [pc, #28]	; (8002b50 <__NVIC_EnableIRQ+0x38>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db12      	blt.n	8002b8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	490a      	ldr	r1, [pc, #40]	; (8002b98 <__NVIC_DisableIRQ+0x44>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	3320      	adds	r3, #32
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b80:	f3bf 8f4f 	dsb	sy
}
 8002b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b86:	f3bf 8f6f 	isb	sy
}
 8002b8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0c      	blt.n	8002bc8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <__NVIC_SetPendingIRQ+0x38>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	3340      	adds	r3, #64	; 0x40
 8002bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	db0c      	blt.n	8002c04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4907      	ldr	r1, [pc, #28]	; (8002c10 <__NVIC_ClearPendingIRQ+0x38>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfe:	3360      	adds	r3, #96	; 0x60
 8002c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	; (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff8e 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fec9 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d38:	f7ff fee0 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f7ff ff90 	bl	8002c68 <NVIC_EncodePriority>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff5f 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fed3 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fee3 	bl	8002b54 <__NVIC_DisableIRQ>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff96 	bl	8002cd0 <SysTick_Config>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff feed 	bl	8002b9c <__NVIC_SetPendingIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fefd 	bl	8002bd8 <__NVIC_ClearPendingIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e08e      	b.n	8002f18 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_DMA_Init+0x138>)
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d80f      	bhi.n	8002e26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <HAL_DMA_Init+0x13c>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a45      	ldr	r2, [pc, #276]	; (8002f28 <HAL_DMA_Init+0x140>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	009a      	lsls	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a42      	ldr	r2, [pc, #264]	; (8002f2c <HAL_DMA_Init+0x144>)
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
 8002e24:	e00e      	b.n	8002e44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <HAL_DMA_Init+0x148>)
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a3d      	ldr	r2, [pc, #244]	; (8002f28 <HAL_DMA_Init+0x140>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	009a      	lsls	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a3c      	ldr	r2, [pc, #240]	; (8002f34 <HAL_DMA_Init+0x14c>)
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9b6 	bl	8003208 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea4:	d102      	bne.n	8002eac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ec2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_DMA_Init+0x106>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d80c      	bhi.n	8002eee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f9d5 	bl	8003284 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	e008      	b.n	8002f00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40020407 	.word	0x40020407
 8002f24:	bffdfff8 	.word	0xbffdfff8
 8002f28:	cccccccd 	.word	0xcccccccd
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	bffdfbf8 	.word	0xbffdfbf8
 8002f34:	40020400 	.word	0x40020400

08002f38 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA_Start_IT+0x20>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e066      	b.n	8003026 <HAL_DMA_Start_IT+0xee>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d155      	bne.n	8003018 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f8fb 	bl	800318c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 020e 	orr.w	r2, r2, #14
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e00f      	b.n	8002fd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 020a 	orr.w	r2, r2, #10
 8002fce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003004:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e005      	b.n	8003024 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003020:	2302      	movs	r3, #2
 8003022:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f003 031c 	and.w	r3, r3, #28
 800304e:	2204      	movs	r2, #4
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d026      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x7a>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d021      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d107      	bne.n	8003082 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0204 	bic.w	r2, r2, #4
 8003080:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f003 021c 	and.w	r2, r3, #28
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2104      	movs	r1, #4
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	2b00      	cmp	r3, #0
 800309c:	d071      	beq.n	8003182 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80030a6:	e06c      	b.n	8003182 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	f003 031c 	and.w	r3, r3, #28
 80030b0:	2202      	movs	r2, #2
 80030b2:	409a      	lsls	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02e      	beq.n	800311a <HAL_DMA_IRQHandler+0xec>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d029      	beq.n	800311a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 020a 	bic.w	r2, r2, #10
 80030e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	f003 021c 	and.w	r2, r3, #28
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2102      	movs	r1, #2
 80030fa:	fa01 f202 	lsl.w	r2, r1, r2
 80030fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d038      	beq.n	8003182 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003118:	e033      	b.n	8003182 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f003 031c 	and.w	r3, r3, #28
 8003122:	2208      	movs	r2, #8
 8003124:	409a      	lsls	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d02a      	beq.n	8003184 <HAL_DMA_IRQHandler+0x156>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d025      	beq.n	8003184 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020e 	bic.w	r2, r2, #14
 8003146:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f003 021c 	and.w	r2, r3, #28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2101      	movs	r1, #1
 8003156:	fa01 f202 	lsl.w	r2, r1, r2
 800315a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003182:	bf00      	nop
 8003184:	bf00      	nop
}
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f003 021c 	and.w	r2, r3, #28
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f202 	lsl.w	r2, r1, r2
 80031c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d108      	bne.n	80031ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031ea:	e007      	b.n	80031fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003218:	429a      	cmp	r2, r3
 800321a:	d80a      	bhi.n	8003232 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003228:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6493      	str	r3, [r2, #72]	; 0x48
 8003230:	e007      	b.n	8003242 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	009a      	lsls	r2, r3, #2
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800323c:	4413      	add	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3b08      	subs	r3, #8
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003258:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2201      	movs	r2, #1
 8003262:	409a      	lsls	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40020407 	.word	0x40020407
 8003278:	4002081c 	.word	0x4002081c
 800327c:	cccccccd 	.word	0xcccccccd
 8003280:	40020880 	.word	0x40020880

08003284 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003294:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	461a      	mov	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80032a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2201      	movs	r2, #1
 80032b4:	409a      	lsls	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	1000823f 	.word	0x1000823f
 80032cc:	40020940 	.word	0x40020940

080032d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032de:	e14c      	b.n	800357a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 813e 	beq.w	8003574 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d00b      	beq.n	8003318 <HAL_GPIO_Init+0x48>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d007      	beq.n	8003318 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800330c:	2b11      	cmp	r3, #17
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b12      	cmp	r3, #18
 8003316:	d130      	bne.n	800337a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800334e:	2201      	movs	r2, #1
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 0201 	and.w	r2, r3, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	2203      	movs	r2, #3
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0xea>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b12      	cmp	r3, #18
 80033b8:	d123      	bne.n	8003402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	08da      	lsrs	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3208      	adds	r2, #8
 80033c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	6939      	ldr	r1, [r7, #16]
 80033fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0203 	and.w	r2, r3, #3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8098 	beq.w	8003574 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003444:	4a54      	ldr	r2, [pc, #336]	; (8003598 <HAL_GPIO_Init+0x2c8>)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3302      	adds	r3, #2
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800346e:	d019      	beq.n	80034a4 <HAL_GPIO_Init+0x1d4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a4a      	ldr	r2, [pc, #296]	; (800359c <HAL_GPIO_Init+0x2cc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <HAL_GPIO_Init+0x1d0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a49      	ldr	r2, [pc, #292]	; (80035a0 <HAL_GPIO_Init+0x2d0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00d      	beq.n	800349c <HAL_GPIO_Init+0x1cc>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a48      	ldr	r2, [pc, #288]	; (80035a4 <HAL_GPIO_Init+0x2d4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d007      	beq.n	8003498 <HAL_GPIO_Init+0x1c8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a47      	ldr	r2, [pc, #284]	; (80035a8 <HAL_GPIO_Init+0x2d8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_GPIO_Init+0x1c4>
 8003490:	2304      	movs	r3, #4
 8003492:	e008      	b.n	80034a6 <HAL_GPIO_Init+0x1d6>
 8003494:	2307      	movs	r3, #7
 8003496:	e006      	b.n	80034a6 <HAL_GPIO_Init+0x1d6>
 8003498:	2303      	movs	r3, #3
 800349a:	e004      	b.n	80034a6 <HAL_GPIO_Init+0x1d6>
 800349c:	2302      	movs	r3, #2
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_Init+0x1d6>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_GPIO_Init+0x1d6>
 80034a4:	2300      	movs	r3, #0
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	f002 0203 	and.w	r2, r2, #3
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4093      	lsls	r3, r2
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b6:	4938      	ldr	r1, [pc, #224]	; (8003598 <HAL_GPIO_Init+0x2c8>)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034c4:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_GPIO_Init+0x2dc>)
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ea:	4a30      	ldr	r2, [pc, #192]	; (80035ac <HAL_GPIO_Init+0x2dc>)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80034f2:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_GPIO_Init+0x2dc>)
 80034f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003518:	4a24      	ldr	r2, [pc, #144]	; (80035ac <HAL_GPIO_Init+0x2dc>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003520:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_GPIO_Init+0x2dc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003544:	4a19      	ldr	r2, [pc, #100]	; (80035ac <HAL_GPIO_Init+0x2dc>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_GPIO_Init+0x2dc>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800356e:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <HAL_GPIO_Init+0x2dc>)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3301      	adds	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f aeab 	bne.w	80032e0 <HAL_GPIO_Init+0x10>
  }
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40010000 	.word	0x40010000
 800359c:	48000400 	.word	0x48000400
 80035a0:	48000800 	.word	0x48000800
 80035a4:	48000c00 	.word	0x48000c00
 80035a8:	48001000 	.word	0x48001000
 80035ac:	58000800 	.word	0x58000800

080035b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
 80035bc:	4613      	mov	r3, r2
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035cc:	e002      	b.n	80035d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_HSEM_IRQHandler+0x30>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <HAL_HSEM_IRQHandler+0x30>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <HAL_HSEM_IRQHandler+0x30>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80035fa:	4a05      	ldr	r2, [pc, #20]	; (8003610 <HAL_HSEM_IRQHandler+0x30>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f807 	bl	8003614 <HAL_HSEM_FreeCallback>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	58001500 	.word	0x58001500

08003614 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	58000400 	.word	0x58000400

08003648 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_PWREx_GetVoltageRange+0x18>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	58000400 	.word	0x58000400

08003664 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003676:	d101      	bne.n	800367c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_RCC_HSE_Enable>:
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800368c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
}
 800369c:	bf00      	nop
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_RCC_HSE_Disable>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80036aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_RCC_HSE_IsReady>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80036c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036d6:	d101      	bne.n	80036dc <LL_RCC_HSE_IsReady+0x18>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <LL_RCC_HSE_IsReady+0x1a>
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_RCC_HSI_Enable>:
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80036ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]
}
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_RCC_HSI_Disable>:
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800370a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_RCC_HSI_IsReady>:
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d101      	bne.n	800373c <LL_RCC_HSI_IsReady+0x18>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <LL_RCC_HSI_IsReady+0x1a>
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <LL_RCC_HSI48_Enable>:
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_RCC_HSI48_Disable>:
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_RCC_HSI48_IsReady>:
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80037ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d101      	bne.n	80037ce <LL_RCC_HSI48_IsReady+0x18>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <LL_RCC_HSI48_IsReady+0x1a>
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LL_RCC_LSE_Enable>:
{
 80037da:	b480      	push	{r7}
 80037dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037f2:	bf00      	nop
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_RCC_LSE_Disable>:
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_RCC_LSE_EnableBypass>:
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003836:	bf00      	nop
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_RCC_LSE_DisableBypass>:
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_RCC_LSE_IsReady>:
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b02      	cmp	r3, #2
 8003874:	d101      	bne.n	800387a <LL_RCC_LSE_IsReady+0x18>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <LL_RCC_LSE_IsReady+0x1a>
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_RCC_LSI1_Enable>:
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_RCC_LSI1_Disable>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80038ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_RCC_LSI1_IsReady>:
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d101      	bne.n	80038e2 <LL_RCC_LSI1_IsReady+0x18>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <LL_RCC_LSI1_IsReady+0x1a>
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <LL_RCC_LSI2_Enable>:
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80038f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_RCC_LSI2_Disable>:
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003920:	f023 0304 	bic.w	r3, r3, #4
 8003924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <LL_RCC_LSI2_IsReady>:
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b08      	cmp	r3, #8
 8003944:	d101      	bne.n	800394a <LL_RCC_LSI2_IsReady+0x18>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <LL_RCC_LSI2_IsReady+0x1a>
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_RCC_LSI2_SetTrimming>:
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800395e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003966:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_RCC_MSI_Enable>:
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_RCC_MSI_Disable>:
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6013      	str	r3, [r2, #0]
}
 80039b6:	bf00      	nop
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_RCC_MSI_IsReady>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d101      	bne.n	80039d6 <LL_RCC_MSI_IsReady+0x16>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <LL_RCC_MSI_IsReady+0x18>
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_RCC_MSI_SetRange>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_RCC_MSI_GetRange>:
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2bb0      	cmp	r3, #176	; 0xb0
 8003a20:	d901      	bls.n	8003a26 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003a22:	23b0      	movs	r3, #176	; 0xb0
 8003a24:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003a26:	687b      	ldr	r3, [r7, #4]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_RCC_SetSysClkSource>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 0203 	bic.w	r2, r3, #3
 8003a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_RCC_GetSysClkSource>:
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_SetAHBPrescaler>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_RCC_SetAHB4Prescaler>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b02:	f023 020f 	bic.w	r2, r3, #15
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_SetAPB1Prescaler>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_SetAPB2Prescaler>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_RCC_GetAHBPrescaler>:
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_RCC_GetAHB4Prescaler>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_GetAPB1Prescaler>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_RCC_GetAPB2Prescaler>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be6:	6013      	str	r3, [r2, #0]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c04:	6013      	str	r3, [r2, #0]
}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c22:	d101      	bne.n	8003c28 <LL_RCC_PLL_IsReady+0x18>
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <LL_RCC_PLL_IsReady+0x1a>
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003c66:	b480      	push	{r7}
 8003c68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0303 	and.w	r3, r3, #3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca8:	d101      	bne.n	8003cae <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cce:	d101      	bne.n	8003cd4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d101      	bne.n	8003cfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d18:	d101      	bne.n	8003d1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d3c:	d101      	bne.n	8003d42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b08d      	sub	sp, #52	; 0x34
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e37e      	b.n	8004460 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8092 	beq.w	8003e94 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d70:	f7ff fe89 	bl	8003a86 <LL_RCC_GetSysClkSource>
 8003d74:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d76:	f7ff ff82 	bl	8003c7e <LL_RCC_PLL_GetMainSource>
 8003d7a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x3e>
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	2b0c      	cmp	r3, #12
 8003d86:	d14c      	bne.n	8003e22 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d149      	bne.n	8003e22 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d8e:	f7ff fe17 	bl	80039c0 <LL_RCC_MSI_IsReady>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_OscConfig+0x54>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e35d      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003da8:	f7ff fe2f 	bl	8003a0a <LL_RCC_MSI_GetRange>
 8003dac:	4603      	mov	r3, r0
 8003dae:	429c      	cmp	r4, r3
 8003db0:	d914      	bls.n	8003ddc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fd42 	bl	8004840 <RCC_SetFlashLatencyFromMSIRange>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e34c      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fe09 	bl	80039e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fe2d 	bl	8003a34 <LL_RCC_MSI_SetCalibTrimming>
 8003dda:	e013      	b.n	8003e04 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fdfe 	bl	80039e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fe22 	bl	8003a34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fd23 	bl	8004840 <RCC_SetFlashLatencyFromMSIRange>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e32d      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003e04:	f000 fcdc 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4ab3      	ldr	r2, [pc, #716]	; (80040d8 <HAL_RCC_OscConfig+0x388>)
 8003e0c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e0e:	4bb3      	ldr	r3, [pc, #716]	; (80040dc <HAL_RCC_OscConfig+0x38c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd ff26 	bl	8001c64 <HAL_InitTick>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d039      	beq.n	8003e92 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e31e      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01e      	beq.n	8003e68 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e2a:	f7ff fdab 	bl	8003984 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e2e:	f7fd ff67 	bl	8001d00 <HAL_GetTick>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e36:	f7fd ff63 	bl	8001d00 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e30b      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003e48:	f7ff fdba 	bl	80039c0 <LL_RCC_MSI_IsReady>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f1      	beq.n	8003e36 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fdc3 	bl	80039e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fde7 	bl	8003a34 <LL_RCC_MSI_SetCalibTrimming>
 8003e66:	e015      	b.n	8003e94 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e68:	f7ff fd9b 	bl	80039a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e6c:	f7fd ff48 	bl	8001d00 <HAL_GetTick>
 8003e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e74:	f7fd ff44 	bl	8001d00 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e2ec      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e86:	f7ff fd9b 	bl	80039c0 <LL_RCC_MSI_IsReady>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1f1      	bne.n	8003e74 <HAL_RCC_OscConfig+0x124>
 8003e90:	e000      	b.n	8003e94 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d04e      	beq.n	8003f3e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea0:	f7ff fdf1 	bl	8003a86 <LL_RCC_GetSysClkSource>
 8003ea4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea6:	f7ff feea 	bl	8003c7e <LL_RCC_PLL_GetMainSource>
 8003eaa:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x16e>
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d10d      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebe:	f7ff fc01 	bl	80036c4 <LL_RCC_HSE_IsReady>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d039      	beq.n	8003f3c <HAL_RCC_OscConfig+0x1ec>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d135      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e2c5      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d102      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x194>
 8003ede:	f7ff fbd3 	bl	8003688 <LL_RCC_HSE_Enable>
 8003ee2:	e001      	b.n	8003ee8 <HAL_RCC_OscConfig+0x198>
 8003ee4:	f7ff fbdf 	bl	80036a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d012      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd ff06 	bl	8001d00 <HAL_GetTick>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd ff02 	bl	8001d00 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e2aa      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003f0a:	f7ff fbdb 	bl	80036c4 <LL_RCC_HSE_IsReady>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f1      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x1a8>
 8003f14:	e013      	b.n	8003f3e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd fef3 	bl	8001d00 <HAL_GetTick>
 8003f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1e:	f7fd feef 	bl	8001d00 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b64      	cmp	r3, #100	; 0x64
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e297      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f30:	f7ff fbc8 	bl	80036c4 <LL_RCC_HSE_IsReady>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f1      	bne.n	8003f1e <HAL_RCC_OscConfig+0x1ce>
 8003f3a:	e000      	b.n	8003f3e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d051      	beq.n	8003fee <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4a:	f7ff fd9c 	bl	8003a86 <LL_RCC_GetSysClkSource>
 8003f4e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f50:	f7ff fe95 	bl	8003c7e <LL_RCC_PLL_GetMainSource>
 8003f54:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_OscConfig+0x218>
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d113      	bne.n	8003f8a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d110      	bne.n	8003f8a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f68:	f7ff fbdc 	bl	8003724 <LL_RCC_HSI_IsReady>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x22e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e270      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fbe0 	bl	8003748 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f88:	e031      	b.n	8003fee <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d019      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f92:	f7ff fba9 	bl	80036e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fd feb3 	bl	8001d00 <HAL_GetTick>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9e:	f7fd feaf 	bl	8001d00 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e257      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003fb0:	f7ff fbb8 	bl	8003724 <LL_RCC_HSI_IsReady>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f1      	beq.n	8003f9e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fbc2 	bl	8003748 <LL_RCC_HSI_SetCalibTrimming>
 8003fc4:	e013      	b.n	8003fee <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc6:	f7ff fb9e 	bl	8003706 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fd fe99 	bl	8001d00 <HAL_GetTick>
 8003fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fe95 	bl	8001d00 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e23d      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003fe4:	f7ff fb9e 	bl	8003724 <LL_RCC_HSI_IsReady>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f1      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a3 	beq.w	800414e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d076      	beq.n	80040fe <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d046      	beq.n	80040aa <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800401c:	f7ff fc55 	bl	80038ca <LL_RCC_LSI1_IsReady>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d113      	bne.n	800404e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004026:	f7ff fc2e 	bl	8003886 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800402a:	f7fd fe69 	bl	8001d00 <HAL_GetTick>
 800402e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004032:	f7fd fe65 	bl	8001d00 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e20d      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004044:	f7ff fc41 	bl	80038ca <LL_RCC_LSI1_IsReady>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f1      	beq.n	8004032 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800404e:	f7ff fc4e 	bl	80038ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fd fe55 	bl	8001d00 <HAL_GetTick>
 8004056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800405a:	f7fd fe51 	bl	8001d00 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b03      	cmp	r3, #3
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e1f9      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800406c:	f7ff fc61 	bl	8003932 <LL_RCC_LSI2_IsReady>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f1      	beq.n	800405a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fc6b 	bl	8003956 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004080:	f7ff fc12 	bl	80038a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fd fe3c 	bl	8001d00 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800408c:	f7fd fe38 	bl	8001d00 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e1e0      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800409e:	f7ff fc14 	bl	80038ca <LL_RCC_LSI1_IsReady>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f1      	bne.n	800408c <HAL_RCC_OscConfig+0x33c>
 80040a8:	e051      	b.n	800414e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80040aa:	f7ff fbec 	bl	8003886 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7fd fe27 	bl	8001d00 <HAL_GetTick>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040b6:	f7fd fe23 	bl	8001d00 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1cb      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80040c8:	f7ff fbff 	bl	80038ca <LL_RCC_LSI1_IsReady>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f1      	beq.n	80040b6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80040d2:	f7ff fc1d 	bl	8003910 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80040d6:	e00c      	b.n	80040f2 <HAL_RCC_OscConfig+0x3a2>
 80040d8:	20000004 	.word	0x20000004
 80040dc:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040e0:	f7fd fe0e 	bl	8001d00 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e1b6      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80040f2:	f7ff fc1e 	bl	8003932 <LL_RCC_LSI2_IsReady>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f1      	bne.n	80040e0 <HAL_RCC_OscConfig+0x390>
 80040fc:	e027      	b.n	800414e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80040fe:	f7ff fc07 	bl	8003910 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fd fdfd 	bl	8001d00 <HAL_GetTick>
 8004106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800410a:	f7fd fdf9 	bl	8001d00 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b03      	cmp	r3, #3
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e1a1      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800411c:	f7ff fc09 	bl	8003932 <LL_RCC_LSI2_IsReady>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f1      	bne.n	800410a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004126:	f7ff fbbf 	bl	80038a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fd fde9 	bl	8001d00 <HAL_GetTick>
 800412e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004132:	f7fd fde5 	bl	8001d00 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e18d      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004144:	f7ff fbc1 	bl	80038ca <LL_RCC_LSI1_IsReady>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f1      	bne.n	8004132 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d05b      	beq.n	8004212 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415a:	4bb5      	ldr	r3, [pc, #724]	; (8004430 <HAL_RCC_OscConfig+0x6e0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d114      	bne.n	8004190 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004166:	f7ff fa5f 	bl	8003628 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416a:	f7fd fdc9 	bl	8001d00 <HAL_GetTick>
 800416e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004172:	f7fd fdc5 	bl	8001d00 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e16d      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004184:	4baa      	ldr	r3, [pc, #680]	; (8004430 <HAL_RCC_OscConfig+0x6e0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <HAL_RCC_OscConfig+0x44e>
 8004198:	f7ff fb1f 	bl	80037da <LL_RCC_LSE_Enable>
 800419c:	e00c      	b.n	80041b8 <HAL_RCC_OscConfig+0x468>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d104      	bne.n	80041b0 <HAL_RCC_OscConfig+0x460>
 80041a6:	f7ff fb3a 	bl	800381e <LL_RCC_LSE_EnableBypass>
 80041aa:	f7ff fb16 	bl	80037da <LL_RCC_LSE_Enable>
 80041ae:	e003      	b.n	80041b8 <HAL_RCC_OscConfig+0x468>
 80041b0:	f7ff fb24 	bl	80037fc <LL_RCC_LSE_Disable>
 80041b4:	f7ff fb44 	bl	8003840 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d014      	beq.n	80041ea <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fd fd9e 	bl	8001d00 <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80041c6:	e00a      	b.n	80041de <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fd fd9a 	bl	8001d00 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e140      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80041de:	f7ff fb40 	bl	8003862 <LL_RCC_LSE_IsReady>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ef      	beq.n	80041c8 <HAL_RCC_OscConfig+0x478>
 80041e8:	e013      	b.n	8004212 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fd fd89 	bl	8001d00 <HAL_GetTick>
 80041ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd fd85 	bl	8001d00 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e12b      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004208:	f7ff fb2b 	bl	8003862 <LL_RCC_LSE_IsReady>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1ef      	bne.n	80041f2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d02c      	beq.n	8004278 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d014      	beq.n	8004250 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004226:	f7ff faa4 	bl	8003772 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422a:	f7fd fd69 	bl	8001d00 <HAL_GetTick>
 800422e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004232:	f7fd fd65 	bl	8001d00 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e10d      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004244:	f7ff fab7 	bl	80037b6 <LL_RCC_HSI48_IsReady>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f1      	beq.n	8004232 <HAL_RCC_OscConfig+0x4e2>
 800424e:	e013      	b.n	8004278 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004250:	f7ff faa0 	bl	8003794 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fd fd54 	bl	8001d00 <HAL_GetTick>
 8004258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800425c:	f7fd fd50 	bl	8001d00 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e0f8      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800426e:	f7ff faa2 	bl	80037b6 <LL_RCC_HSI48_IsReady>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f1      	bne.n	800425c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80ee 	beq.w	800445e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004282:	f7ff fc00 	bl	8003a86 <LL_RCC_GetSysClkSource>
 8004286:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004294:	2b02      	cmp	r3, #2
 8004296:	f040 80af 	bne.w	80043f8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 0203 	and.w	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d123      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d11c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d114      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d10d      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d05d      	beq.n	80043ac <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d058      	beq.n	80043a8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0ab      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004308:	f7ff fc73 	bl	8003bf2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800430c:	f7fd fcf8 	bl	8001d00 <HAL_GetTick>
 8004310:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004314:	f7fd fcf4 	bl	8001d00 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e09c      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ef      	bne.n	8004314 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <HAL_RCC_OscConfig+0x6e4>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004346:	4311      	orrs	r1, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800434c:	0212      	lsls	r2, r2, #8
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004354:	4311      	orrs	r1, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800435a:	4311      	orrs	r1, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004360:	430a      	orrs	r2, r1
 8004362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004366:	4313      	orrs	r3, r2
 8004368:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800436a:	f7ff fc33 	bl	8003bd4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800436e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800437e:	f7fd fcbf 	bl	8001d00 <HAL_GetTick>
 8004382:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004386:	f7fd fcbb 	bl	8001d00 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e063      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ef      	beq.n	8004386 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043a6:	e05a      	b.n	800445e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e059      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d151      	bne.n	800445e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043ba:	f7ff fc0b 	bl	8003bd4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043ce:	f7fd fc97 	bl	8001d00 <HAL_GetTick>
 80043d2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fd fc93 	bl	8001d00 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e03b      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ef      	beq.n	80043d6 <HAL_RCC_OscConfig+0x686>
 80043f6:	e032      	b.n	800445e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d02d      	beq.n	800445a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fe:	f7ff fbf8 	bl	8003bf2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800440c:	f023 0303 	bic.w	r3, r3, #3
 8004410:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800441c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fd fc6b 	bl	8001d00 <HAL_GetTick>
 800442a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442c:	e00d      	b.n	800444a <HAL_RCC_OscConfig+0x6fa>
 800442e:	bf00      	nop
 8004430:	58000400 	.word	0x58000400
 8004434:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd fc62 	bl	8001d00 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e00a      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ef      	bne.n	8004438 <HAL_RCC_OscConfig+0x6e8>
 8004458:	e001      	b.n	800445e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3734      	adds	r7, #52	; 0x34
 8004464:	46bd      	mov	sp, r7
 8004466:	bd90      	pop	{r4, r7, pc}

08004468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e12d      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b98      	ldr	r3, [pc, #608]	; (80046e0 <HAL_RCC_ClockConfig+0x278>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d91b      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b95      	ldr	r3, [pc, #596]	; (80046e0 <HAL_RCC_ClockConfig+0x278>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 0207 	bic.w	r2, r3, #7
 8004492:	4993      	ldr	r1, [pc, #588]	; (80046e0 <HAL_RCC_ClockConfig+0x278>)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449a:	f7fd fc31 	bl	8001d00 <HAL_GetTick>
 800449e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80044a2:	f7fd fc2d 	bl	8001d00 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e111      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b4:	4b8a      	ldr	r3, [pc, #552]	; (80046e0 <HAL_RCC_ClockConfig+0x278>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d1ef      	bne.n	80044a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fae3 	bl	8003a9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044d8:	f7fd fc12 	bl	8001d00 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044e0:	f7fd fc0e 	bl	8001d00 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0f2      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80044f2:	f7ff fbd0 	bl	8003c96 <LL_RCC_IsActiveFlag_HPRE>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f1      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d016      	beq.n	8004536 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fada 	bl	8003ac6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004512:	f7fd fbf5 	bl	8001d00 <HAL_GetTick>
 8004516:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800451a:	f7fd fbf1 	bl	8001d00 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e0d5      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800452c:	f7ff fbc5 	bl	8003cba <LL_RCC_IsActiveFlag_C2HPRE>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f1      	beq.n	800451a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fad3 	bl	8003af2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800454c:	f7fd fbd8 	bl	8001d00 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004554:	f7fd fbd4 	bl	8001d00 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0b8      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004566:	f7ff fbbb 	bl	8003ce0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f1      	beq.n	8004554 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d016      	beq.n	80045aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff facd 	bl	8003b20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004586:	f7fd fbbb 	bl	8001d00 <HAL_GetTick>
 800458a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800458e:	f7fd fbb7 	bl	8001d00 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e09b      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80045a0:	f7ff fbb1 	bl	8003d06 <LL_RCC_IsActiveFlag_PPRE1>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f1      	beq.n	800458e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d017      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff fac3 	bl	8003b48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045c2:	f7fd fb9d 	bl	8001d00 <HAL_GetTick>
 80045c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045ca:	f7fd fb99 	bl	8001d00 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e07d      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80045dc:	f7ff fba5 	bl	8003d2a <LL_RCC_IsActiveFlag_PPRE2>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f1      	beq.n	80045ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d043      	beq.n	800467a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d106      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80045fa:	f7ff f863 	bl	80036c4 <LL_RCC_HSE_IsReady>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d11e      	bne.n	8004642 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e067      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b03      	cmp	r3, #3
 800460e:	d106      	bne.n	800461e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004610:	f7ff fafe 	bl	8003c10 <LL_RCC_PLL_IsReady>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d113      	bne.n	8004642 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e05c      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004626:	f7ff f9cb 	bl	80039c0 <LL_RCC_MSI_IsReady>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d108      	bne.n	8004642 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e051      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004634:	f7ff f876 	bl	8003724 <LL_RCC_HSI_IsReady>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e04a      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fa09 	bl	8003a5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464c:	f7fd fb58 	bl	8001d00 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7fd fb54 	bl	8001d00 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e036      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	f7ff fa0c 	bl	8003a86 <LL_RCC_GetSysClkSource>
 800466e:	4602      	mov	r2, r0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	429a      	cmp	r2, r3
 8004678:	d1ec      	bne.n	8004654 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800467a:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_ClockConfig+0x278>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d21b      	bcs.n	80046c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004688:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <HAL_RCC_ClockConfig+0x278>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 0207 	bic.w	r2, r3, #7
 8004690:	4913      	ldr	r1, [pc, #76]	; (80046e0 <HAL_RCC_ClockConfig+0x278>)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fd fb32 	bl	8001d00 <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80046a0:	f7fd fb2e 	bl	8001d00 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e012      	b.n	80046d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x278>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1ef      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046c0:	f000 f87e 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <HAL_RCC_ClockConfig+0x27c>)
 80046c8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80046ca:	f7fd fb25 	bl	8001d18 <HAL_GetTickPrio>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fd fac7 	bl	8001c64 <HAL_InitTick>
 80046d6:	4603      	mov	r3, r0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	58004000 	.word	0x58004000
 80046e4:	20000004 	.word	0x20000004

080046e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ee:	f7ff f9ca 	bl	8003a86 <LL_RCC_GetSysClkSource>
 80046f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046fa:	f7ff f986 	bl	8003a0a <LL_RCC_MSI_GetRange>
 80046fe:	4603      	mov	r3, r0
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e04b      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d102      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e045      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b08      	cmp	r3, #8
 8004720:	d10a      	bne.n	8004738 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004722:	f7fe ff9f 	bl	8003664 <LL_RCC_HSE_IsEnabledDiv2>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d102      	bne.n	8004732 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800472c:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e03a      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e037      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004738:	f7ff faa1 	bl	8003c7e <LL_RCC_PLL_GetMainSource>
 800473c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d003      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x64>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d003      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x6a>
 800474a:	e00d      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800474c:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800474e:	60bb      	str	r3, [r7, #8]
        break;
 8004750:	e015      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004752:	f7fe ff87 	bl	8003664 <LL_RCC_HSE_IsEnabledDiv2>
 8004756:	4603      	mov	r3, r0
 8004758:	2b01      	cmp	r3, #1
 800475a:	d102      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800475c:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800475e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004760:	e00d      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004764:	60bb      	str	r3, [r7, #8]
        break;
 8004766:	e00a      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004768:	f7ff f94f 	bl	8003a0a <LL_RCC_MSI_GetRange>
 800476c:	4603      	mov	r3, r0
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	60bb      	str	r3, [r7, #8]
        break;
 800477c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800477e:	f7ff fa59 	bl	8003c34 <LL_RCC_PLL_GetN>
 8004782:	4602      	mov	r2, r0
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	fb03 f402 	mul.w	r4, r3, r2
 800478a:	f7ff fa6c 	bl	8003c66 <LL_RCC_PLL_GetDivider>
 800478e:	4603      	mov	r3, r0
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	3301      	adds	r3, #1
 8004794:	fbb4 f4f3 	udiv	r4, r4, r3
 8004798:	f7ff fa59 	bl	8003c4e <LL_RCC_PLL_GetR>
 800479c:	4603      	mov	r3, r0
 800479e:	0f5b      	lsrs	r3, r3, #29
 80047a0:	3301      	adds	r3, #1
 80047a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80047a6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd90      	pop	{r4, r7, pc}
 80047b2:	bf00      	nop
 80047b4:	080095a0 	.word	0x080095a0
 80047b8:	00f42400 	.word	0x00f42400
 80047bc:	01e84800 	.word	0x01e84800

080047c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c0:	b598      	push	{r3, r4, r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80047c4:	f7ff ff90 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80047c8:	4604      	mov	r4, r0
 80047ca:	f7ff f9d1 	bl	8003b70 <LL_RCC_GetAHBPrescaler>
 80047ce:	4603      	mov	r3, r0
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	4a03      	ldr	r2, [pc, #12]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80047d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd98      	pop	{r3, r4, r7, pc}
 80047e4:	08009540 	.word	0x08009540

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b598      	push	{r3, r4, r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80047ec:	f7ff ffe8 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80047f0:	4604      	mov	r4, r0
 80047f2:	f7ff f9d7 	bl	8003ba4 <LL_RCC_GetAPB1Prescaler>
 80047f6:	4603      	mov	r3, r0
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	4a04      	ldr	r2, [pc, #16]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	fa24 f303 	lsr.w	r3, r4, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd98      	pop	{r3, r4, r7, pc}
 8004810:	08009580 	.word	0x08009580

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b598      	push	{r3, r4, r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004818:	f7ff ffd2 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 800481c:	4604      	mov	r4, r0
 800481e:	f7ff f9cd 	bl	8003bbc <LL_RCC_GetAPB2Prescaler>
 8004822:	4603      	mov	r3, r0
 8004824:	0adb      	lsrs	r3, r3, #11
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	4a04      	ldr	r2, [pc, #16]	; (800483c <HAL_RCC_GetPCLK2Freq+0x28>)
 800482c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd98      	pop	{r3, r4, r7, pc}
 800483c:	08009580 	.word	0x08009580

08004840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2bb0      	cmp	r3, #176	; 0xb0
 800484c:	d903      	bls.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e007      	b.n	8004866 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004864:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004866:	f7ff f98f 	bl	8003b88 <LL_RCC_GetAHB4Prescaler>
 800486a:	4603      	mov	r3, r0
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	4a0d      	ldr	r2, [pc, #52]	; (80048a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	0c9c      	lsrs	r4, r3, #18
 800488a:	f7fe fedd 	bl	8003648 <HAL_PWREx_GetVoltageRange>
 800488e:	4603      	mov	r3, r0
 8004890:	4619      	mov	r1, r3
 8004892:	4620      	mov	r0, r4
 8004894:	f000 f80c 	bl	80048b0 <RCC_SetFlashLatency>
 8004898:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd90      	pop	{r4, r7, pc}
 80048a2:	bf00      	nop
 80048a4:	080095a0 	.word	0x080095a0
 80048a8:	08009540 	.word	0x08009540
 80048ac:	431bde83 	.word	0x431bde83

080048b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b093      	sub	sp, #76	; 0x4c
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80048ba:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <RCC_SetFlashLatency+0xf0>)
 80048bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80048c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80048c6:	4a37      	ldr	r2, [pc, #220]	; (80049a4 <RCC_SetFlashLatency+0xf4>)
 80048c8:	f107 031c 	add.w	r3, r7, #28
 80048cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80048ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80048d2:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <RCC_SetFlashLatency+0xf8>)
 80048d4:	f107 040c 	add.w	r4, r7, #12
 80048d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80048de:	2300      	movs	r3, #0
 80048e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e8:	d11c      	bne.n	8004924 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	643b      	str	r3, [r7, #64]	; 0x40
 80048ee:	e015      	b.n	800491c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80048f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048f8:	4413      	add	r3, r2
 80048fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d808      	bhi.n	8004916 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800490c:	4413      	add	r3, r2
 800490e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004912:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004914:	e022      	b.n	800495c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004918:	3301      	adds	r3, #1
 800491a:	643b      	str	r3, [r7, #64]	; 0x40
 800491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491e:	2b03      	cmp	r3, #3
 8004920:	d9e6      	bls.n	80048f0 <RCC_SetFlashLatency+0x40>
 8004922:	e01b      	b.n	800495c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004924:	2300      	movs	r3, #0
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004928:	e015      	b.n	8004956 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004932:	4413      	add	r3, r2
 8004934:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d808      	bhi.n	8004950 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800493e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004946:	4413      	add	r3, r2
 8004948:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800494e:	e005      	b.n	800495c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	3301      	adds	r3, #1
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004958:	2b02      	cmp	r3, #2
 800495a:	d9e6      	bls.n	800492a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <RCC_SetFlashLatency+0xfc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 0207 	bic.w	r2, r3, #7
 8004964:	4911      	ldr	r1, [pc, #68]	; (80049ac <RCC_SetFlashLatency+0xfc>)
 8004966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800496c:	f7fd f9c8 	bl	8001d00 <HAL_GetTick>
 8004970:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004972:	e008      	b.n	8004986 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004974:	f7fd f9c4 	bl	8001d00 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e007      	b.n	8004996 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <RCC_SetFlashLatency+0xfc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004990:	429a      	cmp	r2, r3
 8004992:	d1ef      	bne.n	8004974 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	374c      	adds	r7, #76	; 0x4c
 800499a:	46bd      	mov	sp, r7
 800499c:	bd90      	pop	{r4, r7, pc}
 800499e:	bf00      	nop
 80049a0:	080093c8 	.word	0x080093c8
 80049a4:	080093d8 	.word	0x080093d8
 80049a8:	080093e4 	.word	0x080093e4
 80049ac:	58004000 	.word	0x58004000

080049b0 <LL_RCC_LSE_IsEnabled>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <LL_RCC_LSE_IsEnabled+0x18>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <LL_RCC_LSE_IsEnabled+0x1a>
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_LSE_IsReady>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d101      	bne.n	80049ec <LL_RCC_LSE_IsReady+0x18>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <LL_RCC_LSE_IsReady+0x1a>
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_SetRFWKPClockSource>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <LL_RCC_SetSMPSClockSource>:
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_RCC_SetSMPSPrescaler>:
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_SetUSARTClockSource>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a84:	f023 0203 	bic.w	r2, r3, #3
 8004a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_SetLPUARTClockSource>:
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <LL_RCC_SetI2CClockSource>:
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <LL_RCC_SetLPTIMClockSource>:
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_RCC_SetSAIClockSource>:
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_RCC_SetRNGClockSource>:
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_SetCLK48ClockSource>:
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_RCC_SetUSBClockSource>:
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff ffe3 	bl	8004b92 <LL_RCC_SetCLK48ClockSource>
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <LL_RCC_SetADCClockSource>:
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_RCC_SetRTCClockSource>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <LL_RCC_GetRTCClockSource>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_ForceBackupDomainReset>:
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c5e:	bf00      	nop
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c80:	bf00      	nop
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_RCC_PLLSAI1_Enable>:
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c9c:	6013      	str	r3, [r2, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LL_RCC_PLLSAI1_Disable>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cba:	6013      	str	r3, [r2, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <LL_RCC_PLLSAI1_IsReady>:
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd8:	d101      	bne.n	8004cde <LL_RCC_PLLSAI1_IsReady+0x18>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b088      	sub	sp, #32
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d034      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d0e:	d021      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004d10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d14:	d81b      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d1a:	d01d      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004d1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d20:	d815      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d2a:	d110      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d3c:	e00d      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f947 	bl	8004fd6 <RCCEx_PLLSAI1_ConfigNP>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d4c:	e005      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77fb      	strb	r3, [r7, #31]
        break;
 8004d52:	e002      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5a:	7ffb      	ldrb	r3, [r7, #31]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fee8 	bl	8004b3a <LL_RCC_SetSAIClockSource>
 8004d6a:	e001      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	7ffb      	ldrb	r3, [r7, #31]
 8004d6e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d046      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004d7c:	f7ff ff56 	bl	8004c2c <LL_RCC_GetRTCClockSource>
 8004d80:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d03c      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d8c:	f7fe fc4c 	bl	8003628 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ff30 	bl	8004c00 <LL_RCC_SetRTCClockSource>
 8004da0:	e02e      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004dac:	f7ff ff4b 	bl	8004c46 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004db0:	f7ff ff5a 	bl	8004c68 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004dc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004dcc:	f7ff fdf0 	bl	80049b0 <LL_RCC_LSE_IsEnabled>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d114      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dd6:	f7fc ff93 	bl	8001d00 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ddc:	e00b      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fc ff8f 	bl	8001d00 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d902      	bls.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	77fb      	strb	r3, [r7, #31]
              break;
 8004df4:	e004      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004df6:	f7ff fded 	bl	80049d4 <LL_RCC_LSE_IsReady>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d1ee      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
 8004e02:	77bb      	strb	r3, [r7, #30]
 8004e04:	e001      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fe2a 	bl	8004a74 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fe35 	bl	8004aa0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fe5d 	bl	8004b06 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fe52 	bl	8004b06 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d004      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fe2a 	bl	8004acc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fe1f 	bl	8004acc <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d022      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fe8d 	bl	8004bbe <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eac:	d107      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ebc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f8dd 	bl	800508c <RCCEx_PLLSAI1_ConfigNQ>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004ed6:	7ffb      	ldrb	r3, [r7, #31]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
 8004ede:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02b      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d008      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fe2a 	bl	8004b66 <LL_RCC_SetRNGClockSource>
 8004f12:	e00a      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7ff fe21 	bl	8004b66 <LL_RCC_SetRNGClockSource>
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff fe34 	bl	8004b92 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004f32:	d107      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d022      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fe3d 	bl	8004bd4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f62:	d107      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f72:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f8dd 	bl	8005142 <RCCEx_PLLSAI1_ConfigNR>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
 8004f94:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fd26 	bl	80049f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fd45 	bl	8004a4c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fd2c 	bl	8004a24 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004fcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004fe2:	f7ff fe61 	bl	8004ca8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fe6:	f7fc fe8b 	bl	8001d00 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fec:	e009      	b.n	8005002 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fee:	f7fc fe87 	bl	8001d00 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d902      	bls.n	8005002 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8005000:	e004      	b.n	800500c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005002:	f7ff fe60 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d137      	bne.n	8005082 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005026:	4313      	orrs	r3, r2
 8005028:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005040:	f7ff fe23 	bl	8004c8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005044:	f7fc fe5c 	bl	8001d00 <HAL_GetTick>
 8005048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800504a:	e009      	b.n	8005060 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800504c:	f7fc fe58 	bl	8001d00 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d902      	bls.n	8005060 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	73fb      	strb	r3, [r7, #15]
        break;
 800505e:	e004      	b.n	800506a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005060:	f7ff fe31 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d1f0      	bne.n	800504c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800507e:	4313      	orrs	r3, r2
 8005080:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005098:	f7ff fe06 	bl	8004ca8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800509c:	f7fc fe30 	bl	8001d00 <HAL_GetTick>
 80050a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050a2:	e009      	b.n	80050b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050a4:	f7fc fe2c 	bl	8001d00 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d902      	bls.n	80050b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	73fb      	strb	r3, [r7, #15]
      break;
 80050b6:	e004      	b.n	80050c2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050b8:	f7ff fe05 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d137      	bne.n	8005138 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050dc:	4313      	orrs	r3, r2
 80050de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80050f6:	f7ff fdc8 	bl	8004c8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fa:	f7fc fe01 	bl	8001d00 <HAL_GetTick>
 80050fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005100:	e009      	b.n	8005116 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005102:	f7fc fdfd 	bl	8001d00 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d902      	bls.n	8005116 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	73fb      	strb	r3, [r7, #15]
        break;
 8005114:	e004      	b.n	8005120 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005116:	f7ff fdd6 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 800511a:	4603      	mov	r3, r0
 800511c:	2b01      	cmp	r3, #1
 800511e:	d1f0      	bne.n	8005102 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005134:	4313      	orrs	r3, r2
 8005136:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800514e:	f7ff fdab 	bl	8004ca8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005152:	f7fc fdd5 	bl	8001d00 <HAL_GetTick>
 8005156:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005158:	e009      	b.n	800516e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800515a:	f7fc fdd1 	bl	8001d00 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d902      	bls.n	800516e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	73fb      	strb	r3, [r7, #15]
      break;
 800516c:	e004      	b.n	8005178 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800516e:	f7ff fdaa 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d137      	bne.n	80051ee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005192:	4313      	orrs	r3, r2
 8005194:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a8:	4313      	orrs	r3, r2
 80051aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80051ac:	f7ff fd6d 	bl	8004c8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b0:	f7fc fda6 	bl	8001d00 <HAL_GetTick>
 80051b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051b6:	e009      	b.n	80051cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b8:	f7fc fda2 	bl	8001d00 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d902      	bls.n	80051cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	73fb      	strb	r3, [r7, #15]
        break;
 80051ca:	e004      	b.n	80051d6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051cc:	f7ff fd7b 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d1f0      	bne.n	80051b8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ea:	4313      	orrs	r3, r2
 80051ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e090      	b.n	800532c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc fbb6 	bl	8001990 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	22ca      	movs	r2, #202	; 0xca
 8005232:	625a      	str	r2, [r3, #36]	; 0x24
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2253      	movs	r2, #83	; 0x53
 800523a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f89f 	bl	8005380 <RTC_EnterInitMode>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	22ff      	movs	r2, #255	; 0xff
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2204      	movs	r2, #4
 8005254:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e067      	b.n	800532c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800526a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68d2      	ldr	r2, [r2, #12]
 8005296:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6919      	ldr	r1, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	041a      	lsls	r2, r3, #16
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ba:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0203 	bic.w	r2, r2, #3
 80052ca:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d113      	bne.n	800531a <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f81e 	bl	8005334 <HAL_RTC_WaitForSynchro>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	22ff      	movs	r2, #255	; 0xff
 8005304:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2204      	movs	r2, #4
 800530a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e008      	b.n	800532c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	22ff      	movs	r2, #255	; 0xff
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800532a:	2300      	movs	r3, #0
  }
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800534a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800534c:	f7fc fcd8 	bl	8001d00 <HAL_GetTick>
 8005350:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005352:	e009      	b.n	8005368 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005354:	f7fc fcd4 	bl	8001d00 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005362:	d901      	bls.n	8005368 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e007      	b.n	8005378 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0ee      	beq.n	8005354 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d119      	bne.n	80053ca <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f04f 32ff 	mov.w	r2, #4294967295
 800539e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80053a0:	f7fc fcae 	bl	8001d00 <HAL_GetTick>
 80053a4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053a6:	e009      	b.n	80053bc <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80053a8:	f7fc fcaa 	bl	8001d00 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053b6:	d901      	bls.n	80053bc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e007      	b.n	80053cc <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0ee      	beq.n	80053a8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <LL_RCC_GetUSARTClockSource>:
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4013      	ands	r3, r2
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <LL_RCC_GetLPUARTClockSource>:
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4013      	ands	r3, r2
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e042      	b.n	80054ac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fc fabf 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2224      	movs	r2, #36	; 0x24
 8005442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f8ca 	bl	80055f0 <UART_SetConfig>
 800545c:	4603      	mov	r3, r0
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e022      	b.n	80054ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fac4 	bl	80059fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fb4b 	bl	8005b40 <UART_CheckIdleState>
 80054aa:	4603      	mov	r3, r0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d168      	bne.n	800559e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_UART_Transmit_DMA+0x24>
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e061      	b.n	80055a0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_UART_Transmit_DMA+0x36>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e05a      	b.n	80055a0 <HAL_UART_Transmit_DMA+0xec>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2221      	movs	r2, #33	; 0x21
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551c:	2b00      	cmp	r3, #0
 800551e:	d02c      	beq.n	800557a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005524:	4a20      	ldr	r2, [pc, #128]	; (80055a8 <HAL_UART_Transmit_DMA+0xf4>)
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800552c:	4a1f      	ldr	r2, [pc, #124]	; (80055ac <HAL_UART_Transmit_DMA+0xf8>)
 800552e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005534:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <HAL_UART_Transmit_DMA+0xfc>)
 8005536:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800553c:	2200      	movs	r2, #0
 800553e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005548:	4619      	mov	r1, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3328      	adds	r3, #40	; 0x28
 8005550:	461a      	mov	r2, r3
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	f7fd fcf0 	bl	8002f38 <HAL_DMA_Start_IT>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2210      	movs	r2, #16
 8005562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e012      	b.n	80055a0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2240      	movs	r2, #64	; 0x40
 8005580:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005598:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	08005d77 	.word	0x08005d77
 80055ac:	08005dcb 	.word	0x08005dcb
 80055b0:	08005de7 	.word	0x08005de7

080055b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f0:	b5b0      	push	{r4, r5, r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	4313      	orrs	r3, r2
 8005612:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4ba3      	ldr	r3, [pc, #652]	; (80058a8 <UART_SetConfig+0x2b8>)
 800561c:	4013      	ands	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	69f9      	ldr	r1, [r7, #28]
 8005624:	430b      	orrs	r3, r1
 8005626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a98      	ldr	r2, [pc, #608]	; (80058ac <UART_SetConfig+0x2bc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d004      	beq.n	8005658 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	4313      	orrs	r3, r2
 8005656:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005662:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6812      	ldr	r2, [r2, #0]
 800566a:	69f9      	ldr	r1, [r7, #28]
 800566c:	430b      	orrs	r3, r1
 800566e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	f023 010f 	bic.w	r1, r3, #15
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a89      	ldr	r2, [pc, #548]	; (80058b0 <UART_SetConfig+0x2c0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d120      	bne.n	80056d2 <UART_SetConfig+0xe2>
 8005690:	2003      	movs	r0, #3
 8005692:	f7ff fe9f 	bl	80053d4 <LL_RCC_GetUSARTClockSource>
 8005696:	4603      	mov	r3, r0
 8005698:	2b03      	cmp	r3, #3
 800569a:	d817      	bhi.n	80056cc <UART_SetConfig+0xdc>
 800569c:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <UART_SetConfig+0xb4>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056c1 	.word	0x080056c1
 80056ac:	080056bb 	.word	0x080056bb
 80056b0:	080056c7 	.word	0x080056c7
 80056b4:	2301      	movs	r3, #1
 80056b6:	76fb      	strb	r3, [r7, #27]
 80056b8:	e038      	b.n	800572c <UART_SetConfig+0x13c>
 80056ba:	2302      	movs	r3, #2
 80056bc:	76fb      	strb	r3, [r7, #27]
 80056be:	e035      	b.n	800572c <UART_SetConfig+0x13c>
 80056c0:	2304      	movs	r3, #4
 80056c2:	76fb      	strb	r3, [r7, #27]
 80056c4:	e032      	b.n	800572c <UART_SetConfig+0x13c>
 80056c6:	2308      	movs	r3, #8
 80056c8:	76fb      	strb	r3, [r7, #27]
 80056ca:	e02f      	b.n	800572c <UART_SetConfig+0x13c>
 80056cc:	2310      	movs	r3, #16
 80056ce:	76fb      	strb	r3, [r7, #27]
 80056d0:	e02c      	b.n	800572c <UART_SetConfig+0x13c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a75      	ldr	r2, [pc, #468]	; (80058ac <UART_SetConfig+0x2bc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d125      	bne.n	8005728 <UART_SetConfig+0x138>
 80056dc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80056e0:	f7ff fe88 	bl	80053f4 <LL_RCC_GetLPUARTClockSource>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ea:	d017      	beq.n	800571c <UART_SetConfig+0x12c>
 80056ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056f0:	d817      	bhi.n	8005722 <UART_SetConfig+0x132>
 80056f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f6:	d00b      	beq.n	8005710 <UART_SetConfig+0x120>
 80056f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fc:	d811      	bhi.n	8005722 <UART_SetConfig+0x132>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <UART_SetConfig+0x11a>
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005706:	d006      	beq.n	8005716 <UART_SetConfig+0x126>
 8005708:	e00b      	b.n	8005722 <UART_SetConfig+0x132>
 800570a:	2300      	movs	r3, #0
 800570c:	76fb      	strb	r3, [r7, #27]
 800570e:	e00d      	b.n	800572c <UART_SetConfig+0x13c>
 8005710:	2302      	movs	r3, #2
 8005712:	76fb      	strb	r3, [r7, #27]
 8005714:	e00a      	b.n	800572c <UART_SetConfig+0x13c>
 8005716:	2304      	movs	r3, #4
 8005718:	76fb      	strb	r3, [r7, #27]
 800571a:	e007      	b.n	800572c <UART_SetConfig+0x13c>
 800571c:	2308      	movs	r3, #8
 800571e:	76fb      	strb	r3, [r7, #27]
 8005720:	e004      	b.n	800572c <UART_SetConfig+0x13c>
 8005722:	2310      	movs	r3, #16
 8005724:	76fb      	strb	r3, [r7, #27]
 8005726:	e001      	b.n	800572c <UART_SetConfig+0x13c>
 8005728:	2310      	movs	r3, #16
 800572a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a5e      	ldr	r2, [pc, #376]	; (80058ac <UART_SetConfig+0x2bc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	f040 808b 	bne.w	800584e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005738:	7efb      	ldrb	r3, [r7, #27]
 800573a:	2b08      	cmp	r3, #8
 800573c:	d823      	bhi.n	8005786 <UART_SetConfig+0x196>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <UART_SetConfig+0x154>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005769 	.word	0x08005769
 8005748:	08005787 	.word	0x08005787
 800574c:	08005771 	.word	0x08005771
 8005750:	08005787 	.word	0x08005787
 8005754:	08005777 	.word	0x08005777
 8005758:	08005787 	.word	0x08005787
 800575c:	08005787 	.word	0x08005787
 8005760:	08005787 	.word	0x08005787
 8005764:	0800577f 	.word	0x0800577f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7ff f83e 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 800576c:	6178      	str	r0, [r7, #20]
        break;
 800576e:	e00f      	b.n	8005790 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005770:	4b50      	ldr	r3, [pc, #320]	; (80058b4 <UART_SetConfig+0x2c4>)
 8005772:	617b      	str	r3, [r7, #20]
        break;
 8005774:	e00c      	b.n	8005790 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005776:	f7fe ffb7 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 800577a:	6178      	str	r0, [r7, #20]
        break;
 800577c:	e008      	b.n	8005790 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005782:	617b      	str	r3, [r7, #20]
        break;
 8005784:	e004      	b.n	8005790 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	76bb      	strb	r3, [r7, #26]
        break;
 800578e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 811a 	beq.w	80059cc <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	4a46      	ldr	r2, [pc, #280]	; (80058b8 <UART_SetConfig+0x2c8>)
 800579e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a2:	461a      	mov	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d305      	bcc.n	80057c8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d902      	bls.n	80057ce <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	76bb      	strb	r3, [r7, #26]
 80057cc:	e0fe      	b.n	80059cc <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	4a37      	ldr	r2, [pc, #220]	; (80058b8 <UART_SetConfig+0x2c8>)
 80057dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	f7fa fcd1 	bl	800018c <__aeabi_uldivmod>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	020b      	lsls	r3, r1, #8
 80057fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005800:	0202      	lsls	r2, r0, #8
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	6849      	ldr	r1, [r1, #4]
 8005806:	0849      	lsrs	r1, r1, #1
 8005808:	4608      	mov	r0, r1
 800580a:	f04f 0100 	mov.w	r1, #0
 800580e:	1814      	adds	r4, r2, r0
 8005810:	eb43 0501 	adc.w	r5, r3, r1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	461a      	mov	r2, r3
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	4620      	mov	r0, r4
 8005820:	4629      	mov	r1, r5
 8005822:	f7fa fcb3 	bl	800018c <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4613      	mov	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005834:	d308      	bcc.n	8005848 <UART_SetConfig+0x258>
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583c:	d204      	bcs.n	8005848 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	e0c1      	b.n	80059cc <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	76bb      	strb	r3, [r7, #26]
 800584c:	e0be      	b.n	80059cc <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005856:	d16a      	bne.n	800592e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005858:	7efb      	ldrb	r3, [r7, #27]
 800585a:	3b01      	subs	r3, #1
 800585c:	2b07      	cmp	r3, #7
 800585e:	d82d      	bhi.n	80058bc <UART_SetConfig+0x2cc>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <UART_SetConfig+0x278>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	08005889 	.word	0x08005889
 800586c:	08005891 	.word	0x08005891
 8005870:	080058bd 	.word	0x080058bd
 8005874:	08005897 	.word	0x08005897
 8005878:	080058bd 	.word	0x080058bd
 800587c:	080058bd 	.word	0x080058bd
 8005880:	080058bd 	.word	0x080058bd
 8005884:	0800589f 	.word	0x0800589f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005888:	f7fe ffc4 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 800588c:	6178      	str	r0, [r7, #20]
        break;
 800588e:	e01a      	b.n	80058c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005890:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <UART_SetConfig+0x2c4>)
 8005892:	617b      	str	r3, [r7, #20]
        break;
 8005894:	e017      	b.n	80058c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005896:	f7fe ff27 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 800589a:	6178      	str	r0, [r7, #20]
        break;
 800589c:	e013      	b.n	80058c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a2:	617b      	str	r3, [r7, #20]
        break;
 80058a4:	e00f      	b.n	80058c6 <UART_SetConfig+0x2d6>
 80058a6:	bf00      	nop
 80058a8:	cfff69f3 	.word	0xcfff69f3
 80058ac:	40008000 	.word	0x40008000
 80058b0:	40013800 	.word	0x40013800
 80058b4:	00f42400 	.word	0x00f42400
 80058b8:	080095e0 	.word	0x080095e0
      default:
        pclk = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	76bb      	strb	r3, [r7, #26]
        break;
 80058c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d07f      	beq.n	80059cc <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	4a48      	ldr	r2, [pc, #288]	; (80059f4 <UART_SetConfig+0x404>)
 80058d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d6:	461a      	mov	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	fbb3 f3f2 	udiv	r3, r3, r2
 80058de:	005a      	lsls	r2, r3, #1
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	441a      	add	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b0f      	cmp	r3, #15
 80058f8:	d916      	bls.n	8005928 <UART_SetConfig+0x338>
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005900:	d212      	bcs.n	8005928 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f023 030f 	bic.w	r3, r3, #15
 800590a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	b29b      	uxth	r3, r3
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	b29a      	uxth	r2, r3
 8005918:	89fb      	ldrh	r3, [r7, #14]
 800591a:	4313      	orrs	r3, r2
 800591c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	89fa      	ldrh	r2, [r7, #14]
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	e051      	b.n	80059cc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	76bb      	strb	r3, [r7, #26]
 800592c:	e04e      	b.n	80059cc <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800592e:	7efb      	ldrb	r3, [r7, #27]
 8005930:	3b01      	subs	r3, #1
 8005932:	2b07      	cmp	r3, #7
 8005934:	d821      	bhi.n	800597a <UART_SetConfig+0x38a>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <UART_SetConfig+0x34c>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800595d 	.word	0x0800595d
 8005940:	08005965 	.word	0x08005965
 8005944:	0800597b 	.word	0x0800597b
 8005948:	0800596b 	.word	0x0800596b
 800594c:	0800597b 	.word	0x0800597b
 8005950:	0800597b 	.word	0x0800597b
 8005954:	0800597b 	.word	0x0800597b
 8005958:	08005973 	.word	0x08005973
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800595c:	f7fe ff5a 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8005960:	6178      	str	r0, [r7, #20]
        break;
 8005962:	e00f      	b.n	8005984 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <UART_SetConfig+0x408>)
 8005966:	617b      	str	r3, [r7, #20]
        break;
 8005968:	e00c      	b.n	8005984 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596a:	f7fe febd 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 800596e:	6178      	str	r0, [r7, #20]
        break;
 8005970:	e008      	b.n	8005984 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005976:	617b      	str	r3, [r7, #20]
        break;
 8005978:	e004      	b.n	8005984 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	76bb      	strb	r3, [r7, #26]
        break;
 8005982:	bf00      	nop
    }

    if (pclk != 0U)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d020      	beq.n	80059cc <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	4a19      	ldr	r2, [pc, #100]	; (80059f4 <UART_SetConfig+0x404>)
 8005990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005994:	461a      	mov	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fbb3 f2f2 	udiv	r2, r3, r2
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	085b      	lsrs	r3, r3, #1
 80059a2:	441a      	add	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b0f      	cmp	r3, #15
 80059b4:	d908      	bls.n	80059c8 <UART_SetConfig+0x3d8>
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059bc:	d204      	bcs.n	80059c8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e001      	b.n	80059cc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80059e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bdb0      	pop	{r4, r5, r7, pc}
 80059f2:	bf00      	nop
 80059f4:	080095e0 	.word	0x080095e0
 80059f8:	00f42400 	.word	0x00f42400

080059fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afa:	d10a      	bne.n	8005b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b50:	f7fc f8d6 	bl	8001d00 <HAL_GetTick>
 8005b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d10e      	bne.n	8005b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f82f 	bl	8005bd6 <UART_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e025      	b.n	8005bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d10e      	bne.n	8005bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f819 	bl	8005bd6 <UART_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e00f      	b.n	8005bce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be6:	e062      	b.n	8005cae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	d05e      	beq.n	8005cae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf0:	f7fc f886 	bl	8001d00 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d302      	bcc.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d11d      	bne.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e045      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d02e      	beq.n	8005cae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5e:	d126      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e00f      	b.n	8005cce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	bf0c      	ite	eq
 8005cbe:	2301      	moveq	r3, #1
 8005cc0:	2300      	movne	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d08d      	beq.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005cec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005cfc:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d28:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d107      	bne.n	8005d56 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0210 	bic.w	r2, r2, #16
 8005d54:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d114      	bne.n	8005dbc <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dba:	e002      	b.n	8005dc2 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff fbf9 	bl	80055b4 <HAL_UART_TxCpltCallback>
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff fbf5 	bl	80055c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b086      	sub	sp, #24
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	d109      	bne.n	8005e26 <UART_DMAError+0x40>
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b21      	cmp	r3, #33	; 0x21
 8005e16:	d106      	bne.n	8005e26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005e20:	6978      	ldr	r0, [r7, #20]
 8005e22:	f7ff ff58 	bl	8005cd6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d109      	bne.n	8005e48 <UART_DMAError+0x62>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b22      	cmp	r3, #34	; 0x22
 8005e38:	d106      	bne.n	8005e48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7ff ff65 	bl	8005d12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e4e:	f043 0210 	orr.w	r2, r3, #16
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f7ff fbbf 	bl	80055dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e5e:	bf00      	nop
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_UARTEx_DisableFifoMode+0x16>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e027      	b.n	8005ecc <HAL_UARTEx_DisableFifoMode+0x66>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2224      	movs	r2, #36	; 0x24
 8005e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005eaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005eec:	2302      	movs	r3, #2
 8005eee:	e02d      	b.n	8005f4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2224      	movs	r2, #36	; 0x24
 8005efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f84f 	bl	8005fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e02d      	b.n	8005fc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2224      	movs	r2, #36	; 0x24
 8005f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0201 	bic.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f811 	bl	8005fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d108      	bne.n	8005ff2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ff0:	e031      	b.n	8006056 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	0e5b      	lsrs	r3, r3, #25
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	0f5b      	lsrs	r3, r3, #29
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800601a:	7bbb      	ldrb	r3, [r7, #14]
 800601c:	7b3a      	ldrb	r2, [r7, #12]
 800601e:	4911      	ldr	r1, [pc, #68]	; (8006064 <UARTEx_SetNbDataToProcess+0x94>)
 8006020:	5c8a      	ldrb	r2, [r1, r2]
 8006022:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006026:	7b3a      	ldrb	r2, [r7, #12]
 8006028:	490f      	ldr	r1, [pc, #60]	; (8006068 <UARTEx_SetNbDataToProcess+0x98>)
 800602a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800602c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006030:	b29a      	uxth	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	7b7a      	ldrb	r2, [r7, #13]
 800603c:	4909      	ldr	r1, [pc, #36]	; (8006064 <UARTEx_SetNbDataToProcess+0x94>)
 800603e:	5c8a      	ldrb	r2, [r1, r2]
 8006040:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006044:	7b7a      	ldrb	r2, [r7, #13]
 8006046:	4908      	ldr	r1, [pc, #32]	; (8006068 <UARTEx_SetNbDataToProcess+0x98>)
 8006048:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800604a:	fb93 f3f2 	sdiv	r3, r3, r2
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	080095f8 	.word	0x080095f8
 8006068:	08009600 	.word	0x08009600

0800606c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006076:	f107 0308 	add.w	r3, r7, #8
 800607a:	2218      	movs	r2, #24
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f000 ff8b 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006084:	233f      	movs	r3, #63	; 0x3f
 8006086:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006088:	2381      	movs	r3, #129	; 0x81
 800608a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800608c:	1dfb      	adds	r3, r7, #7
 800608e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006090:	2301      	movs	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006094:	f107 0308 	add.w	r3, r7, #8
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f001 f93a 	bl	8007314 <hci_send_req>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da01      	bge.n	80060aa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80060a6:	23ff      	movs	r3, #255	; 0xff
 80060a8:	e000      	b.n	80060ac <aci_gap_set_non_discoverable+0x40>
  return status;
 80060aa:	79fb      	ldrb	r3, [r7, #7]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80060b4:	b5b0      	push	{r4, r5, r7, lr}
 80060b6:	b0ce      	sub	sp, #312	; 0x138
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4605      	mov	r5, r0
 80060bc:	460c      	mov	r4, r1
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	1dfb      	adds	r3, r7, #7
 80060c4:	462a      	mov	r2, r5
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	1d3b      	adds	r3, r7, #4
 80060ca:	4622      	mov	r2, r4
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	1cbb      	adds	r3, r7, #2
 80060d0:	4602      	mov	r2, r0
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	1dbb      	adds	r3, r7, #6
 80060d6:	460a      	mov	r2, r1
 80060d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80060da:	f107 0310 	add.w	r3, r7, #16
 80060de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80060e2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80060e6:	3308      	adds	r3, #8
 80060e8:	f107 0210 	add.w	r2, r7, #16
 80060ec:	4413      	add	r3, r2
 80060ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80060f2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80060f6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80060fa:	4413      	add	r3, r2
 80060fc:	3309      	adds	r3, #9
 80060fe:	f107 0210 	add.w	r2, r7, #16
 8006102:	4413      	add	r3, r2
 8006104:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006108:	f107 030f 	add.w	r3, r7, #15
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006116:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800611a:	1dfa      	adds	r2, r7, #7
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006124:	3301      	adds	r3, #1
 8006126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800612a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800612e:	1d3a      	adds	r2, r7, #4
 8006130:	8812      	ldrh	r2, [r2, #0]
 8006132:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800613a:	3302      	adds	r3, #2
 800613c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006140:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006144:	1cba      	adds	r2, r7, #2
 8006146:	8812      	ldrh	r2, [r2, #0]
 8006148:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800614c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006150:	3302      	adds	r3, #2
 8006152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006156:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800615a:	1dba      	adds	r2, r7, #6
 800615c:	7812      	ldrb	r2, [r2, #0]
 800615e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006164:	3301      	adds	r3, #1
 8006166:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800616a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800616e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006172:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006174:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006178:	3301      	adds	r3, #1
 800617a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800617e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006182:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006186:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006188:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800618c:	3301      	adds	r3, #1
 800618e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006192:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006196:	3308      	adds	r3, #8
 8006198:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800619c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 feea 	bl	8006f7a <Osal_MemCpy>
    index_input += Local_Name_Length;
 80061a6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80061aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80061ae:	4413      	add	r3, r2
 80061b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80061b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061b8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80061bc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80061be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061c2:	3301      	adds	r3, #1
 80061c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80061c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061cc:	3301      	adds	r3, #1
 80061ce:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80061d2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fecf 	bl	8006f7a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80061dc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80061e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80061e4:	4413      	add	r3, r2
 80061e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80061ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ee:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80061f2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80061f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061f8:	3302      	adds	r3, #2
 80061fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006206:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800620c:	3302      	adds	r3, #2
 800620e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006212:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006216:	2218      	movs	r2, #24
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f000 febd 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006220:	233f      	movs	r3, #63	; 0x3f
 8006222:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006226:	2383      	movs	r3, #131	; 0x83
 8006228:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800622c:	f107 0310 	add.w	r3, r7, #16
 8006230:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006234:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006238:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800623c:	f107 030f 	add.w	r3, r7, #15
 8006240:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006244:	2301      	movs	r3, #1
 8006246:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800624a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f001 f85f 	bl	8007314 <hci_send_req>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	da01      	bge.n	8006260 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800625c:	23ff      	movs	r3, #255	; 0xff
 800625e:	e002      	b.n	8006266 <aci_gap_set_discoverable+0x1b2>
  return status;
 8006260:	f107 030f 	add.w	r3, r7, #15
 8006264:	781b      	ldrb	r3, [r3, #0]
}
 8006266:	4618      	mov	r0, r3
 8006268:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800626c:	46bd      	mov	sp, r7
 800626e:	bdb0      	pop	{r4, r5, r7, pc}

08006270 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b0cc      	sub	sp, #304	; 0x130
 8006274:	af00      	add	r7, sp, #0
 8006276:	4602      	mov	r2, r0
 8006278:	1dfb      	adds	r3, r7, #7
 800627a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800627c:	f107 0310 	add.w	r3, r7, #16
 8006280:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006284:	f107 030f 	add.w	r3, r7, #15
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006296:	1dfa      	adds	r2, r7, #7
 8006298:	7812      	ldrb	r2, [r2, #0]
 800629a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800629c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062a0:	3301      	adds	r3, #1
 80062a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062aa:	2218      	movs	r2, #24
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fe73 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 80062b4:	233f      	movs	r3, #63	; 0x3f
 80062b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80062ba:	2385      	movs	r3, #133	; 0x85
 80062bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80062c0:	f107 0310 	add.w	r3, r7, #16
 80062c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80062c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80062d0:	f107 030f 	add.w	r3, r7, #15
 80062d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80062d8:	2301      	movs	r3, #1
 80062da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f815 	bl	8007314 <hci_send_req>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da01      	bge.n	80062f4 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80062f0:	23ff      	movs	r3, #255	; 0xff
 80062f2:	e002      	b.n	80062fa <aci_gap_set_io_capability+0x8a>
  return status;
 80062f4:	f107 030f 	add.w	r3, r7, #15
 80062f8:	781b      	ldrb	r3, [r3, #0]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006304:	b5b0      	push	{r4, r5, r7, lr}
 8006306:	b0cc      	sub	sp, #304	; 0x130
 8006308:	af00      	add	r7, sp, #0
 800630a:	4605      	mov	r5, r0
 800630c:	460c      	mov	r4, r1
 800630e:	4610      	mov	r0, r2
 8006310:	4619      	mov	r1, r3
 8006312:	1dfb      	adds	r3, r7, #7
 8006314:	462a      	mov	r2, r5
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	1dbb      	adds	r3, r7, #6
 800631a:	4622      	mov	r2, r4
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	1d7b      	adds	r3, r7, #5
 8006320:	4602      	mov	r2, r0
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	1d3b      	adds	r3, r7, #4
 8006326:	460a      	mov	r2, r1
 8006328:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800632a:	f107 0310 	add.w	r3, r7, #16
 800632e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006332:	f107 030f 	add.w	r3, r7, #15
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006344:	1dfa      	adds	r2, r7, #7
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800634a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800634e:	3301      	adds	r3, #1
 8006350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006358:	1dba      	adds	r2, r7, #6
 800635a:	7812      	ldrb	r2, [r2, #0]
 800635c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800635e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006362:	3301      	adds	r3, #1
 8006364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636c:	1d7a      	adds	r2, r7, #5
 800636e:	7812      	ldrb	r2, [r2, #0]
 8006370:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006376:	3301      	adds	r3, #1
 8006378:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800637c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006380:	1d3a      	adds	r2, r7, #4
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800638a:	3301      	adds	r3, #1
 800638c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006394:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006398:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800639a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800639e:	3301      	adds	r3, #1
 80063a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80063a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80063ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80063ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063b2:	3301      	adds	r3, #1
 80063b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80063b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063bc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80063c0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80063c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063c6:	3301      	adds	r3, #1
 80063c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80063cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80063d4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80063d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063dc:	3304      	adds	r3, #4
 80063de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80063e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80063ea:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80063ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063f0:	3301      	adds	r3, #1
 80063f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063fa:	2218      	movs	r2, #24
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fdcb 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006404:	233f      	movs	r3, #63	; 0x3f
 8006406:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800640a:	2386      	movs	r3, #134	; 0x86
 800640c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006410:	f107 0310 	add.w	r3, r7, #16
 8006414:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800641c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006420:	f107 030f 	add.w	r3, r7, #15
 8006424:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006428:	2301      	movs	r3, #1
 800642a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800642e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f000 ff6d 	bl	8007314 <hci_send_req>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	da01      	bge.n	8006444 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8006440:	23ff      	movs	r3, #255	; 0xff
 8006442:	e002      	b.n	800644a <aci_gap_set_authentication_requirement+0x146>
  return status;
 8006444:	f107 030f 	add.w	r3, r7, #15
 8006448:	781b      	ldrb	r3, [r3, #0]
}
 800644a:	4618      	mov	r0, r3
 800644c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006450:	46bd      	mov	sp, r7
 8006452:	bdb0      	pop	{r4, r5, r7, pc}

08006454 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b0cc      	sub	sp, #304	; 0x130
 8006458:	af00      	add	r7, sp, #0
 800645a:	4602      	mov	r2, r0
 800645c:	463b      	mov	r3, r7
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	1dbb      	adds	r3, r7, #6
 8006462:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006464:	f107 0310 	add.w	r3, r7, #16
 8006468:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800646c:	f107 030f 	add.w	r3, r7, #15
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800647a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647e:	1dba      	adds	r2, r7, #6
 8006480:	8812      	ldrh	r2, [r2, #0]
 8006482:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006488:	3302      	adds	r3, #2
 800648a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800648e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006492:	463a      	mov	r2, r7
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800649a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800649e:	3304      	adds	r3, #4
 80064a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064a8:	2218      	movs	r2, #24
 80064aa:	2100      	movs	r1, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fd74 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 80064b2:	233f      	movs	r3, #63	; 0x3f
 80064b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80064b8:	2388      	movs	r3, #136	; 0x88
 80064ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80064be:	f107 0310 	add.w	r3, r7, #16
 80064c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80064c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80064ce:	f107 030f 	add.w	r3, r7, #15
 80064d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064e0:	2100      	movs	r1, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 ff16 	bl	8007314 <hci_send_req>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da01      	bge.n	80064f2 <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 80064ee:	23ff      	movs	r3, #255	; 0xff
 80064f0:	e002      	b.n	80064f8 <aci_gap_pass_key_resp+0xa4>
  return status;
 80064f2:	f107 030f 	add.w	r3, r7, #15
 80064f6:	781b      	ldrb	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006502:	b590      	push	{r4, r7, lr}
 8006504:	b0cd      	sub	sp, #308	; 0x134
 8006506:	af00      	add	r7, sp, #0
 8006508:	4604      	mov	r4, r0
 800650a:	4608      	mov	r0, r1
 800650c:	4611      	mov	r1, r2
 800650e:	463a      	mov	r2, r7
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	1dfb      	adds	r3, r7, #7
 8006514:	4622      	mov	r2, r4
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	1dbb      	adds	r3, r7, #6
 800651a:	4602      	mov	r2, r0
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	1d7b      	adds	r3, r7, #5
 8006520:	460a      	mov	r2, r1
 8006522:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006524:	f107 0310 	add.w	r3, r7, #16
 8006528:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800652c:	f107 0308 	add.w	r3, r7, #8
 8006530:	2207      	movs	r2, #7
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fd30 	bl	8006f9a <Osal_MemSet>
  int index_input = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006544:	1dfa      	adds	r2, r7, #7
 8006546:	7812      	ldrb	r2, [r2, #0]
 8006548:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800654a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800654e:	3301      	adds	r3, #1
 8006550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006558:	1dba      	adds	r2, r7, #6
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800655e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006562:	3301      	adds	r3, #1
 8006564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656c:	1d7a      	adds	r2, r7, #5
 800656e:	7812      	ldrb	r2, [r2, #0]
 8006570:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006576:	3301      	adds	r3, #1
 8006578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800657c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006580:	2218      	movs	r2, #24
 8006582:	2100      	movs	r1, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fd08 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 800658a:	233f      	movs	r3, #63	; 0x3f
 800658c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006590:	238a      	movs	r3, #138	; 0x8a
 8006592:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006596:	f107 0310 	add.w	r3, r7, #16
 800659a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800659e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80065ae:	2307      	movs	r3, #7
 80065b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 feaa 	bl	8007314 <hci_send_req>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	da01      	bge.n	80065ca <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80065c6:	23ff      	movs	r3, #255	; 0xff
 80065c8:	e021      	b.n	800660e <aci_gap_init+0x10c>
  if ( resp.Status )
 80065ca:	f107 0308 	add.w	r3, r7, #8
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <aci_gap_init+0xda>
    return resp.Status;
 80065d4:	f107 0308 	add.w	r3, r7, #8
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	e018      	b.n	800660e <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 80065dc:	f107 0308 	add.w	r3, r7, #8
 80065e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80065ec:	f107 0308 	add.w	r3, r7, #8
 80065f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80065fa:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80065fc:	f107 0308 	add.w	r3, r7, #8
 8006600:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006604:	b29a      	uxth	r2, r3
 8006606:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800660a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006614:	46bd      	mov	sp, r7
 8006616:	bd90      	pop	{r4, r7, pc}

08006618 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b0cc      	sub	sp, #304	; 0x130
 800661c:	af00      	add	r7, sp, #0
 800661e:	4602      	mov	r2, r0
 8006620:	463b      	mov	r3, r7
 8006622:	6019      	str	r1, [r3, #0]
 8006624:	1dfb      	adds	r3, r7, #7
 8006626:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006628:	f107 0310 	add.w	r3, r7, #16
 800662c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006630:	f107 030f 	add.w	r3, r7, #15
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800663e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006642:	1dfa      	adds	r2, r7, #7
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800664c:	3301      	adds	r3, #1
 800664e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006656:	1c58      	adds	r0, r3, #1
 8006658:	1dfb      	adds	r3, r7, #7
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	463b      	mov	r3, r7
 800665e:	6819      	ldr	r1, [r3, #0]
 8006660:	f000 fc8b 	bl	8006f7a <Osal_MemCpy>
  index_input += AdvDataLen;
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800666c:	4413      	add	r3, r2
 800666e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006672:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006676:	2218      	movs	r2, #24
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fc8d 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006680:	233f      	movs	r3, #63	; 0x3f
 8006682:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006686:	238e      	movs	r3, #142	; 0x8e
 8006688:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800668c:	f107 0310 	add.w	r3, r7, #16
 8006690:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006698:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800669c:	f107 030f 	add.w	r3, r7, #15
 80066a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fe2f 	bl	8007314 <hci_send_req>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	da01      	bge.n	80066c0 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80066bc:	23ff      	movs	r3, #255	; 0xff
 80066be:	e002      	b.n	80066c6 <aci_gap_update_adv_data+0xae>
  return status;
 80066c0:	f107 030f 	add.w	r3, r7, #15
 80066c4:	781b      	ldrb	r3, [r3, #0]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066da:	f107 0308 	add.w	r3, r7, #8
 80066de:	2218      	movs	r2, #24
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fc59 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 80066e8:	233f      	movs	r3, #63	; 0x3f
 80066ea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80066ec:	2392      	movs	r3, #146	; 0x92
 80066ee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80066f0:	1dfb      	adds	r3, r7, #7
 80066f2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80066f4:	2301      	movs	r3, #1
 80066f6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066f8:	f107 0308 	add.w	r3, r7, #8
 80066fc:	2100      	movs	r1, #0
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fe08 	bl	8007314 <hci_send_req>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	da01      	bge.n	800670e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800670a:	23ff      	movs	r3, #255	; 0xff
 800670c:	e000      	b.n	8006710 <aci_gap_configure_whitelist+0x40>
  return status;
 800670e:	79fb      	ldrb	r3, [r7, #7]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b0cc      	sub	sp, #304	; 0x130
 800671c:	af00      	add	r7, sp, #0
 800671e:	4602      	mov	r2, r0
 8006720:	1dbb      	adds	r3, r7, #6
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	1d7b      	adds	r3, r7, #5
 8006726:	460a      	mov	r2, r1
 8006728:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006732:	f107 030f 	add.w	r3, r7, #15
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006744:	1dba      	adds	r2, r7, #6
 8006746:	8812      	ldrh	r2, [r2, #0]
 8006748:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800674a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800674e:	3302      	adds	r3, #2
 8006750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006758:	1d7a      	adds	r2, r7, #5
 800675a:	7812      	ldrb	r2, [r2, #0]
 800675c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800675e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006762:	3301      	adds	r3, #1
 8006764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006768:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800676c:	2218      	movs	r2, #24
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fc12 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006776:	233f      	movs	r3, #63	; 0x3f
 8006778:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800677c:	23a5      	movs	r3, #165	; 0xa5
 800677e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006782:	f107 0310 	add.w	r3, r7, #16
 8006786:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800678a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800678e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006792:	f107 030f 	add.w	r3, r7, #15
 8006796:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800679a:	2301      	movs	r3, #1
 800679c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067a4:	2100      	movs	r1, #0
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fdb4 	bl	8007314 <hci_send_req>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da01      	bge.n	80067b6 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80067b2:	23ff      	movs	r3, #255	; 0xff
 80067b4:	e002      	b.n	80067bc <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80067b6:	f107 030f 	add.w	r3, r7, #15
 80067ba:	781b      	ldrb	r3, [r3, #0]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b088      	sub	sp, #32
 80067ca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067d0:	f107 0308 	add.w	r3, r7, #8
 80067d4:	2218      	movs	r2, #24
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fbde 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 80067de:	233f      	movs	r3, #63	; 0x3f
 80067e0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80067e2:	f240 1301 	movw	r3, #257	; 0x101
 80067e6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80067e8:	1dfb      	adds	r3, r7, #7
 80067ea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80067ec:	2301      	movs	r3, #1
 80067ee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067f0:	f107 0308 	add.w	r3, r7, #8
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fd8c 	bl	8007314 <hci_send_req>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da01      	bge.n	8006806 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006802:	23ff      	movs	r3, #255	; 0xff
 8006804:	e000      	b.n	8006808 <aci_gatt_init+0x42>
  return status;
 8006806:	79fb      	ldrb	r3, [r7, #7]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b0cf      	sub	sp, #316	; 0x13c
 8006814:	af00      	add	r7, sp, #0
 8006816:	4604      	mov	r4, r0
 8006818:	4638      	mov	r0, r7
 800681a:	6001      	str	r1, [r0, #0]
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	1dfb      	adds	r3, r7, #7
 8006822:	4622      	mov	r2, r4
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	1dbb      	adds	r3, r7, #6
 8006828:	4602      	mov	r2, r0
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	1d7b      	adds	r3, r7, #5
 800682e:	460a      	mov	r2, r1
 8006830:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006832:	f107 0310 	add.w	r3, r7, #16
 8006836:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800683a:	1dfb      	adds	r3, r7, #7
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d007      	beq.n	8006852 <aci_gatt_add_service+0x42>
 8006842:	1dfb      	adds	r3, r7, #7
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d101      	bne.n	800684e <aci_gatt_add_service+0x3e>
 800684a:	2311      	movs	r3, #17
 800684c:	e002      	b.n	8006854 <aci_gatt_add_service+0x44>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <aci_gatt_add_service+0x44>
 8006852:	2303      	movs	r3, #3
 8006854:	f107 0210 	add.w	r2, r7, #16
 8006858:	4413      	add	r3, r2
 800685a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	2203      	movs	r2, #3
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fb97 	bl	8006f9a <Osal_MemSet>
  int index_input = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006872:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006876:	1dfa      	adds	r2, r7, #7
 8006878:	7812      	ldrb	r2, [r2, #0]
 800687a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800687c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006880:	3301      	adds	r3, #1
 8006882:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006886:	1dfb      	adds	r3, r7, #7
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d002      	beq.n	8006894 <aci_gatt_add_service+0x84>
 800688e:	2b02      	cmp	r3, #2
 8006890:	d004      	beq.n	800689c <aci_gatt_add_service+0x8c>
 8006892:	e007      	b.n	80068a4 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8006894:	2302      	movs	r3, #2
 8006896:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800689a:	e005      	b.n	80068a8 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800689c:	2310      	movs	r3, #16
 800689e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80068a2:	e001      	b.n	80068a8 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80068a4:	2347      	movs	r3, #71	; 0x47
 80068a6:	e05d      	b.n	8006964 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80068a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80068ac:	1c58      	adds	r0, r3, #1
 80068ae:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80068b2:	463b      	mov	r3, r7
 80068b4:	6819      	ldr	r1, [r3, #0]
 80068b6:	f000 fb60 	bl	8006f7a <Osal_MemCpy>
    index_input += size;
 80068ba:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80068be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80068c2:	4413      	add	r3, r2
 80068c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80068c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068cc:	1dba      	adds	r2, r7, #6
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80068d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068d6:	3301      	adds	r3, #1
 80068d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80068dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e0:	1d7a      	adds	r2, r7, #5
 80068e2:	7812      	ldrb	r2, [r2, #0]
 80068e4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80068e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068ea:	3301      	adds	r3, #1
 80068ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068f4:	2218      	movs	r2, #24
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fb4e 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 80068fe:	233f      	movs	r3, #63	; 0x3f
 8006900:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006904:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006908:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800690c:	f107 0310 	add.w	r3, r7, #16
 8006910:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006918:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800691c:	f107 030c 	add.w	r3, r7, #12
 8006920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006924:	2303      	movs	r3, #3
 8006926:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800692a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fcef 	bl	8007314 <hci_send_req>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	da01      	bge.n	8006940 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800693c:	23ff      	movs	r3, #255	; 0xff
 800693e:	e011      	b.n	8006964 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8006940:	f107 030c 	add.w	r3, r7, #12
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <aci_gatt_add_service+0x142>
    return resp.Status;
 800694a:	f107 030c 	add.w	r3, r7, #12
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	e008      	b.n	8006964 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8006952:	f107 030c 	add.w	r3, r7, #12
 8006956:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800695a:	b29a      	uxth	r2, r3
 800695c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006960:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800696a:	46bd      	mov	sp, r7
 800696c:	bd90      	pop	{r4, r7, pc}

0800696e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800696e:	b590      	push	{r4, r7, lr}
 8006970:	b0d1      	sub	sp, #324	; 0x144
 8006972:	af00      	add	r7, sp, #0
 8006974:	4604      	mov	r4, r0
 8006976:	4608      	mov	r0, r1
 8006978:	f107 0108 	add.w	r1, r7, #8
 800697c:	600a      	str	r2, [r1, #0]
 800697e:	4619      	mov	r1, r3
 8006980:	f107 030e 	add.w	r3, r7, #14
 8006984:	4622      	mov	r2, r4
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	f107 030d 	add.w	r3, r7, #13
 800698c:	4602      	mov	r2, r0
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	1dbb      	adds	r3, r7, #6
 8006992:	460a      	mov	r2, r1
 8006994:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006996:	f107 0318 	add.w	r3, r7, #24
 800699a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800699e:	f107 030d 	add.w	r3, r7, #13
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d008      	beq.n	80069ba <aci_gatt_add_char+0x4c>
 80069a8:	f107 030d 	add.w	r3, r7, #13
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d101      	bne.n	80069b6 <aci_gatt_add_char+0x48>
 80069b2:	2313      	movs	r3, #19
 80069b4:	e002      	b.n	80069bc <aci_gatt_add_char+0x4e>
 80069b6:	2303      	movs	r3, #3
 80069b8:	e000      	b.n	80069bc <aci_gatt_add_char+0x4e>
 80069ba:	2305      	movs	r3, #5
 80069bc:	f107 0218 	add.w	r2, r7, #24
 80069c0:	4413      	add	r3, r2
 80069c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80069c6:	f107 0314 	add.w	r3, r7, #20
 80069ca:	2203      	movs	r2, #3
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fae3 	bl	8006f9a <Osal_MemSet>
  int index_input = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80069da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80069de:	f107 020e 	add.w	r2, r7, #14
 80069e2:	8812      	ldrh	r2, [r2, #0]
 80069e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80069e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069ea:	3302      	adds	r3, #2
 80069ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80069f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80069f4:	f107 020d 	add.w	r2, r7, #13
 80069f8:	7812      	ldrb	r2, [r2, #0]
 80069fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80069fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a00:	3301      	adds	r3, #1
 8006a02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006a06:	f107 030d 	add.w	r3, r7, #13
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d002      	beq.n	8006a16 <aci_gatt_add_char+0xa8>
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d004      	beq.n	8006a1e <aci_gatt_add_char+0xb0>
 8006a14:	e007      	b.n	8006a26 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8006a16:	2302      	movs	r3, #2
 8006a18:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006a1c:	e005      	b.n	8006a2a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8006a1e:	2310      	movs	r3, #16
 8006a20:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006a24:	e001      	b.n	8006a2a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8006a26:	2347      	movs	r3, #71	; 0x47
 8006a28:	e086      	b.n	8006b38 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006a2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006a2e:	1cd8      	adds	r0, r3, #3
 8006a30:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	6819      	ldr	r1, [r3, #0]
 8006a3a:	f000 fa9e 	bl	8006f7a <Osal_MemCpy>
    index_input += size;
 8006a3e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006a42:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006a46:	4413      	add	r3, r2
 8006a48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a50:	1dba      	adds	r2, r7, #6
 8006a52:	8812      	ldrh	r2, [r2, #0]
 8006a54:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006a56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a5a:	3302      	adds	r3, #2
 8006a5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a64:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006a68:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006a6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a6e:	3301      	adds	r3, #1
 8006a70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006a74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a78:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006a7c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006a7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a82:	3301      	adds	r3, #1
 8006a84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006a88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a8c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006a90:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006a92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a96:	3301      	adds	r3, #1
 8006a98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006a9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aa0:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006aa4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006aa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006aaa:	3301      	adds	r3, #1
 8006aac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006ab0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ab4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006ab8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006aba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006abe:	3301      	adds	r3, #1
 8006ac0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ac4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ac8:	2218      	movs	r2, #24
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fa64 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ad2:	233f      	movs	r3, #63	; 0x3f
 8006ad4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006ad8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006adc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006ae0:	f107 0318 	add.w	r3, r7, #24
 8006ae4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006ae8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006aec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006af0:	f107 0314 	add.w	r3, r7, #20
 8006af4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006af8:	2303      	movs	r3, #3
 8006afa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006afe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006b02:	2100      	movs	r1, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fc05 	bl	8007314 <hci_send_req>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	da01      	bge.n	8006b14 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8006b10:	23ff      	movs	r3, #255	; 0xff
 8006b12:	e011      	b.n	8006b38 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8006b14:	f107 0314 	add.w	r3, r7, #20
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8006b1e:	f107 0314 	add.w	r3, r7, #20
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	e008      	b.n	8006b38 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8006b26:	f107 0314 	add.w	r3, r7, #20
 8006b2a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006b34:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd90      	pop	{r4, r7, pc}

08006b42 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006b42:	b5b0      	push	{r4, r5, r7, lr}
 8006b44:	b0cc      	sub	sp, #304	; 0x130
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	4605      	mov	r5, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	1dbb      	adds	r3, r7, #6
 8006b52:	462a      	mov	r2, r5
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	1d3b      	adds	r3, r7, #4
 8006b58:	4622      	mov	r2, r4
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	1cfb      	adds	r3, r7, #3
 8006b5e:	4602      	mov	r2, r0
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	1cbb      	adds	r3, r7, #2
 8006b64:	460a      	mov	r2, r1
 8006b66:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006b68:	f107 0310 	add.w	r3, r7, #16
 8006b6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006b70:	f107 030f 	add.w	r3, r7, #15
 8006b74:	2200      	movs	r2, #0
 8006b76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8006b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b82:	1dba      	adds	r2, r7, #6
 8006b84:	8812      	ldrh	r2, [r2, #0]
 8006b86:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8006b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b96:	1d3a      	adds	r2, r7, #4
 8006b98:	8812      	ldrh	r2, [r2, #0]
 8006b9a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8006ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006baa:	1cfa      	adds	r2, r7, #3
 8006bac:	7812      	ldrb	r2, [r2, #0]
 8006bae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bbe:	1cba      	adds	r2, r7, #2
 8006bc0:	7812      	ldrb	r2, [r2, #0]
 8006bc2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bc8:	3301      	adds	r3, #1
 8006bca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd2:	1d98      	adds	r0, r3, #6
 8006bd4:	1cbb      	adds	r3, r7, #2
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006bde:	f000 f9cc 	bl	8006f7a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006be2:	1cbb      	adds	r3, r7, #2
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006bea:	4413      	add	r3, r2
 8006bec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006bf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bf4:	2218      	movs	r2, #24
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 f9ce 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bfe:	233f      	movs	r3, #63	; 0x3f
 8006c00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006c04:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006c08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c1c:	f107 030f 	add.w	r3, r7, #15
 8006c20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fb6f 	bl	8007314 <hci_send_req>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	da01      	bge.n	8006c40 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8006c3c:	23ff      	movs	r3, #255	; 0xff
 8006c3e:	e002      	b.n	8006c46 <aci_gatt_update_char_value+0x104>
  return status;
 8006c40:	f107 030f 	add.w	r3, r7, #15
 8006c44:	781b      	ldrb	r3, [r3, #0]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}

08006c50 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b0cc      	sub	sp, #304	; 0x130
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	463b      	mov	r3, r7
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	1dfb      	adds	r3, r7, #7
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	1dbb      	adds	r3, r7, #6
 8006c62:	460a      	mov	r2, r1
 8006c64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006c66:	f107 0310 	add.w	r3, r7, #16
 8006c6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c6e:	f107 030f 	add.w	r3, r7, #15
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8006c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c80:	1dfa      	adds	r2, r7, #7
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8006c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c94:	1dba      	adds	r2, r7, #6
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca8:	1c98      	adds	r0, r3, #2
 8006caa:	1dbb      	adds	r3, r7, #6
 8006cac:	781a      	ldrb	r2, [r3, #0]
 8006cae:	463b      	mov	r3, r7
 8006cb0:	6819      	ldr	r1, [r3, #0]
 8006cb2:	f000 f962 	bl	8006f7a <Osal_MemCpy>
  index_input += Length;
 8006cb6:	1dbb      	adds	r3, r7, #6
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cc8:	2218      	movs	r2, #24
 8006cca:	2100      	movs	r1, #0
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 f964 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006cd2:	233f      	movs	r3, #63	; 0x3f
 8006cd4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8006cd8:	230c      	movs	r3, #12
 8006cda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006cde:	f107 0310 	add.w	r3, r7, #16
 8006ce2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006cee:	f107 030f 	add.w	r3, r7, #15
 8006cf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fb06 	bl	8007314 <hci_send_req>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	da01      	bge.n	8006d12 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8006d0e:	23ff      	movs	r3, #255	; 0xff
 8006d10:	e002      	b.n	8006d18 <aci_hal_write_config_data+0xc8>
  return status;
 8006d12:	f107 030f 	add.w	r3, r7, #15
 8006d16:	781b      	ldrb	r3, [r3, #0]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b0cc      	sub	sp, #304	; 0x130
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	4602      	mov	r2, r0
 8006d2a:	1dfb      	adds	r3, r7, #7
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	1dbb      	adds	r3, r7, #6
 8006d30:	460a      	mov	r2, r1
 8006d32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006d34:	f107 0310 	add.w	r3, r7, #16
 8006d38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006d3c:	f107 030f 	add.w	r3, r7, #15
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8006d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d4e:	1dfa      	adds	r2, r7, #7
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006d54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d58:	3301      	adds	r3, #1
 8006d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8006d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d62:	1dba      	adds	r2, r7, #6
 8006d64:	7812      	ldrb	r2, [r2, #0]
 8006d66:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006d68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d76:	2218      	movs	r2, #24
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f90d 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d80:	233f      	movs	r3, #63	; 0x3f
 8006d82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006d86:	230f      	movs	r3, #15
 8006d88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006d8c:	f107 0310 	add.w	r3, r7, #16
 8006d90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d9c:	f107 030f 	add.w	r3, r7, #15
 8006da0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 faaf 	bl	8007314 <hci_send_req>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	da01      	bge.n	8006dc0 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006dbc:	23ff      	movs	r3, #255	; 0xff
 8006dbe:	e002      	b.n	8006dc6 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8006dc0:	f107 030f 	add.w	r3, r7, #15
 8006dc4:	781b      	ldrb	r3, [r3, #0]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b0cc      	sub	sp, #304	; 0x130
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	1dbb      	adds	r3, r7, #6
 8006dda:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006ddc:	f107 0310 	add.w	r3, r7, #16
 8006de0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006de4:	f107 030f 	add.w	r3, r7, #15
 8006de8:	2200      	movs	r2, #0
 8006dea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df6:	1dba      	adds	r2, r7, #6
 8006df8:	8812      	ldrh	r2, [r2, #0]
 8006dfa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006dfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e00:	3302      	adds	r3, #2
 8006e02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e0a:	2218      	movs	r2, #24
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f8c3 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e14:	233f      	movs	r3, #63	; 0x3f
 8006e16:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006e1a:	2318      	movs	r3, #24
 8006e1c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e20:	f107 0310 	add.w	r3, r7, #16
 8006e24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e30:	f107 030f 	add.w	r3, r7, #15
 8006e34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e42:	2100      	movs	r1, #0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fa65 	bl	8007314 <hci_send_req>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	da01      	bge.n	8006e54 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8006e50:	23ff      	movs	r3, #255	; 0xff
 8006e52:	e002      	b.n	8006e5a <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8006e54:	f107 030f 	add.w	r3, r7, #15
 8006e58:	781b      	ldrb	r3, [r3, #0]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e6e:	f107 0308 	add.w	r3, r7, #8
 8006e72:	2218      	movs	r2, #24
 8006e74:	2100      	movs	r1, #0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f88f 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x03;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006e80:	2303      	movs	r3, #3
 8006e82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006e84:	1dfb      	adds	r3, r7, #7
 8006e86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e8c:	f107 0308 	add.w	r3, r7, #8
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fa3e 	bl	8007314 <hci_send_req>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	da01      	bge.n	8006ea2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006e9e:	23ff      	movs	r3, #255	; 0xff
 8006ea0:	e000      	b.n	8006ea4 <hci_reset+0x40>
  return status;
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006eac:	b590      	push	{r4, r7, lr}
 8006eae:	b0cd      	sub	sp, #308	; 0x134
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	1dfb      	adds	r3, r7, #7
 8006eba:	4622      	mov	r2, r4
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	1dbb      	adds	r3, r7, #6
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	1d7b      	adds	r3, r7, #5
 8006ec6:	460a      	mov	r2, r1
 8006ec8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006eca:	f107 0310 	add.w	r3, r7, #16
 8006ece:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006ed2:	f107 030f 	add.w	r3, r7, #15
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee4:	1dfa      	adds	r2, r7, #7
 8006ee6:	7812      	ldrb	r2, [r2, #0]
 8006ee8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eee:	3301      	adds	r3, #1
 8006ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef8:	1dba      	adds	r2, r7, #6
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f02:	3301      	adds	r3, #1
 8006f04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0c:	1d7a      	adds	r2, r7, #5
 8006f0e:	7812      	ldrb	r2, [r2, #0]
 8006f10:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f16:	3301      	adds	r3, #1
 8006f18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f20:	2218      	movs	r2, #24
 8006f22:	2100      	movs	r1, #0
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 f838 	bl	8006f9a <Osal_MemSet>
  rq.ogf = 0x08;
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8006f30:	2331      	movs	r3, #49	; 0x31
 8006f32:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f36:	f107 0310 	add.w	r3, r7, #16
 8006f3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006f46:	f107 030f 	add.w	r3, r7, #15
 8006f4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f9da 	bl	8007314 <hci_send_req>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da01      	bge.n	8006f6a <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006f66:	23ff      	movs	r3, #255	; 0xff
 8006f68:	e002      	b.n	8006f70 <hci_le_set_default_phy+0xc4>
  return status;
 8006f6a:	f107 030f 	add.w	r3, r7, #15
 8006f6e:	781b      	ldrb	r3, [r3, #0]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd90      	pop	{r4, r7, pc}

08006f7a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f002 f9e4 	bl	8009358 <memcpy>
 8006f90:	4603      	mov	r3, r0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f002 f9e2 	bl	8009374 <memset>
 8006fb0:	4603      	mov	r3, r0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	af00      	add	r7, sp, #0
  return;
 8006fbe:	bf00      	nop
}
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <BLS_Init>:

__weak void BLS_Init( void )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  return;
 8006fcc:	bf00      	nop
}
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	af00      	add	r7, sp, #0
  return;
 8006fda:	bf00      	nop
}
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <DIS_Init>:
__weak void DIS_Init( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  return;
 8006fe8:	bf00      	nop
}
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	af00      	add	r7, sp, #0
  return;
 8006ff6:	bf00      	nop
}
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  return;
 8007004:	bf00      	nop
}
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HRS_Init>:
__weak void HRS_Init( void )
{
 800700e:	b480      	push	{r7}
 8007010:	af00      	add	r7, sp, #0
  return;
 8007012:	bf00      	nop
}
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HTS_Init>:
__weak void HTS_Init( void )
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  return;
 8007020:	bf00      	nop
}
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <IAS_Init>:
__weak void IAS_Init( void )
{
 800702a:	b480      	push	{r7}
 800702c:	af00      	add	r7, sp, #0
  return;
 800702e:	bf00      	nop
}
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <LLS_Init>:
__weak void LLS_Init( void )
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  return;
 800703c:	bf00      	nop
}
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <TPS_Init>:
__weak void TPS_Init( void )
{
 8007046:	b480      	push	{r7}
 8007048:	af00      	add	r7, sp, #0
  return;
 800704a:	bf00      	nop
}
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  return;
 8007058:	bf00      	nop
}
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 8007062:	b480      	push	{r7}
 8007064:	af00      	add	r7, sp, #0
  return;
 8007066:	bf00      	nop
}
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
  return;
 8007074:	bf00      	nop
}
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <MESH_Init>:
__weak void MESH_Init( void )
{
 800707e:	b480      	push	{r7}
 8007080:	af00      	add	r7, sp, #0
  return;
 8007082:	bf00      	nop
}
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  return;
 8007090:	bf00      	nop
}
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80070a0:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <SVCCTL_Init+0x18>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80070a6:	4b04      	ldr	r3, [pc, #16]	; (80070b8 <SVCCTL_Init+0x1c>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80070ac:	f000 f806 	bl	80070bc <SVCCTL_SvcInit>

  return;
 80070b0:	bf00      	nop
}
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	200000c0 	.word	0x200000c0
 80070b8:	200000e0 	.word	0x200000e0

080070bc <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  BAS_Init();
 80070c0:	f7ff ff7b 	bl	8006fba <BAS_Init>

  BLS_Init();
 80070c4:	f7ff ff80 	bl	8006fc8 <BLS_Init>

  CRS_STM_Init();
 80070c8:	f7ff ff85 	bl	8006fd6 <CRS_STM_Init>

  DIS_Init();
 80070cc:	f7ff ff8a 	bl	8006fe4 <DIS_Init>

  EDS_STM_Init();
 80070d0:	f7ff ff8f 	bl	8006ff2 <EDS_STM_Init>

  HIDS_Init();
 80070d4:	f7ff ff94 	bl	8007000 <HIDS_Init>

  HRS_Init();
 80070d8:	f7ff ff99 	bl	800700e <HRS_Init>

  HTS_Init();
 80070dc:	f7ff ff9e 	bl	800701c <HTS_Init>

  IAS_Init();
 80070e0:	f7ff ffa3 	bl	800702a <IAS_Init>

  LLS_Init();
 80070e4:	f7ff ffa8 	bl	8007038 <LLS_Init>

  TPS_Init();
 80070e8:	f7ff ffad 	bl	8007046 <TPS_Init>

  MOTENV_STM_Init();
 80070ec:	f7ff ffb2 	bl	8007054 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80070f0:	f7ff ffb7 	bl	8007062 <P2PS_STM_Init>

  OTAS_STM_Init();
 80070f4:	f7ff ffbc 	bl	8007070 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80070f8:	f7ff ffc8 	bl	800708c <BVOPUS_STM_Init>

  MESH_Init();
 80070fc:	f7ff ffbf 	bl	800707e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007100:	f001 fbae 	bl	8008860 <SVCCTL_InitCustomSvc>
  
  return;
 8007104:	bf00      	nop
}
 8007106:	bd80      	pop	{r7, pc}

08007108 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007110:	4b09      	ldr	r3, [pc, #36]	; (8007138 <SVCCTL_RegisterSvcHandler+0x30>)
 8007112:	7f1b      	ldrb	r3, [r3, #28]
 8007114:	4619      	mov	r1, r3
 8007116:	4a08      	ldr	r2, [pc, #32]	; (8007138 <SVCCTL_RegisterSvcHandler+0x30>)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <SVCCTL_RegisterSvcHandler+0x30>)
 8007120:	7f1b      	ldrb	r3, [r3, #28]
 8007122:	3301      	adds	r3, #1
 8007124:	b2da      	uxtb	r2, r3
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <SVCCTL_RegisterSvcHandler+0x30>)
 8007128:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800712a:	bf00      	nop
}
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	200000c0 	.word	0x200000c0

0800713c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3301      	adds	r3, #1
 8007148:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800714a:	2300      	movs	r3, #0
 800714c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2bff      	cmp	r3, #255	; 0xff
 8007154:	d125      	bne.n	80071a2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	3302      	adds	r3, #2
 800715a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800716a:	d118      	bne.n	800719e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800716c:	2300      	movs	r3, #0
 800716e:	757b      	strb	r3, [r7, #21]
 8007170:	e00d      	b.n	800718e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007172:	7d7b      	ldrb	r3, [r7, #21]
 8007174:	4a1a      	ldr	r2, [pc, #104]	; (80071e0 <SVCCTL_UserEvtRx+0xa4>)
 8007176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
 800717e:	4603      	mov	r3, r0
 8007180:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007188:	7d7b      	ldrb	r3, [r7, #21]
 800718a:	3301      	adds	r3, #1
 800718c:	757b      	strb	r3, [r7, #21]
 800718e:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <SVCCTL_UserEvtRx+0xa4>)
 8007190:	7f1b      	ldrb	r3, [r3, #28]
 8007192:	7d7a      	ldrb	r2, [r7, #21]
 8007194:	429a      	cmp	r2, r3
 8007196:	d3ec      	bcc.n	8007172 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007198:	e002      	b.n	80071a0 <SVCCTL_UserEvtRx+0x64>
              break;
 800719a:	bf00      	nop
          break;
 800719c:	e000      	b.n	80071a0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800719e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80071a0:	e000      	b.n	80071a4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80071a2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d00f      	beq.n	80071ca <SVCCTL_UserEvtRx+0x8e>
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	dc10      	bgt.n	80071d0 <SVCCTL_UserEvtRx+0x94>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <SVCCTL_UserEvtRx+0x7c>
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d006      	beq.n	80071c4 <SVCCTL_UserEvtRx+0x88>
 80071b6:	e00b      	b.n	80071d0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 feab 	bl	8007f14 <SVCCTL_App_Notification>
 80071be:	4603      	mov	r3, r0
 80071c0:	75bb      	strb	r3, [r7, #22]
      break;
 80071c2:	e008      	b.n	80071d6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80071c4:	2301      	movs	r3, #1
 80071c6:	75bb      	strb	r3, [r7, #22]
      break;
 80071c8:	e005      	b.n	80071d6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80071ca:	2300      	movs	r3, #0
 80071cc:	75bb      	strb	r3, [r7, #22]
      break;
 80071ce:	e002      	b.n	80071d6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80071d0:	2301      	movs	r3, #1
 80071d2:	75bb      	strb	r3, [r7, #22]
      break;
 80071d4:	bf00      	nop
  }

  return (return_status);
 80071d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	200000c0 	.word	0x200000c0

080071e4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80071ec:	f107 030c 	add.w	r3, r7, #12
 80071f0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2124      	movs	r1, #36	; 0x24
 80071fc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007200:	f000 fa1e 	bl	8007640 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	330b      	adds	r3, #11
 8007208:	78db      	ldrb	r3, [r3, #3]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b088      	sub	sp, #32
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800721a:	f107 030c 	add.w	r3, r7, #12
 800721e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	210f      	movs	r1, #15
 800722a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800722e:	f000 fa07 	bl	8007640 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	330b      	adds	r3, #11
 8007236:	78db      	ldrb	r3, [r3, #3]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	4a08      	ldr	r2, [pc, #32]	; (8007270 <hci_init+0x30>)
 8007250:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007252:	4a08      	ldr	r2, [pc, #32]	; (8007274 <hci_init+0x34>)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007258:	4806      	ldr	r0, [pc, #24]	; (8007274 <hci_init+0x34>)
 800725a:	f000 f973 	bl	8007544 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f8d4 	bl	8007410 <TlInit>

  return;
 8007268:	bf00      	nop
}
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	200001f8 	.word	0x200001f8
 8007274:	200001d0 	.word	0x200001d0

08007278 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800727e:	4822      	ldr	r0, [pc, #136]	; (8007308 <hci_user_evt_proc+0x90>)
 8007280:	f000 fd28 	bl	8007cd4 <LST_is_empty>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d12b      	bne.n	80072e2 <hci_user_evt_proc+0x6a>
 800728a:	4b20      	ldr	r3, [pc, #128]	; (800730c <hci_user_evt_proc+0x94>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d027      	beq.n	80072e2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007292:	f107 030c 	add.w	r3, r7, #12
 8007296:	4619      	mov	r1, r3
 8007298:	481b      	ldr	r0, [pc, #108]	; (8007308 <hci_user_evt_proc+0x90>)
 800729a:	f000 fdaa 	bl	8007df2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800729e:	4b1c      	ldr	r3, [pc, #112]	; (8007310 <hci_user_evt_proc+0x98>)
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00c      	beq.n	80072c0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80072aa:	2301      	movs	r3, #1
 80072ac:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80072ae:	4b18      	ldr	r3, [pc, #96]	; (8007310 <hci_user_evt_proc+0x98>)
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	1d3a      	adds	r2, r7, #4
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80072b8:	793a      	ldrb	r2, [r7, #4]
 80072ba:	4b14      	ldr	r3, [pc, #80]	; (800730c <hci_user_evt_proc+0x94>)
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e002      	b.n	80072c6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <hci_user_evt_proc+0x94>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <hci_user_evt_proc+0x94>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fc03 	bl	8007adc <TL_MM_EvtDone>
 80072d6:	e004      	b.n	80072e2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4619      	mov	r1, r3
 80072dc:	480a      	ldr	r0, [pc, #40]	; (8007308 <hci_user_evt_proc+0x90>)
 80072de:	f000 fd1b 	bl	8007d18 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80072e2:	4809      	ldr	r0, [pc, #36]	; (8007308 <hci_user_evt_proc+0x90>)
 80072e4:	f000 fcf6 	bl	8007cd4 <LST_is_empty>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d107      	bne.n	80072fe <hci_user_evt_proc+0x86>
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <hci_user_evt_proc+0x94>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80072f6:	4804      	ldr	r0, [pc, #16]	; (8007308 <hci_user_evt_proc+0x90>)
 80072f8:	f001 f818 	bl	800832c <hci_notify_asynch_evt>
  }


  return;
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
}
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	200000e8 	.word	0x200000e8
 800730c:	200000f4 	.word	0x200000f4
 8007310:	200001d0 	.word	0x200001d0

08007314 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007320:	2000      	movs	r0, #0
 8007322:	f000 f8cb 	bl	80074bc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007326:	2300      	movs	r3, #0
 8007328:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	885b      	ldrh	r3, [r3, #2]
 800732e:	b21b      	sxth	r3, r3
 8007330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007334:	b21a      	sxth	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	029b      	lsls	r3, r3, #10
 800733c:	b21b      	sxth	r3, r3
 800733e:	4313      	orrs	r3, r2
 8007340:	b21b      	sxth	r3, r3
 8007342:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	b2d9      	uxtb	r1, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	8bbb      	ldrh	r3, [r7, #28]
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f88d 	bl	8007470 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007356:	e04e      	b.n	80073f6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007358:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800735c:	f000 fffd 	bl	800835a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007360:	e043      	b.n	80073ea <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007362:	f107 030c 	add.w	r3, r7, #12
 8007366:	4619      	mov	r1, r3
 8007368:	4828      	ldr	r0, [pc, #160]	; (800740c <hci_send_req+0xf8>)
 800736a:	f000 fd42 	bl	8007df2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	7a5b      	ldrb	r3, [r3, #9]
 8007372:	2b0f      	cmp	r3, #15
 8007374:	d114      	bne.n	80073a0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	330b      	adds	r3, #11
 800737a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	885b      	ldrh	r3, [r3, #2]
 8007380:	b29b      	uxth	r3, r3
 8007382:	8bba      	ldrh	r2, [r7, #28]
 8007384:	429a      	cmp	r2, r3
 8007386:	d104      	bne.n	8007392 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	7812      	ldrb	r2, [r2, #0]
 8007390:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d027      	beq.n	80073ea <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800739a:	2301      	movs	r3, #1
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e024      	b.n	80073ea <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	330b      	adds	r3, #11
 80073a4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	8bba      	ldrh	r2, [r7, #28]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d114      	bne.n	80073de <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	7a9b      	ldrb	r3, [r3, #10]
 80073b8:	3b03      	subs	r3, #3
 80073ba:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	bfa8      	it	ge
 80073c6:	461a      	movge	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6918      	ldr	r0, [r3, #16]
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	1cd9      	adds	r1, r3, #3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	461a      	mov	r2, r3
 80073da:	f001 ffbd 	bl	8009358 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80073e6:	2301      	movs	r3, #1
 80073e8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80073ea:	4808      	ldr	r0, [pc, #32]	; (800740c <hci_send_req+0xf8>)
 80073ec:	f000 fc72 	bl	8007cd4 <LST_is_empty>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0b5      	beq.n	8007362 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80073f6:	7ffb      	ldrb	r3, [r7, #31]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0ad      	beq.n	8007358 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80073fc:	2001      	movs	r0, #1
 80073fe:	f000 f85d 	bl	80074bc <NotifyCmdStatus>

  return 0;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3720      	adds	r7, #32
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	200001f0 	.word	0x200001f0

08007410 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007418:	480f      	ldr	r0, [pc, #60]	; (8007458 <TlInit+0x48>)
 800741a:	f000 fc4b 	bl	8007cb4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800741e:	4a0f      	ldr	r2, [pc, #60]	; (800745c <TlInit+0x4c>)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007424:	480e      	ldr	r0, [pc, #56]	; (8007460 <TlInit+0x50>)
 8007426:	f000 fc45 	bl	8007cb4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800742a:	4b0e      	ldr	r3, [pc, #56]	; (8007464 <TlInit+0x54>)
 800742c:	2201      	movs	r2, #1
 800742e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007430:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <TlInit+0x58>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <TlInit+0x5c>)
 800743e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007440:	4b09      	ldr	r3, [pc, #36]	; (8007468 <TlInit+0x58>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f107 0208 	add.w	r2, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
  }

  return;
 800744c:	bf00      	nop
 800744e:	bf00      	nop
}
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200001f0 	.word	0x200001f0
 800745c:	200000f0 	.word	0x200000f0
 8007460:	200000e8 	.word	0x200000e8
 8007464:	200000f4 	.word	0x200000f4
 8007468:	200001d0 	.word	0x200001d0
 800746c:	080074fd 	.word	0x080074fd

08007470 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	603a      	str	r2, [r7, #0]
 800747a:	80fb      	strh	r3, [r7, #6]
 800747c:	460b      	mov	r3, r1
 800747e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007480:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <SendCmd+0x44>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	88fa      	ldrh	r2, [r7, #6]
 8007486:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <SendCmd+0x44>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	797a      	ldrb	r2, [r7, #5]
 8007490:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <SendCmd+0x44>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	330c      	adds	r3, #12
 8007498:	797a      	ldrb	r2, [r7, #5]
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	f001 ff5b 	bl	8009358 <memcpy>

  hciContext.io.Send(0,0);
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <SendCmd+0x48>)
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2100      	movs	r1, #0
 80074a8:	2000      	movs	r0, #0
 80074aa:	4798      	blx	r3

  return;
 80074ac:	bf00      	nop
}
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	200000f0 	.word	0x200000f0
 80074b8:	200001d0 	.word	0x200001d0

080074bc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <NotifyCmdStatus+0x3c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00d      	beq.n	80074f0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80074d4:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <NotifyCmdStatus+0x3c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2000      	movs	r0, #0
 80074da:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80074dc:	e008      	b.n	80074f0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <NotifyCmdStatus+0x3c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80074e6:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <NotifyCmdStatus+0x3c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2001      	movs	r0, #1
 80074ec:	4798      	blx	r3
  return;
 80074ee:	bf00      	nop
 80074f0:	bf00      	nop
}
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	200001f8 	.word	0x200001f8

080074fc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7a5b      	ldrb	r3, [r3, #9]
 8007508:	2b0f      	cmp	r3, #15
 800750a:	d003      	beq.n	8007514 <TlEvtReceived+0x18>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	7a5b      	ldrb	r3, [r3, #9]
 8007510:	2b0e      	cmp	r3, #14
 8007512:	d107      	bne.n	8007524 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4809      	ldr	r0, [pc, #36]	; (800753c <TlEvtReceived+0x40>)
 8007518:	f000 fc24 	bl	8007d64 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800751c:	2000      	movs	r0, #0
 800751e:	f000 ff11 	bl	8008344 <hci_cmd_resp_release>
 8007522:	e006      	b.n	8007532 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4806      	ldr	r0, [pc, #24]	; (8007540 <TlEvtReceived+0x44>)
 8007528:	f000 fc1c 	bl	8007d64 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800752c:	4804      	ldr	r0, [pc, #16]	; (8007540 <TlEvtReceived+0x44>)
 800752e:	f000 fefd 	bl	800832c <hci_notify_asynch_evt>
  }

  return;
 8007532:	bf00      	nop
}
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	200001f0 	.word	0x200001f0
 8007540:	200000e8 	.word	0x200000e8

08007544 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a05      	ldr	r2, [pc, #20]	; (8007564 <hci_register_io_bus+0x20>)
 8007550:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a04      	ldr	r2, [pc, #16]	; (8007568 <hci_register_io_bus+0x24>)
 8007556:	611a      	str	r2, [r3, #16]

  return;
 8007558:	bf00      	nop
}
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	08007855 	.word	0x08007855
 8007568:	080078bd 	.word	0x080078bd

0800756c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	4a08      	ldr	r2, [pc, #32]	; (800759c <shci_init+0x30>)
 800757c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800757e:	4a08      	ldr	r2, [pc, #32]	; (80075a0 <shci_init+0x34>)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007584:	4806      	ldr	r0, [pc, #24]	; (80075a0 <shci_init+0x34>)
 8007586:	f000 f911 	bl	80077ac <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 f894 	bl	80076bc <TlInit>

  return;
 8007594:	bf00      	nop
}
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	2000021c 	.word	0x2000021c
 80075a0:	200001fc 	.word	0x200001fc

080075a4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80075aa:	4822      	ldr	r0, [pc, #136]	; (8007634 <shci_user_evt_proc+0x90>)
 80075ac:	f000 fb92 	bl	8007cd4 <LST_is_empty>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d12b      	bne.n	800760e <shci_user_evt_proc+0x6a>
 80075b6:	4b20      	ldr	r3, [pc, #128]	; (8007638 <shci_user_evt_proc+0x94>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d027      	beq.n	800760e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80075be:	f107 030c 	add.w	r3, r7, #12
 80075c2:	4619      	mov	r1, r3
 80075c4:	481b      	ldr	r0, [pc, #108]	; (8007634 <shci_user_evt_proc+0x90>)
 80075c6:	f000 fc14 	bl	8007df2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80075ca:	4b1c      	ldr	r3, [pc, #112]	; (800763c <shci_user_evt_proc+0x98>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80075d6:	2301      	movs	r3, #1
 80075d8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80075da:	4b18      	ldr	r3, [pc, #96]	; (800763c <shci_user_evt_proc+0x98>)
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	1d3a      	adds	r2, r7, #4
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80075e4:	793a      	ldrb	r2, [r7, #4]
 80075e6:	4b14      	ldr	r3, [pc, #80]	; (8007638 <shci_user_evt_proc+0x94>)
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	e002      	b.n	80075f2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80075ec:	4b12      	ldr	r3, [pc, #72]	; (8007638 <shci_user_evt_proc+0x94>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <shci_user_evt_proc+0x94>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fa6d 	bl	8007adc <TL_MM_EvtDone>
 8007602:	e004      	b.n	800760e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4619      	mov	r1, r3
 8007608:	480a      	ldr	r0, [pc, #40]	; (8007634 <shci_user_evt_proc+0x90>)
 800760a:	f000 fb85 	bl	8007d18 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800760e:	4809      	ldr	r0, [pc, #36]	; (8007634 <shci_user_evt_proc+0x90>)
 8007610:	f000 fb60 	bl	8007cd4 <LST_is_empty>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d107      	bne.n	800762a <shci_user_evt_proc+0x86>
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <shci_user_evt_proc+0x94>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007622:	4804      	ldr	r0, [pc, #16]	; (8007634 <shci_user_evt_proc+0x90>)
 8007624:	f7f8 fff5 	bl	8000612 <shci_notify_asynch_evt>
  }


  return;
 8007628:	bf00      	nop
 800762a:	bf00      	nop
}
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000104 	.word	0x20000104
 8007638:	20000114 	.word	0x20000114
 800763c:	200001fc 	.word	0x200001fc

08007640 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	60ba      	str	r2, [r7, #8]
 8007648:	607b      	str	r3, [r7, #4]
 800764a:	4603      	mov	r3, r0
 800764c:	81fb      	strh	r3, [r7, #14]
 800764e:	460b      	mov	r3, r1
 8007650:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007652:	2000      	movs	r0, #0
 8007654:	f000 f864 	bl	8007720 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007658:	4b16      	ldr	r3, [pc, #88]	; (80076b4 <shci_send+0x74>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	89fa      	ldrh	r2, [r7, #14]
 800765e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007662:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <shci_send+0x74>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	7b7a      	ldrb	r2, [r7, #13]
 8007668:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800766a:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <shci_send+0x74>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	7b7a      	ldrb	r2, [r7, #13]
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fe6f 	bl	8009358 <memcpy>

  shciContext.io.Send(0,0);
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <shci_send+0x78>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2100      	movs	r1, #0
 8007680:	2000      	movs	r0, #0
 8007682:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007684:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007688:	f7f8 ffda 	bl	8000640 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f103 0008 	add.w	r0, r3, #8
 8007692:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <shci_send+0x74>)
 8007694:	6819      	ldr	r1, [r3, #0]
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <shci_send+0x74>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	789b      	ldrb	r3, [r3, #2]
 800769c:	3303      	adds	r3, #3
 800769e:	461a      	mov	r2, r3
 80076a0:	f001 fe5a 	bl	8009358 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80076a4:	2001      	movs	r0, #1
 80076a6:	f000 f83b 	bl	8007720 <Cmd_SetStatus>

  return;
 80076aa:	bf00      	nop
}
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000110 	.word	0x20000110
 80076b8:	200001fc 	.word	0x200001fc

080076bc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80076c4:	4a10      	ldr	r2, [pc, #64]	; (8007708 <TlInit+0x4c>)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80076ca:	4810      	ldr	r0, [pc, #64]	; (800770c <TlInit+0x50>)
 80076cc:	f000 faf2 	bl	8007cb4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80076d0:	2001      	movs	r0, #1
 80076d2:	f000 f825 	bl	8007720 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80076d6:	4b0e      	ldr	r3, [pc, #56]	; (8007710 <TlInit+0x54>)
 80076d8:	2201      	movs	r2, #1
 80076da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80076dc:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <TlInit+0x58>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00c      	beq.n	80076fe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80076e8:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <TlInit+0x5c>)
 80076ea:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <TlInit+0x60>)
 80076ee:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <TlInit+0x58>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f107 020c 	add.w	r2, r7, #12
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
  }

  return;
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
}
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000110 	.word	0x20000110
 800770c:	20000104 	.word	0x20000104
 8007710:	20000114 	.word	0x20000114
 8007714:	200001fc 	.word	0x200001fc
 8007718:	08007771 	.word	0x08007771
 800771c:	08007789 	.word	0x08007789

08007720 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10b      	bne.n	8007748 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007730:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <Cmd_SetStatus+0x48>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007738:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <Cmd_SetStatus+0x48>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2000      	movs	r0, #0
 800773e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <Cmd_SetStatus+0x4c>)
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007746:	e00b      	b.n	8007760 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007748:	4b08      	ldr	r3, [pc, #32]	; (800776c <Cmd_SetStatus+0x4c>)
 800774a:	2201      	movs	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800774e:	4b06      	ldr	r3, [pc, #24]	; (8007768 <Cmd_SetStatus+0x48>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007756:	4b04      	ldr	r3, [pc, #16]	; (8007768 <Cmd_SetStatus+0x48>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2001      	movs	r0, #1
 800775c:	4798      	blx	r3
  return;
 800775e:	bf00      	nop
 8007760:	bf00      	nop
}
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	2000021c 	.word	0x2000021c
 800776c:	2000010c 	.word	0x2000010c

08007770 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007778:	2000      	movs	r0, #0
 800777a:	f7f8 ff56 	bl	800062a <shci_cmd_resp_release>

  return;
 800777e:	bf00      	nop
}
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4805      	ldr	r0, [pc, #20]	; (80077a8 <TlUserEvtReceived+0x20>)
 8007794:	f000 fae6 	bl	8007d64 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007798:	4803      	ldr	r0, [pc, #12]	; (80077a8 <TlUserEvtReceived+0x20>)
 800779a:	f7f8 ff3a 	bl	8000612 <shci_notify_asynch_evt>

  return;
 800779e:	bf00      	nop
}
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000104 	.word	0x20000104

080077ac <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a05      	ldr	r2, [pc, #20]	; (80077cc <shci_register_io_bus+0x20>)
 80077b8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a04      	ldr	r2, [pc, #16]	; (80077d0 <shci_register_io_bus+0x24>)
 80077be:	611a      	str	r2, [r3, #16]

  return;
 80077c0:	bf00      	nop
}
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	08007969 	.word	0x08007969
 80077d0:	080079bd 	.word	0x080079bd

080077d4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80077d8:	f001 fa6a 	bl	8008cb0 <HW_IPCC_Enable>

  return;
 80077dc:	bf00      	nop
}
 80077de:	bd80      	pop	{r7, pc}

080077e0 <TL_Init>:


void TL_Init( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80077e4:	4b10      	ldr	r3, [pc, #64]	; (8007828 <TL_Init+0x48>)
 80077e6:	4a11      	ldr	r2, [pc, #68]	; (800782c <TL_Init+0x4c>)
 80077e8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <TL_Init+0x48>)
 80077ec:	4a10      	ldr	r2, [pc, #64]	; (8007830 <TL_Init+0x50>)
 80077ee:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80077f0:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <TL_Init+0x48>)
 80077f2:	4a10      	ldr	r2, [pc, #64]	; (8007834 <TL_Init+0x54>)
 80077f4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <TL_Init+0x48>)
 80077f8:	4a0f      	ldr	r2, [pc, #60]	; (8007838 <TL_Init+0x58>)
 80077fa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80077fc:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <TL_Init+0x48>)
 80077fe:	4a0f      	ldr	r2, [pc, #60]	; (800783c <TL_Init+0x5c>)
 8007800:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <TL_Init+0x48>)
 8007804:	4a0e      	ldr	r2, [pc, #56]	; (8007840 <TL_Init+0x60>)
 8007806:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <TL_Init+0x48>)
 800780a:	4a0e      	ldr	r2, [pc, #56]	; (8007844 <TL_Init+0x64>)
 800780c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <TL_Init+0x48>)
 8007810:	4a0d      	ldr	r2, [pc, #52]	; (8007848 <TL_Init+0x68>)
 8007812:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007814:	4b04      	ldr	r3, [pc, #16]	; (8007828 <TL_Init+0x48>)
 8007816:	4a0d      	ldr	r2, [pc, #52]	; (800784c <TL_Init+0x6c>)
 8007818:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800781a:	4b03      	ldr	r3, [pc, #12]	; (8007828 <TL_Init+0x48>)
 800781c:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <TL_Init+0x70>)
 800781e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007820:	f001 fa5a 	bl	8008cd8 <HW_IPCC_Init>

  return;
 8007824:	bf00      	nop
}
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20030000 	.word	0x20030000
 800782c:	20030028 	.word	0x20030028
 8007830:	20030048 	.word	0x20030048
 8007834:	20030058 	.word	0x20030058
 8007838:	20030064 	.word	0x20030064
 800783c:	2003006c 	.word	0x2003006c
 8007840:	20030074 	.word	0x20030074
 8007844:	2003007c 	.word	0x2003007c
 8007848:	20030098 	.word	0x20030098
 800784c:	2003009c 	.word	0x2003009c
 8007850:	200300a8 	.word	0x200300a8

08007854 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007860:	4811      	ldr	r0, [pc, #68]	; (80078a8 <TL_BLE_Init+0x54>)
 8007862:	f000 fa27 	bl	8007cb4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007866:	4b11      	ldr	r3, [pc, #68]	; (80078ac <TL_BLE_Init+0x58>)
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <TL_BLE_Init+0x5c>)
 8007880:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <TL_BLE_Init+0x54>)
 8007886:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007888:	f001 fa3c 	bl	8008d04 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <TL_BLE_Init+0x60>)
 8007892:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4a07      	ldr	r2, [pc, #28]	; (80078b8 <TL_BLE_Init+0x64>)
 800789a:	6013      	str	r3, [r2, #0]

  return 0;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200300c4 	.word	0x200300c4
 80078ac:	20030000 	.word	0x20030000
 80078b0:	20030a48 	.word	0x20030a48
 80078b4:	20000228 	.word	0x20000228
 80078b8:	2000022c 	.word	0x2000022c

080078bc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80078c8:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <TL_BLE_SendCmd+0x34>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2201      	movs	r2, #1
 80078d0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80078d2:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <TL_BLE_SendCmd+0x34>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4619      	mov	r1, r3
 80078da:	2001      	movs	r0, #1
 80078dc:	f000 f96c 	bl	8007bb8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80078e0:	f001 fa1a 	bl	8008d18 <HW_IPCC_BLE_SendCmd>

  return 0;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20030000 	.word	0x20030000

080078f4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80078fa:	e01c      	b.n	8007936 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80078fc:	1d3b      	adds	r3, r7, #4
 80078fe:	4619      	mov	r1, r3
 8007900:	4812      	ldr	r0, [pc, #72]	; (800794c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007902:	f000 fa76 	bl	8007df2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7a5b      	ldrb	r3, [r3, #9]
 800790a:	2b0f      	cmp	r3, #15
 800790c:	d003      	beq.n	8007916 <HW_IPCC_BLE_RxEvtNot+0x22>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7a5b      	ldrb	r3, [r3, #9]
 8007912:	2b0e      	cmp	r3, #14
 8007914:	d105      	bne.n	8007922 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4619      	mov	r1, r3
 800791a:	2002      	movs	r0, #2
 800791c:	f000 f94c 	bl	8007bb8 <OutputDbgTrace>
 8007920:	e004      	b.n	800792c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4619      	mov	r1, r3
 8007926:	2003      	movs	r0, #3
 8007928:	f000 f946 	bl	8007bb8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4610      	mov	r0, r2
 8007934:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007936:	4805      	ldr	r0, [pc, #20]	; (800794c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007938:	f000 f9cc 	bl	8007cd4 <LST_is_empty>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0dc      	beq.n	80078fc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007942:	bf00      	nop
}
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200300c4 	.word	0x200300c4
 8007950:	20000228 	.word	0x20000228

08007954 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007958:	4b02      	ldr	r3, [pc, #8]	; (8007964 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4798      	blx	r3

  return;
 800795e:	bf00      	nop
}
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	2000022c 	.word	0x2000022c

08007968 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007974:	480d      	ldr	r0, [pc, #52]	; (80079ac <TL_SYS_Init+0x44>)
 8007976:	f000 f99d 	bl	8007cb4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <TL_SYS_Init+0x48>)
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4a08      	ldr	r2, [pc, #32]	; (80079ac <TL_SYS_Init+0x44>)
 800798c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800798e:	f001 f9e5 	bl	8008d5c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a07      	ldr	r2, [pc, #28]	; (80079b4 <TL_SYS_Init+0x4c>)
 8007998:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	4a06      	ldr	r2, [pc, #24]	; (80079b8 <TL_SYS_Init+0x50>)
 80079a0:	6013      	str	r3, [r2, #0]

  return 0;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	200300cc 	.word	0x200300cc
 80079b0:	20030000 	.word	0x20030000
 80079b4:	20000230 	.word	0x20000230
 80079b8:	20000234 	.word	0x20000234

080079bc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80079c8:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <TL_SYS_SendCmd+0x34>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2210      	movs	r2, #16
 80079d0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80079d2:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <TL_SYS_SendCmd+0x34>)
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	2004      	movs	r0, #4
 80079dc:	f000 f8ec 	bl	8007bb8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80079e0:	f001 f9c6 	bl	8008d70 <HW_IPCC_SYS_SendCmd>

  return 0;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20030000 	.word	0x20030000

080079f4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80079f8:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4619      	mov	r1, r3
 8007a00:	2005      	movs	r0, #5
 8007a02:	f000 f8d9 	bl	8007bb8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a03      	ldr	r2, [pc, #12]	; (8007a18 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007a0c:	68d2      	ldr	r2, [r2, #12]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	4610      	mov	r0, r2
 8007a12:	4798      	blx	r3

  return;
 8007a14:	bf00      	nop
}
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20030000 	.word	0x20030000
 8007a1c:	20000230 	.word	0x20000230

08007a20 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007a26:	e00e      	b.n	8007a46 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007a28:	1d3b      	adds	r3, r7, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	480b      	ldr	r0, [pc, #44]	; (8007a5c <HW_IPCC_SYS_EvtNot+0x3c>)
 8007a2e:	f000 f9e0 	bl	8007df2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4619      	mov	r1, r3
 8007a36:	2006      	movs	r0, #6
 8007a38:	f000 f8be 	bl	8007bb8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007a3c:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <HW_IPCC_SYS_EvtNot+0x40>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	4610      	mov	r0, r2
 8007a44:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007a46:	4805      	ldr	r0, [pc, #20]	; (8007a5c <HW_IPCC_SYS_EvtNot+0x3c>)
 8007a48:	f000 f944 	bl	8007cd4 <LST_is_empty>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0ea      	beq.n	8007a28 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007a52:	bf00      	nop
}
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200300cc 	.word	0x200300cc
 8007a60:	20000234 	.word	0x20000234

08007a64 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007a6c:	4817      	ldr	r0, [pc, #92]	; (8007acc <TL_MM_Init+0x68>)
 8007a6e:	f000 f921 	bl	8007cb4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007a72:	4817      	ldr	r0, [pc, #92]	; (8007ad0 <TL_MM_Init+0x6c>)
 8007a74:	f000 f91e 	bl	8007cb4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007a78:	4b16      	ldr	r3, [pc, #88]	; (8007ad4 <TL_MM_Init+0x70>)
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	4a16      	ldr	r2, [pc, #88]	; (8007ad8 <TL_MM_Init+0x74>)
 8007a7e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007a80:	4b15      	ldr	r3, [pc, #84]	; (8007ad8 <TL_MM_Init+0x74>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6892      	ldr	r2, [r2, #8]
 8007a88:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007a8a:	4b13      	ldr	r3, [pc, #76]	; (8007ad8 <TL_MM_Init+0x74>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68d2      	ldr	r2, [r2, #12]
 8007a92:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007a94:	4b10      	ldr	r3, [pc, #64]	; (8007ad8 <TL_MM_Init+0x74>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0c      	ldr	r2, [pc, #48]	; (8007acc <TL_MM_Init+0x68>)
 8007a9a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007a9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <TL_MM_Init+0x74>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007aa6:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <TL_MM_Init+0x74>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6852      	ldr	r2, [r2, #4]
 8007aae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007ab0:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <TL_MM_Init+0x74>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6912      	ldr	r2, [r2, #16]
 8007ab8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007aba:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <TL_MM_Init+0x74>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6952      	ldr	r2, [r2, #20]
 8007ac2:	619a      	str	r2, [r3, #24]

  return;
 8007ac4:	bf00      	nop
}
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	200300b4 	.word	0x200300b4
 8007ad0:	20000220 	.word	0x20000220
 8007ad4:	20030000 	.word	0x20030000
 8007ad8:	20000238 	.word	0x20000238

08007adc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4807      	ldr	r0, [pc, #28]	; (8007b04 <TL_MM_EvtDone+0x28>)
 8007ae8:	f000 f93c 	bl	8007d64 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	2000      	movs	r0, #0
 8007af0:	f000 f862 	bl	8007bb8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007af4:	4804      	ldr	r0, [pc, #16]	; (8007b08 <TL_MM_EvtDone+0x2c>)
 8007af6:	f001 f961 	bl	8008dbc <HW_IPCC_MM_SendFreeBuf>

  return;
 8007afa:	bf00      	nop
}
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000220 	.word	0x20000220
 8007b08:	08007b0d 	.word	0x08007b0d

08007b0c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007b12:	e00c      	b.n	8007b2e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007b14:	1d3b      	adds	r3, r7, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	480a      	ldr	r0, [pc, #40]	; (8007b44 <SendFreeBuf+0x38>)
 8007b1a:	f000 f96a 	bl	8007df2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007b1e:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <SendFreeBuf+0x3c>)
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	4611      	mov	r1, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 f91b 	bl	8007d64 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007b2e:	4805      	ldr	r0, [pc, #20]	; (8007b44 <SendFreeBuf+0x38>)
 8007b30:	f000 f8d0 	bl	8007cd4 <LST_is_empty>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0ec      	beq.n	8007b14 <SendFreeBuf+0x8>
  }

  return;
 8007b3a:	bf00      	nop
}
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000220 	.word	0x20000220
 8007b48:	20030000 	.word	0x20030000

08007b4c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007b50:	4805      	ldr	r0, [pc, #20]	; (8007b68 <TL_TRACES_Init+0x1c>)
 8007b52:	f000 f8af 	bl	8007cb4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007b56:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <TL_TRACES_Init+0x20>)
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	4a03      	ldr	r2, [pc, #12]	; (8007b68 <TL_TRACES_Init+0x1c>)
 8007b5c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007b5e:	f001 f963 	bl	8008e28 <HW_IPCC_TRACES_Init>

  return;
 8007b62:	bf00      	nop
}
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	200300bc 	.word	0x200300bc
 8007b6c:	20030000 	.word	0x20030000

08007b70 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007b76:	e008      	b.n	8007b8a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007b78:	1d3b      	adds	r3, r7, #4
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007b7e:	f000 f938 	bl	8007df2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 f80d 	bl	8007ba4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007b8a:	4805      	ldr	r0, [pc, #20]	; (8007ba0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007b8c:	f000 f8a2 	bl	8007cd4 <LST_is_empty>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0f0      	beq.n	8007b78 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007b96:	bf00      	nop
}
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200300bc 	.word	0x200300bc

08007ba4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	6039      	str	r1, [r7, #0]
 8007bc2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b06      	cmp	r3, #6
 8007bc8:	d845      	bhi.n	8007c56 <OutputDbgTrace+0x9e>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <OutputDbgTrace+0x18>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007bed 	.word	0x08007bed
 8007bd4:	08007c11 	.word	0x08007c11
 8007bd8:	08007c17 	.word	0x08007c17
 8007bdc:	08007c2b 	.word	0x08007c2b
 8007be0:	08007c37 	.word	0x08007c37
 8007be4:	08007c3d 	.word	0x08007c3d
 8007be8:	08007c4b 	.word	0x08007c4b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	7a5b      	ldrb	r3, [r3, #9]
 8007bf4:	2bff      	cmp	r3, #255	; 0xff
 8007bf6:	d005      	beq.n	8007c04 <OutputDbgTrace+0x4c>
 8007bf8:	2bff      	cmp	r3, #255	; 0xff
 8007bfa:	dc05      	bgt.n	8007c08 <OutputDbgTrace+0x50>
 8007bfc:	2b0e      	cmp	r3, #14
 8007bfe:	d005      	beq.n	8007c0c <OutputDbgTrace+0x54>
 8007c00:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007c02:	e001      	b.n	8007c08 <OutputDbgTrace+0x50>
          break;
 8007c04:	bf00      	nop
 8007c06:	e027      	b.n	8007c58 <OutputDbgTrace+0xa0>
          break;
 8007c08:	bf00      	nop
 8007c0a:	e025      	b.n	8007c58 <OutputDbgTrace+0xa0>
          break;
 8007c0c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007c0e:	e023      	b.n	8007c58 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007c14:	e020      	b.n	8007c58 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	7a5b      	ldrb	r3, [r3, #9]
 8007c1e:	2b0e      	cmp	r3, #14
 8007c20:	d001      	beq.n	8007c26 <OutputDbgTrace+0x6e>
 8007c22:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007c24:	e000      	b.n	8007c28 <OutputDbgTrace+0x70>
          break;
 8007c26:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007c28:	e016      	b.n	8007c58 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	7a5b      	ldrb	r3, [r3, #9]
 8007c32:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007c34:	e010      	b.n	8007c58 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007c3a:	e00d      	b.n	8007c58 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	7a5b      	ldrb	r3, [r3, #9]
 8007c44:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007c46:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007c48:	e006      	b.n	8007c58 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	7a5b      	ldrb	r3, [r3, #9]
 8007c52:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007c54:	e000      	b.n	8007c58 <OutputDbgTrace+0xa0>

    default:
      break;
 8007c56:	bf00      	nop
  }

  return;
 8007c58:	bf00      	nop
}
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	; (8007cac <OTP_Read+0x48>)
 8007c70:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007c72:	e002      	b.n	8007c7a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3b08      	subs	r3, #8
 8007c78:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3307      	adds	r3, #7
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	79fa      	ldrb	r2, [r7, #7]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d003      	beq.n	8007c8e <OTP_Read+0x2a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4a09      	ldr	r2, [pc, #36]	; (8007cb0 <OTP_Read+0x4c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d1f2      	bne.n	8007c74 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3307      	adds	r3, #7
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	79fa      	ldrb	r2, [r7, #7]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d001      	beq.n	8007c9e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	1fff73f8 	.word	0x1fff73f8
 8007cb0:	1fff7000 	.word	0x1fff7000

08007cb4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	605a      	str	r2, [r3, #4]
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ce6:	b672      	cpsid	i
}
 8007ce8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d102      	bne.n	8007cfa <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
 8007cf8:	e001      	b.n	8007cfe <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f383 8810 	msr	PRIMASK, r3
}
 8007d08:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d22:	f3ef 8310 	mrs	r3, PRIMASK
 8007d26:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d28:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d2c:	b672      	cpsid	i
}
 8007d2e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	605a      	str	r2, [r3, #4]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f383 8810 	msr	PRIMASK, r3
}
 8007d56:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007d58:	bf00      	nop
 8007d5a:	371c      	adds	r7, #28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d72:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d74:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d78:	b672      	cpsid	i
}
 8007d7a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f383 8810 	msr	PRIMASK, r3
}
 8007da2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007da4:	bf00      	nop
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007db8:	f3ef 8310 	mrs	r3, PRIMASK
 8007dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007dc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dc2:	b672      	cpsid	i
}
 8007dc4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6852      	ldr	r2, [r2, #4]
 8007dd8:	605a      	str	r2, [r3, #4]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f383 8810 	msr	PRIMASK, r3
}
 8007de4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b086      	sub	sp, #24
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8007e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e02:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007e04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e06:	b672      	cpsid	i
}
 8007e08:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff ffca 	bl	8007db0 <LST_remove_node>
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f383 8810 	msr	PRIMASK, r3
}
 8007e26:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007e28:	bf00      	nop
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007e34:	4b03      	ldr	r3, [pc, #12]	; (8007e44 <LL_FLASH_GetUDN+0x14>)
 8007e36:	681b      	ldr	r3, [r3, #0]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	1fff7580 	.word	0x1fff7580

08007e48 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <LL_FLASH_GetDeviceID+0x14>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	b2db      	uxtb	r3, r3
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	1fff7584 	.word	0x1fff7584

08007e60 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007e64:	4b03      	ldr	r3, [pc, #12]	; (8007e74 <LL_FLASH_GetSTCompanyID+0x14>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	0a1b      	lsrs	r3, r3, #8
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	1fff7584 	.word	0x1fff7584

08007e78 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8007e78:	b5b0      	push	{r4, r5, r7, lr}
 8007e7a:	b08c      	sub	sp, #48	; 0x30
 8007e7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007e7e:	4b21      	ldr	r3, [pc, #132]	; (8007f04 <APP_BLE_Init+0x8c>)
 8007e80:	463c      	mov	r4, r7
 8007e82:	461d      	mov	r5, r3
 8007e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8007e94:	f000 f8fe 	bl	8008094 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007e98:	2101      	movs	r1, #1
 8007e9a:	2002      	movs	r0, #2
 8007e9c:	f000 ffec 	bl	8008e78 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007ea0:	4a19      	ldr	r2, [pc, #100]	; (8007f08 <APP_BLE_Init+0x90>)
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	2004      	movs	r0, #4
 8007ea6:	f001 f8fb 	bl	80090a0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8007eaa:	463b      	mov	r3, r7
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff f999 	bl	80071e4 <SHCI_C2_BLE_Init>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8007eb8:	f7f9 fcb4 	bl	8001824 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007ebc:	f000 f900 	bl	80080c0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007ec0:	f7ff f8ec 	bl	800709c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007ec4:	4b11      	ldr	r3, [pc, #68]	; (8007f0c <APP_BLE_Init+0x94>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007ecc:	4b0f      	ldr	r3, [pc, #60]	; (8007f0c <APP_BLE_Init+0x94>)
 8007ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ed2:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007ed4:	4a0e      	ldr	r2, [pc, #56]	; (8007f10 <APP_BLE_Init+0x98>)
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f001 f8e1 	bl	80090a0 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8007ede:	2006      	movs	r0, #6
 8007ee0:	f7fe ff76 	bl	8006dd0 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007ee4:	f000 fafc 	bl	80084e0 <Custom_APP_Init>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007ee8:	4b08      	ldr	r3, [pc, #32]	; (8007f0c <APP_BLE_Init+0x94>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <APP_BLE_Init+0x94>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	f000 f98b 	bl	8008210 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8007efa:	bf00      	nop
}
 8007efc:	3730      	adds	r7, #48	; 0x30
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bdb0      	pop	{r4, r5, r7, pc}
 8007f02:	bf00      	nop
 8007f04:	080093f4 	.word	0x080093f4
 8007f08:	08007279 	.word	0x08007279
 8007f0c:	20000118 	.word	0x20000118
 8007f10:	080082f9 	.word	0x080082f9

08007f14 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	; 0x28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */
//  Custom_STM_Opcode_evt_t Notification;
  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2bff      	cmp	r3, #255	; 0xff
 8007f28:	d053      	beq.n	8007fd2 <SVCCTL_App_Notification+0xbe>
 8007f2a:	2bff      	cmp	r3, #255	; 0xff
 8007f2c:	f300 80a3 	bgt.w	8008076 <SVCCTL_App_Notification+0x162>
 8007f30:	2b05      	cmp	r3, #5
 8007f32:	d002      	beq.n	8007f3a <SVCCTL_App_Notification+0x26>
 8007f34:	2b3e      	cmp	r3, #62	; 0x3e
 8007f36:	d020      	beq.n	8007f7a <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007f38:	e09d      	b.n	8008076 <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	3302      	adds	r3, #2
 8007f3e:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	4b4f      	ldr	r3, [pc, #316]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007f4a:	8adb      	ldrh	r3, [r3, #22]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d106      	bne.n	8007f5e <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007f50:	4b4d      	ldr	r3, [pc, #308]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007f56:	4b4c      	ldr	r3, [pc, #304]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007f5e:	2001      	movs	r0, #1
 8007f60:	f000 f956 	bl	8008210 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007f64:	4b49      	ldr	r3, [pc, #292]	; (800808c <SVCCTL_App_Notification+0x178>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007f6a:	4b47      	ldr	r3, [pc, #284]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007f6c:	8ada      	ldrh	r2, [r3, #22]
 8007f6e:	4b47      	ldr	r3, [pc, #284]	; (800808c <SVCCTL_App_Notification+0x178>)
 8007f70:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 8007f72:	4846      	ldr	r0, [pc, #280]	; (800808c <SVCCTL_App_Notification+0x178>)
 8007f74:	f000 fa8e 	bl	8008494 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007f78:	e080      	b.n	800807c <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d001      	beq.n	8007f8c <SVCCTL_App_Notification+0x78>
 8007f88:	2b03      	cmp	r3, #3
          break;
 8007f8a:	e021      	b.n	8007fd0 <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007f92:	4b3d      	ldr	r3, [pc, #244]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007f94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d104      	bne.n	8007fa6 <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007f9c:	4b3a      	ldr	r3, [pc, #232]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007f9e:	2206      	movs	r2, #6
 8007fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007fa4:	e003      	b.n	8007fae <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007fa6:	4b38      	ldr	r3, [pc, #224]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007fa8:	2205      	movs	r2, #5
 8007faa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	4b34      	ldr	r3, [pc, #208]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007fb8:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007fba:	4b34      	ldr	r3, [pc, #208]	; (800808c <SVCCTL_App_Notification+0x178>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007fc0:	4b31      	ldr	r3, [pc, #196]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8007fc2:	8ada      	ldrh	r2, [r3, #22]
 8007fc4:	4b31      	ldr	r3, [pc, #196]	; (800808c <SVCCTL_App_Notification+0x178>)
 8007fc6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 8007fc8:	4830      	ldr	r0, [pc, #192]	; (800808c <SVCCTL_App_Notification+0x178>)
 8007fca:	f000 fa63 	bl	8008494 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007fce:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8007fd0:	e054      	b.n	800807c <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	3302      	adds	r3, #2
 8007fd6:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe2:	d042      	beq.n	800806a <SVCCTL_App_Notification+0x156>
 8007fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe8:	dc47      	bgt.n	800807a <SVCCTL_App_Notification+0x166>
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d03f      	beq.n	800806e <SVCCTL_App_Notification+0x15a>
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	db43      	blt.n	800807a <SVCCTL_App_Notification+0x166>
 8007ff2:	f240 420a 	movw	r2, #1034	; 0x40a
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	dc3f      	bgt.n	800807a <SVCCTL_App_Notification+0x166>
 8007ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffe:	dd3c      	ble.n	800807a <SVCCTL_App_Notification+0x166>
 8008000:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008004:	2b09      	cmp	r3, #9
 8008006:	d838      	bhi.n	800807a <SVCCTL_App_Notification+0x166>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <SVCCTL_App_Notification+0xfc>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008063 	.word	0x08008063
 8008014:	08008039 	.word	0x08008039
 8008018:	0800807b 	.word	0x0800807b
 800801c:	0800807b 	.word	0x0800807b
 8008020:	0800807b 	.word	0x0800807b
 8008024:	0800807b 	.word	0x0800807b
 8008028:	08008073 	.word	0x08008073
 800802c:	0800807b 	.word	0x0800807b
 8008030:	08008047 	.word	0x08008047
 8008034:	08008073 	.word	0x08008073
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008038:	4b13      	ldr	r3, [pc, #76]	; (8008088 <SVCCTL_App_Notification+0x174>)
 800803a:	8adb      	ldrh	r3, [r3, #22]
 800803c:	4914      	ldr	r1, [pc, #80]	; (8008090 <SVCCTL_App_Notification+0x17c>)
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe fa08 	bl	8006454 <aci_gap_pass_key_resp>
        break;
 8008044:	e016      	b.n	8008074 <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	3302      	adds	r3, #2
 800804a:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008052:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008054:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <SVCCTL_App_Notification+0x174>)
 8008056:	8adb      	ldrh	r3, [r3, #22]
 8008058:	2101      	movs	r1, #1
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fb5c 	bl	8006718 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8008060:	e008      	b.n	8008074 <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	3302      	adds	r3, #2
 8008066:	617b      	str	r3, [r7, #20]
        break;
 8008068:	e004      	b.n	8008074 <SVCCTL_App_Notification+0x160>
      break;
 800806a:	bf00      	nop
 800806c:	e005      	b.n	800807a <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800806e:	bf00      	nop
 8008070:	e003      	b.n	800807a <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008072:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008074:	e001      	b.n	800807a <SVCCTL_App_Notification+0x166>
      break;
 8008076:	bf00      	nop
 8008078:	e000      	b.n	800807c <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800807a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800807c:	2301      	movs	r3, #1
}
 800807e:	4618      	mov	r0, r3
 8008080:	3728      	adds	r7, #40	; 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000118 	.word	0x20000118
 800808c:	2000046c 	.word	0x2000046c
 8008090:	0001b207 	.word	0x0001b207

08008094 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800809a:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <Ble_Tl_Init+0x20>)
 800809c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800809e:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <Ble_Tl_Init+0x24>)
 80080a0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80080a2:	463b      	mov	r3, r7
 80080a4:	4619      	mov	r1, r3
 80080a6:	4805      	ldr	r0, [pc, #20]	; (80080bc <Ble_Tl_Init+0x28>)
 80080a8:	f7ff f8ca 	bl	8007240 <hci_init>

  return;
 80080ac:	bf00      	nop
}
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	200300d4 	.word	0x200300d4
 80080b8:	080083a9 	.word	0x080083a9
 80080bc:	08008371 	.word	0x08008371

080080c0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80080c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080c2:	b08f      	sub	sp, #60	; 0x3c
 80080c4:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80080c6:	2300      	movs	r3, #0
 80080c8:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80080ca:	f7fe fecb 	bl	8006e64 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80080ce:	f000 f8cf 	bl	8008270 <BleGetBdAddress>
 80080d2:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	2106      	movs	r1, #6
 80080d8:	2000      	movs	r0, #0
 80080da:	f7fe fdb9 	bl	8006c50 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80080de:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80080e2:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80080e4:	f7ff fea4 	bl	8007e30 <LL_FLASH_GetUDN>
 80080e8:	4603      	mov	r3, r0
 80080ea:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80080ec:	1d3b      	adds	r3, r7, #4
 80080ee:	461a      	mov	r2, r3
 80080f0:	2106      	movs	r1, #6
 80080f2:	202e      	movs	r0, #46	; 0x2e
 80080f4:	f7fe fdac 	bl	8006c50 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80080f8:	4a40      	ldr	r2, [pc, #256]	; (80081fc <Ble_Hci_Gap_Gatt_Init+0x13c>)
 80080fa:	2110      	movs	r1, #16
 80080fc:	2018      	movs	r0, #24
 80080fe:	f7fe fda7 	bl	8006c50 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8008102:	4a3f      	ldr	r2, [pc, #252]	; (8008200 <Ble_Hci_Gap_Gatt_Init+0x140>)
 8008104:	2110      	movs	r1, #16
 8008106:	2008      	movs	r0, #8
 8008108:	f7fe fda2 	bl	8006c50 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800810c:	2118      	movs	r1, #24
 800810e:	2001      	movs	r0, #1
 8008110:	f7fe fe07 	bl	8006d22 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8008114:	f7fe fb57 	bl	80067c6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800811c:	7efb      	ldrb	r3, [r7, #27]
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8008124:	7efb      	ldrb	r3, [r7, #27]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d01e      	beq.n	8008168 <Ble_Hci_Gap_Gatt_Init+0xa8>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800812a:	4b36      	ldr	r3, [pc, #216]	; (8008204 <Ble_Hci_Gap_Gatt_Init+0x144>)
 800812c:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 800812e:	f107 0212 	add.w	r2, r7, #18
 8008132:	7ef8      	ldrb	r0, [r7, #27]
 8008134:	f107 030e 	add.w	r3, r7, #14
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f107 0310 	add.w	r3, r7, #16
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	2208      	movs	r2, #8
 8008144:	2100      	movs	r1, #0
 8008146:	f7fe f9dc 	bl	8006502 <aci_gap_init>
                CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800814a:	8a7c      	ldrh	r4, [r7, #18]
 800814c:	8a3d      	ldrh	r5, [r7, #16]
 800814e:	6978      	ldr	r0, [r7, #20]
 8008150:	f7f8 f814 	bl	800017c <strlen>
 8008154:	4603      	mov	r3, r0
 8008156:	b2da      	uxtb	r2, r3
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	4613      	mov	r3, r2
 800815e:	2200      	movs	r2, #0
 8008160:	4629      	mov	r1, r5
 8008162:	4620      	mov	r0, r4
 8008164:	f7fe fced 	bl	8006b42 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8008168:	8a78      	ldrh	r0, [r7, #18]
 800816a:	89f9      	ldrh	r1, [r7, #14]
 800816c:	463b      	mov	r3, r7
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	2302      	movs	r3, #2
 8008172:	2200      	movs	r2, #0
 8008174:	f7fe fce5 	bl	8006b42 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008178:	2202      	movs	r2, #2
 800817a:	2102      	movs	r1, #2
 800817c:	2000      	movs	r0, #0
 800817e:	f7fe fe95 	bl	8006eac <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008182:	4b21      	ldr	r3, [pc, #132]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008184:	2201      	movs	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008188:	4b1f      	ldr	r3, [pc, #124]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe f86f 	bl	8006270 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008192:	4b1d      	ldr	r3, [pc, #116]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 8008194:	2201      	movs	r2, #1
 8008196:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008198:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 800819a:	2208      	movs	r2, #8
 800819c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800819e:	4b1a      	ldr	r3, [pc, #104]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081a0:	2210      	movs	r2, #16
 80081a2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80081a4:	4b18      	ldr	r3, [pc, #96]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80081aa:	4b17      	ldr	r3, [pc, #92]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081ac:	4a17      	ldr	r2, [pc, #92]	; (800820c <Ble_Hci_Gap_Gatt_Init+0x14c>)
 80081ae:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80081b0:	4b15      	ldr	r3, [pc, #84]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081b8:	789c      	ldrb	r4, [r3, #2]
 80081ba:	4b13      	ldr	r3, [pc, #76]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081bc:	785d      	ldrb	r5, [r3, #1]
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081c0:	791b      	ldrb	r3, [r3, #4]
 80081c2:	4a11      	ldr	r2, [pc, #68]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081c4:	7952      	ldrb	r2, [r2, #5]
 80081c6:	4910      	ldr	r1, [pc, #64]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081c8:	78c9      	ldrb	r1, [r1, #3]
 80081ca:	480f      	ldr	r0, [pc, #60]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081cc:	6880      	ldr	r0, [r0, #8]
 80081ce:	2600      	movs	r6, #0
 80081d0:	9604      	str	r6, [sp, #16]
 80081d2:	9003      	str	r0, [sp, #12]
 80081d4:	9102      	str	r1, [sp, #8]
 80081d6:	9201      	str	r2, [sp, #4]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	2300      	movs	r3, #0
 80081dc:	2201      	movs	r2, #1
 80081de:	4629      	mov	r1, r5
 80081e0:	4620      	mov	r0, r4
 80081e2:	f7fe f88f 	bl	8006304 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80081e6:	4b08      	ldr	r3, [pc, #32]	; (8008208 <Ble_Hci_Gap_Gatt_Init+0x148>)
 80081e8:	789b      	ldrb	r3, [r3, #2]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <Ble_Hci_Gap_Gatt_Init+0x132>
   {
     aci_gap_configure_whitelist();
 80081ee:	f7fe fa6f 	bl	80066d0 <aci_gap_configure_whitelist>
   }
}
 80081f2:	bf00      	nop
 80081f4:	3724      	adds	r7, #36	; 0x24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fa:	bf00      	nop
 80081fc:	08009610 	.word	0x08009610
 8008200:	08009620 	.word	0x08009620
 8008204:	08009424 	.word	0x08009424
 8008208:	20000118 	.word	0x20000118
 800820c:	0001b207 	.word	0x0001b207

08008210 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08c      	sub	sp, #48	; 0x30
 8008214:	af08      	add	r7, sp, #32
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800821a:	2342      	movs	r3, #66	; 0x42
 800821c:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 800821e:	4a12      	ldr	r2, [pc, #72]	; (8008268 <Adv_Request+0x58>)
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008226:	2300      	movs	r3, #0
 8008228:	9306      	str	r3, [sp, #24]
 800822a:	2300      	movs	r3, #0
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	2300      	movs	r3, #0
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	2300      	movs	r3, #0
 8008234:	9303      	str	r3, [sp, #12]
 8008236:	2300      	movs	r3, #0
 8008238:	9302      	str	r3, [sp, #8]
 800823a:	2300      	movs	r3, #0
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	2300      	movs	r3, #0
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	2300      	movs	r3, #0
 8008244:	22a0      	movs	r2, #160	; 0xa0
 8008246:	2180      	movs	r1, #128	; 0x80
 8008248:	2000      	movs	r0, #0
 800824a:	f7fd ff33 	bl	80060b4 <aci_gap_set_discoverable>
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8008252:	4906      	ldr	r1, [pc, #24]	; (800826c <Adv_Request+0x5c>)
 8008254:	200c      	movs	r0, #12
 8008256:	f7fe f9df 	bl	8006618 <aci_gap_update_adv_data>
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 800825e:	bf00      	nop
}
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000118 	.word	0x20000118
 800826c:	20000010 	.word	0x20000010

08008270 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008276:	f7ff fddb 	bl	8007e30 <LL_FLASH_GetUDN>
 800827a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008282:	d023      	beq.n	80082cc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008284:	f7ff fdec 	bl	8007e60 <LL_FLASH_GetSTCompanyID>
 8008288:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800828a:	f7ff fddd 	bl	8007e48 <LL_FLASH_GetDeviceID>
 800828e:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <BleGetBdAddress+0x80>)
 8008296:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	b2da      	uxtb	r2, r3
 800829e:	4b14      	ldr	r3, [pc, #80]	; (80082f0 <BleGetBdAddress+0x80>)
 80082a0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <BleGetBdAddress+0x80>)
 80082a8:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <BleGetBdAddress+0x80>)
 80082b0:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	0a1b      	lsrs	r3, r3, #8
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <BleGetBdAddress+0x80>)
 80082ba:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <BleGetBdAddress+0x80>)
 80082c4:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 80082c6:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <BleGetBdAddress+0x80>)
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	e00b      	b.n	80082e4 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80082cc:	2000      	movs	r0, #0
 80082ce:	f7ff fcc9 	bl	8007c64 <OTP_Read>
 80082d2:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e001      	b.n	80082e4 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80082e0:	4b04      	ldr	r3, [pc, #16]	; (80082f4 <BleGetBdAddress+0x84>)
 80082e2:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 80082e4:	697b      	ldr	r3, [r7, #20]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	2000023c 	.word	0x2000023c
 80082f4:	08009608 	.word	0x08009608

080082f8 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80082fe:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <Adv_Cancel+0x30>)
 8008300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008304:	2b05      	cmp	r3, #5
 8008306:	d00a      	beq.n	800831e <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8008308:	2300      	movs	r3, #0
 800830a:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800830c:	f7fd feae 	bl	800606c <aci_gap_set_non_discoverable>
 8008310:	4603      	mov	r3, r0
 8008312:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008314:	4b04      	ldr	r3, [pc, #16]	; (8008328 <Adv_Cancel+0x30>)
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800831c:	bf00      	nop
 800831e:	bf00      	nop
}
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20000118 	.word	0x20000118

0800832c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008334:	2100      	movs	r1, #0
 8008336:	2004      	movs	r0, #4
 8008338:	f000 fed4 	bl	80090e4 <UTIL_SEQ_SetTask>
  return;
 800833c:	bf00      	nop
}
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800834c:	2001      	movs	r0, #1
 800834e:	f000 ff35 	bl	80091bc <UTIL_SEQ_SetEvt>
  return;
 8008352:	bf00      	nop
}
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008362:	2001      	movs	r0, #1
 8008364:	f000 ff4a 	bl	80091fc <UTIL_SEQ_WaitEvt>
  return;
 8008368:	bf00      	nop
}
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	3308      	adds	r3, #8
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe feda 	bl	800713c <SVCCTL_UserEvtRx>
 8008388:	4603      	mov	r3, r0
 800838a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8008398:	e002      	b.n	80083a0 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <BLE_StatusNot+0x16>
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d006      	beq.n	80083ca <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 80083bc:	e00b      	b.n	80083d6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80083be:	231f      	movs	r3, #31
 80083c0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 feba 	bl	800913c <UTIL_SEQ_PauseTask>
      break;
 80083c8:	e005      	b.n	80083d6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80083ca:	231f      	movs	r3, #31
 80083cc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 fed4 	bl	800917c <UTIL_SEQ_ResumeTask>
      break;
 80083d4:	bf00      	nop
  }
  return;
 80083d6:	bf00      	nop
}
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <Custom_STM_App_Notification>:
static void callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

/* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b05      	cmp	r3, #5
 80083ee:	d848      	bhi.n	8008482 <Custom_STM_App_Notification+0xa2>
 80083f0:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <Custom_STM_App_Notification+0x18>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	08008411 	.word	0x08008411
 80083fc:	0800841b 	.word	0x0800841b
 8008400:	0800842d 	.word	0x0800842d
 8008404:	0800843f 	.word	0x0800843f
 8008408:	08008449 	.word	0x08008449
 800840c:	08008467 	.word	0x08008467
/* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

  /* battery_service */
    case CUSTOM_STM_BVAL_READ_EVT:
/* USER CODE BEGIN CUSTOM_STM_BVAL_READ_EVT */
    	UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_BATT,CFG_SCH_PRIO_0);
 8008410:	2100      	movs	r1, #0
 8008412:	2010      	movs	r0, #16
 8008414:	f000 fe66 	bl	80090e4 <UTIL_SEQ_SetTask>
/* USER CODE END CUSTOM_STM_BVAL_READ_EVT */
      break;
 8008418:	e034      	b.n	8008484 <Custom_STM_App_Notification+0xa4>

    case CUSTOM_STM_BVAL_NOTIFY_ENABLED_EVT:
/* USER CODE BEGIN CUSTOM_STM_BVAL_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Bval_Notification_Status=1;
 800841a:	4b1c      	ldr	r3, [pc, #112]	; (800848c <Custom_STM_App_Notification+0xac>)
 800841c:	2201      	movs	r2, #1
 800841e:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_SET);
 8008420:	2201      	movs	r2, #1
 8008422:	2102      	movs	r1, #2
 8008424:	481a      	ldr	r0, [pc, #104]	; (8008490 <Custom_STM_App_Notification+0xb0>)
 8008426:	f7fb f8c3 	bl	80035b0 <HAL_GPIO_WritePin>
//    	HW_TS_Start(Custom_App_Context.TIMER,eeg_chnge_period);
/* USER CODE END CUSTOM_STM_BVAL_NOTIFY_ENABLED_EVT */
      break;
 800842a:	e02b      	b.n	8008484 <Custom_STM_App_Notification+0xa4>

    case CUSTOM_STM_BVAL_NOTIFY_DISABLED_EVT:
/* USER CODE BEGIN CUSTOM_STM_BVAL_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Bval_Notification_Status=0;
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <Custom_STM_App_Notification+0xac>)
 800842e:	2200      	movs	r2, #0
 8008430:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 8008432:	2200      	movs	r2, #0
 8008434:	2102      	movs	r1, #2
 8008436:	4816      	ldr	r0, [pc, #88]	; (8008490 <Custom_STM_App_Notification+0xb0>)
 8008438:	f7fb f8ba 	bl	80035b0 <HAL_GPIO_WritePin>
//    	HW_TS_Stop(Custom_App_Context.TIMER);
/* USER CODE END CUSTOM_STM_BVAL_NOTIFY_DISABLED_EVT */
      break;
 800843c:	e022      	b.n	8008484 <Custom_STM_App_Notification+0xa4>

  /* eeg_service */
    case CUSTOM_STM_VAL_READ_EVT:
/* USER CODE BEGIN CUSTOM_STM_VAL_READ_EVT */
    	UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_TEMP,CFG_SCH_PRIO_0);
 800843e:	2100      	movs	r1, #0
 8008440:	2008      	movs	r0, #8
 8008442:	f000 fe4f 	bl	80090e4 <UTIL_SEQ_SetTask>
/* USER CODE END CUSTOM_STM_VAL_READ_EVT */
      break;
 8008446:	e01d      	b.n	8008484 <Custom_STM_App_Notification+0xa4>

    case CUSTOM_STM_VAL_NOTIFY_ENABLED_EVT:
/* USER CODE BEGIN CUSTOM_STM_VAL_NOTIFY_ENABLED_EVT */
//    	HW_TS_Start(Custom_App_Context.TIMER,eeg_chnge_period);
    	Custom_App_Context.Val_Notification_Status=1;
 8008448:	4b10      	ldr	r3, [pc, #64]	; (800848c <Custom_STM_App_Notification+0xac>)
 800844a:	2201      	movs	r2, #1
 800844c:	705a      	strb	r2, [r3, #1]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 800844e:	2201      	movs	r2, #1
 8008450:	2120      	movs	r1, #32
 8008452:	480f      	ldr	r0, [pc, #60]	; (8008490 <Custom_STM_App_Notification+0xb0>)
 8008454:	f7fb f8ac 	bl	80035b0 <HAL_GPIO_WritePin>
    	HW_TS_Start(Custom_App_Context.TIMER,eeg_chnge_period);
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <Custom_STM_App_Notification+0xac>)
 800845a:	7a1b      	ldrb	r3, [r3, #8]
 800845c:	2114      	movs	r1, #20
 800845e:	4618      	mov	r0, r3
 8008460:	f7f8 ff10 	bl	8001284 <HW_TS_Start>
/* USER CODE END CUSTOM_STM_VAL_NOTIFY_ENABLED_EVT */
      break;
 8008464:	e00e      	b.n	8008484 <Custom_STM_App_Notification+0xa4>

    case CUSTOM_STM_VAL_NOTIFY_DISABLED_EVT:
/* USER CODE BEGIN CUSTOM_STM_VAL_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Val_Notification_Status=0;
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <Custom_STM_App_Notification+0xac>)
 8008468:	2200      	movs	r2, #0
 800846a:	705a      	strb	r2, [r3, #1]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 800846c:	2200      	movs	r2, #0
 800846e:	2120      	movs	r1, #32
 8008470:	4807      	ldr	r0, [pc, #28]	; (8008490 <Custom_STM_App_Notification+0xb0>)
 8008472:	f7fb f89d 	bl	80035b0 <HAL_GPIO_WritePin>
     	HW_TS_Stop(Custom_App_Context.TIMER);
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <Custom_STM_App_Notification+0xac>)
 8008478:	7a1b      	ldrb	r3, [r3, #8]
 800847a:	4618      	mov	r0, r3
 800847c:	f7f8 fe76 	bl	800116c <HW_TS_Stop>
/* USER CODE END CUSTOM_STM_VAL_NOTIFY_DISABLED_EVT */
      break;
 8008480:	e000      	b.n	8008484 <Custom_STM_App_Notification+0xa4>

    default:
/* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

/* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008482:	bf00      	nop
  }
/* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

/* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008484:	bf00      	nop
}
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	2000019c 	.word	0x2000019c
 8008490:	48000400 	.word	0x48000400

08008494 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN CUSTOM_APP_Notification_1 */

/* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d013      	beq.n	80084cc <Custom_APP_Notification+0x38>
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d000      	beq.n	80084aa <Custom_APP_Notification+0x16>

    default:
/* USER CODE BEGIN CUSTOM_APP_Notification_default */

/* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80084a8:	e011      	b.n	80084ce <Custom_APP_Notification+0x3a>
    	Custom_App_Context.Val_Notification_Status=0;
 80084aa:	4b0b      	ldr	r3, [pc, #44]	; (80084d8 <Custom_APP_Notification+0x44>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	705a      	strb	r2, [r3, #1]
    	Custom_App_Context.Bval_Notification_Status=0;
 80084b0:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <Custom_APP_Notification+0x44>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80084b6:	2200      	movs	r2, #0
 80084b8:	2120      	movs	r1, #32
 80084ba:	4808      	ldr	r0, [pc, #32]	; (80084dc <Custom_APP_Notification+0x48>)
 80084bc:	f7fb f878 	bl	80035b0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,GPIO_PIN_RESET);
 80084c0:	2200      	movs	r2, #0
 80084c2:	2102      	movs	r1, #2
 80084c4:	4805      	ldr	r0, [pc, #20]	; (80084dc <Custom_APP_Notification+0x48>)
 80084c6:	f7fb f873 	bl	80035b0 <HAL_GPIO_WritePin>
    break;
 80084ca:	e000      	b.n	80084ce <Custom_APP_Notification+0x3a>
    break;
 80084cc:	bf00      	nop

/* USER CODE BEGIN CUSTOM_APP_Notification_2 */

/* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80084ce:	bf00      	nop
}
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000019c 	.word	0x2000019c
 80084dc:	48000400 	.word	0x48000400

080084e0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN CUSTOM_APP_Init */
//	CFG_TASK_NOTIFY_TEMP,
//		CFG_TASK_NOTIFY_BATT,
	  /* battery_service */
	Custom_App_Context.EEG_VAL=0;
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <Custom_APP_Init+0x48>)
 80084e6:	2200      	movs	r2, #0
 80084e8:	809a      	strh	r2, [r3, #4]
	Custom_App_Context.BAT_VAL=0;
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <Custom_APP_Init+0x48>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	805a      	strh	r2, [r3, #2]
	Custom_App_Context.STEP=eeg_chnge_step;
 80084f0:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <Custom_APP_Init+0x48>)
 80084f2:	220a      	movs	r2, #10
 80084f4:	80da      	strh	r2, [r3, #6]
	Custom_App_Context.Val_Notification_Status=0;
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <Custom_APP_Init+0x48>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	705a      	strb	r2, [r3, #1]
	Custom_App_Context.Bval_Notification_Status=0;
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <Custom_APP_Init+0x48>)
 80084fe:	2200      	movs	r2, #0
 8008500:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_RegTask(1<<CFG_TASK_NOTIFY_TEMP,UTIL_SEQ_RFU,Custom_Val_Update_Char);
 8008502:	4a0a      	ldr	r2, [pc, #40]	; (800852c <Custom_APP_Init+0x4c>)
 8008504:	2100      	movs	r1, #0
 8008506:	2008      	movs	r0, #8
 8008508:	f000 fdca 	bl	80090a0 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_NOTIFY_BATT,UTIL_SEQ_RFU,Custom_Bval_Update_Char);
 800850c:	4a08      	ldr	r2, [pc, #32]	; (8008530 <Custom_APP_Init+0x50>)
 800850e:	2100      	movs	r1, #0
 8008510:	2010      	movs	r0, #16
 8008512:	f000 fdc5 	bl	80090a0 <UTIL_SEQ_RegTask>

	HW_TS_Create(CFG_TIM_PROC_ID_ISR,&(Custom_App_Context.TIMER),hw_ts_Repeated,callback);
 8008516:	4b07      	ldr	r3, [pc, #28]	; (8008534 <Custom_APP_Init+0x54>)
 8008518:	2201      	movs	r2, #1
 800851a:	4907      	ldr	r1, [pc, #28]	; (8008538 <Custom_APP_Init+0x58>)
 800851c:	2000      	movs	r0, #0
 800851e:	f7f8 fdab 	bl	8001078 <HW_TS_Create>
/* USER CODE END CUSTOM_APP_Init */
  return;
 8008522:	bf00      	nop
}
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	2000019c 	.word	0x2000019c
 800852c:	08008589 	.word	0x08008589
 8008530:	0800854d 	.word	0x0800854d
 8008534:	0800853d 	.word	0x0800853d
 8008538:	200001a4 	.word	0x200001a4

0800853c <callback>:

/* USER CODE BEGIN FD */
static void callback(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_SET);
	UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_TEMP,CFG_SCH_PRIO_0);
 8008540:	2100      	movs	r1, #0
 8008542:	2008      	movs	r0, #8
 8008544:	f000 fdce 	bl	80090e4 <UTIL_SEQ_SetTask>
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,GPIO_PIN_RESET);
}
 8008548:	bf00      	nop
 800854a:	bd80      	pop	{r7, pc}

0800854c <Custom_Bval_Update_Char>:
 *
 *************************************************************/

  /* battery_service */
void Custom_Bval_Update_Char(void) /* Property Read */
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Bval_UC*/
  UpdateCharData[0]=(uint8_t)(Custom_App_Context.BAT_VAL& 0x00FF);
 8008550:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <Custom_Bval_Update_Char+0x34>)
 8008552:	885b      	ldrh	r3, [r3, #2]
 8008554:	b2da      	uxtb	r2, r3
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <Custom_Bval_Update_Char+0x38>)
 8008558:	701a      	strb	r2, [r3, #0]
  UpdateCharData[1]=(uint8_t)(Custom_App_Context.BAT_VAL>>8);
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <Custom_Bval_Update_Char+0x34>)
 800855c:	885b      	ldrh	r3, [r3, #2]
 800855e:	0a1b      	lsrs	r3, r3, #8
 8008560:	b29b      	uxth	r3, r3
 8008562:	b2da      	uxtb	r2, r3
 8008564:	4b07      	ldr	r3, [pc, #28]	; (8008584 <Custom_Bval_Update_Char+0x38>)
 8008566:	705a      	strb	r2, [r3, #1]
  Custom_App_Context.BAT_VAL+=1;
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <Custom_Bval_Update_Char+0x34>)
 800856a:	885b      	ldrh	r3, [r3, #2]
 800856c:	3301      	adds	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	4b03      	ldr	r3, [pc, #12]	; (8008580 <Custom_Bval_Update_Char+0x34>)
 8008572:	805a      	strh	r2, [r3, #2]
  Custom_STM_App_Update_Char(CUSTOM_STM_BVAL, (uint8_t *)UpdateCharData);
 8008574:	4903      	ldr	r1, [pc, #12]	; (8008584 <Custom_Bval_Update_Char+0x38>)
 8008576:	2000      	movs	r0, #0
 8008578:	f000 f9d2 	bl	8008920 <Custom_STM_App_Update_Char>
  /* USER CODE END Bval_UC*/
  return;
 800857c:	bf00      	nop
}
 800857e:	bd80      	pop	{r7, pc}
 8008580:	2000019c 	.word	0x2000019c
 8008584:	2000056c 	.word	0x2000056c

08008588 <Custom_Val_Update_Char>:
  return;
}

  /* eeg_service */
void Custom_Val_Update_Char(void) /* Property Read */
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Val_UC*/
	UpdateCharData[0]=(uint8_t)(Custom_App_Context.EEG_VAL& 0x00FF);
 800858c:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <Custom_Val_Update_Char+0x34>)
 800858e:	889b      	ldrh	r3, [r3, #4]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <Custom_Val_Update_Char+0x38>)
 8008594:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1]=(uint8_t)(Custom_App_Context.EEG_VAL>>8);
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <Custom_Val_Update_Char+0x34>)
 8008598:	889b      	ldrh	r3, [r3, #4]
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	b29b      	uxth	r3, r3
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <Custom_Val_Update_Char+0x38>)
 80085a2:	705a      	strb	r2, [r3, #1]
	Custom_App_Context.EEG_VAL+=1;
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <Custom_Val_Update_Char+0x34>)
 80085a6:	889b      	ldrh	r3, [r3, #4]
 80085a8:	3301      	adds	r3, #1
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	4b03      	ldr	r3, [pc, #12]	; (80085bc <Custom_Val_Update_Char+0x34>)
 80085ae:	809a      	strh	r2, [r3, #4]
	Custom_STM_App_Update_Char(CUSTOM_STM_VAL, (uint8_t *)UpdateCharData);
 80085b0:	4903      	ldr	r1, [pc, #12]	; (80085c0 <Custom_Val_Update_Char+0x38>)
 80085b2:	2001      	movs	r0, #1
 80085b4:	f000 f9b4 	bl	8008920 <Custom_STM_App_Update_Char>
  /* USER CODE END Val_UC*/
  return;
 80085b8:	bf00      	nop
}
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	2000019c 	.word	0x2000019c
 80085c0:	2000056c 	.word	0x2000056c

080085c4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08a      	sub	sp, #40	; 0x28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Custom_STM_Event_Handler_1 */
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  Custom_STM_App_Notification_evt_t  Notification;
/* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3301      	adds	r3, #1
 80085d6:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2bff      	cmp	r3, #255	; 0xff
 80085de:	f040 8133 	bne.w	8008848 <Custom_STM_Event_Handler+0x284>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	3302      	adds	r3, #2
 80085e6:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f640 4214 	movw	r2, #3092	; 0xc14
 80085f2:	4293      	cmp	r3, r2
 80085f4:	f000 80a2 	beq.w	800873c <Custom_STM_Event_Handler+0x178>
 80085f8:	f640 4214 	movw	r2, #3092	; 0xc14
 80085fc:	4293      	cmp	r3, r2
 80085fe:	f300 8121 	bgt.w	8008844 <Custom_STM_Event_Handler+0x280>
 8008602:	f640 4201 	movw	r2, #3073	; 0xc01
 8008606:	4293      	cmp	r3, r2
 8008608:	d005      	beq.n	8008616 <Custom_STM_Event_Handler+0x52>
 800860a:	f640 4213 	movw	r2, #3091	; 0xc13
 800860e:	4293      	cmp	r3, r2
 8008610:	f000 80e3 	beq.w	80087da <Custom_STM_Event_Handler+0x216>

        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008614:	e116      	b.n	8008844 <Custom_STM_Event_Handler+0x280>
        	attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	3302      	adds	r3, #2
 800861a:	61bb      	str	r3, [r7, #24]
        	if(attribute_modified->Attr_Handle == 16)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	885b      	ldrh	r3, [r3, #2]
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b10      	cmp	r3, #16
 8008624:	d11c      	bne.n	8008660 <Custom_STM_Event_Handler+0x9c>
        		return_value = SVCCTL_EvtAckFlowEnable;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        		if (CustomContext.Bval_Notification_Status==1){
 800862c:	4b8a      	ldr	r3, [pc, #552]	; (8008858 <Custom_STM_Event_Handler+0x294>)
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d10a      	bne.n	800864a <Custom_STM_Event_Handler+0x86>
        			CustomContext.Bval_Notification_Status=0;
 8008634:	4b88      	ldr	r3, [pc, #544]	; (8008858 <Custom_STM_Event_Handler+0x294>)
 8008636:	2200      	movs	r2, #0
 8008638:	701a      	strb	r2, [r3, #0]
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_BVAL_NOTIFY_DISABLED_EVT;
 800863a:	2302      	movs	r3, #2
 800863c:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 800863e:	f107 0308 	add.w	r3, r7, #8
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fecc 	bl	80083e0 <Custom_STM_App_Notification>
          break;
 8008648:	e0fd      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        			CustomContext.Bval_Notification_Status=1;
 800864a:	4b83      	ldr	r3, [pc, #524]	; (8008858 <Custom_STM_Event_Handler+0x294>)
 800864c:	2201      	movs	r2, #1
 800864e:	701a      	strb	r2, [r3, #0]
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_BVAL_NOTIFY_ENABLED_EVT;
 8008650:	2301      	movs	r3, #1
 8008652:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 8008654:	f107 0308 	add.w	r3, r7, #8
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff fec1 	bl	80083e0 <Custom_STM_App_Notification>
          break;
 800865e:	e0f2      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        	else if(attribute_modified->Attr_Handle ==21)
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	885b      	ldrh	r3, [r3, #2]
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b15      	cmp	r3, #21
 8008668:	d11c      	bne.n	80086a4 <Custom_STM_Event_Handler+0xe0>
        		return_value = SVCCTL_EvtAckFlowEnable;
 800866a:	2301      	movs	r3, #1
 800866c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        		if (CustomContext.Val_Notification_Status==1){
 8008670:	4b79      	ldr	r3, [pc, #484]	; (8008858 <Custom_STM_Event_Handler+0x294>)
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d10a      	bne.n	800868e <Custom_STM_Event_Handler+0xca>
        			CustomContext.Val_Notification_Status=0;
 8008678:	4b77      	ldr	r3, [pc, #476]	; (8008858 <Custom_STM_Event_Handler+0x294>)
 800867a:	2200      	movs	r2, #0
 800867c:	705a      	strb	r2, [r3, #1]
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_VAL_NOTIFY_DISABLED_EVT;
 800867e:	2305      	movs	r3, #5
 8008680:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff feaa 	bl	80083e0 <Custom_STM_App_Notification>
          break;
 800868c:	e0db      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        			CustomContext.Val_Notification_Status=1;
 800868e:	4b72      	ldr	r3, [pc, #456]	; (8008858 <Custom_STM_Event_Handler+0x294>)
 8008690:	2201      	movs	r2, #1
 8008692:	705a      	strb	r2, [r3, #1]
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_VAL_NOTIFY_ENABLED_EVT;
 8008694:	2304      	movs	r3, #4
 8008696:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 8008698:	f107 0308 	add.w	r3, r7, #8
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fe9f 	bl	80083e0 <Custom_STM_App_Notification>
          break;
 80086a2:	e0d0      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        	else if(attribute_modified->Attr_Handle ==4)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	885b      	ldrh	r3, [r3, #2]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d107      	bne.n	80086be <Custom_STM_Event_Handler+0xfa>
    			Notification.Custom_Evt_Opcode = CUSTOM_STM_BVAL_READ_EVT;
 80086ae:	2300      	movs	r3, #0
 80086b0:	723b      	strb	r3, [r7, #8]
    			Custom_STM_App_Notification(&Notification);
 80086b2:	f107 0308 	add.w	r3, r7, #8
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fe92 	bl	80083e0 <Custom_STM_App_Notification>
          break;
 80086bc:	e0c3      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        	else if(attribute_modified->Attr_Handle ==9)
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	885b      	ldrh	r3, [r3, #2]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2b09      	cmp	r3, #9
 80086c6:	d107      	bne.n	80086d8 <Custom_STM_Event_Handler+0x114>
        		Notification.Custom_Evt_Opcode = CUSTOM_STM_VAL_READ_EVT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	723b      	strb	r3, [r7, #8]
        		Custom_STM_App_Notification(&Notification);
 80086cc:	f107 0308 	add.w	r3, r7, #8
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff fe85 	bl	80083e0 <Custom_STM_App_Notification>
          break;
 80086d6:	e0b6      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 80086d8:	2300      	movs	r3, #0
 80086da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086de:	e016      	b.n	800870e <Custom_STM_Event_Handler+0x14a>
        		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 80086e0:	2201      	movs	r2, #1
 80086e2:	2120      	movs	r1, #32
 80086e4:	485d      	ldr	r0, [pc, #372]	; (800885c <Custom_STM_Event_Handler+0x298>)
 80086e6:	f7fa ff63 	bl	80035b0 <HAL_GPIO_WritePin>
        		    HAL_Delay(500);
 80086ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086ee:	f7f9 fb1f 	bl	8001d30 <HAL_Delay>
        		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80086f2:	2200      	movs	r2, #0
 80086f4:	2120      	movs	r1, #32
 80086f6:	4859      	ldr	r0, [pc, #356]	; (800885c <Custom_STM_Event_Handler+0x298>)
 80086f8:	f7fa ff5a 	bl	80035b0 <HAL_GPIO_WritePin>
        			HAL_Delay(500);
 80086fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008700:	f7f9 fb16 	bl	8001d30 <HAL_Delay>
        		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 8008704:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008708:	3301      	adds	r3, #1
 800870a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800870e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008712:	b29a      	uxth	r2, r3
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	885b      	ldrh	r3, [r3, #2]
 8008718:	b29b      	uxth	r3, r3
 800871a:	429a      	cmp	r2, r3
 800871c:	d9e0      	bls.n	80086e0 <Custom_STM_Event_Handler+0x11c>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 800871e:	2201      	movs	r2, #1
 8008720:	2120      	movs	r1, #32
 8008722:	484e      	ldr	r0, [pc, #312]	; (800885c <Custom_STM_Event_Handler+0x298>)
 8008724:	f7fa ff44 	bl	80035b0 <HAL_GPIO_WritePin>
        		HAL_Delay(2000);
 8008728:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800872c:	f7f9 fb00 	bl	8001d30 <HAL_Delay>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8008730:	2200      	movs	r2, #0
 8008732:	2120      	movs	r1, #32
 8008734:	4849      	ldr	r0, [pc, #292]	; (800885c <Custom_STM_Event_Handler+0x298>)
 8008736:	f7fa ff3b 	bl	80035b0 <HAL_GPIO_WritePin>
          break;
 800873a:	e084      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        	attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	3302      	adds	r3, #2
 8008740:	61bb      	str	r3, [r7, #24]
        	if(attribute_modified->Attr_Handle == 14)
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	b29b      	uxth	r3, r3
 8008748:	2b0e      	cmp	r3, #14
 800874a:	d107      	bne.n	800875c <Custom_STM_Event_Handler+0x198>
    			Notification.Custom_Evt_Opcode = CUSTOM_STM_BVAL_READ_EVT;
 800874c:	2300      	movs	r3, #0
 800874e:	723b      	strb	r3, [r7, #8]
    			Custom_STM_App_Notification(&Notification);
 8008750:	f107 0308 	add.w	r3, r7, #8
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fe43 	bl	80083e0 <Custom_STM_App_Notification>
          break;
 800875a:	e074      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        	else if(attribute_modified->Attr_Handle ==19)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	885b      	ldrh	r3, [r3, #2]
 8008760:	b29b      	uxth	r3, r3
 8008762:	2b13      	cmp	r3, #19
 8008764:	d107      	bne.n	8008776 <Custom_STM_Event_Handler+0x1b2>
        		Notification.Custom_Evt_Opcode = CUSTOM_STM_VAL_READ_EVT;
 8008766:	2303      	movs	r3, #3
 8008768:	723b      	strb	r3, [r7, #8]
        		Custom_STM_App_Notification(&Notification);
 800876a:	f107 0308 	add.w	r3, r7, #8
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff fe36 	bl	80083e0 <Custom_STM_App_Notification>
          break;
 8008774:	e067      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 8008776:	2300      	movs	r3, #0
 8008778:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800877c:	e016      	b.n	80087ac <Custom_STM_Event_Handler+0x1e8>
        		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 800877e:	2201      	movs	r2, #1
 8008780:	2120      	movs	r1, #32
 8008782:	4836      	ldr	r0, [pc, #216]	; (800885c <Custom_STM_Event_Handler+0x298>)
 8008784:	f7fa ff14 	bl	80035b0 <HAL_GPIO_WritePin>
        		    HAL_Delay(500);
 8008788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800878c:	f7f9 fad0 	bl	8001d30 <HAL_Delay>
        		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8008790:	2200      	movs	r2, #0
 8008792:	2120      	movs	r1, #32
 8008794:	4831      	ldr	r0, [pc, #196]	; (800885c <Custom_STM_Event_Handler+0x298>)
 8008796:	f7fa ff0b 	bl	80035b0 <HAL_GPIO_WritePin>
        			HAL_Delay(500);
 800879a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800879e:	f7f9 fac7 	bl	8001d30 <HAL_Delay>
        		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 80087a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80087a6:	3301      	adds	r3, #1
 80087a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80087ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d9e0      	bls.n	800877e <Custom_STM_Event_Handler+0x1ba>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 80087bc:	2201      	movs	r2, #1
 80087be:	2120      	movs	r1, #32
 80087c0:	4826      	ldr	r0, [pc, #152]	; (800885c <Custom_STM_Event_Handler+0x298>)
 80087c2:	f7fa fef5 	bl	80035b0 <HAL_GPIO_WritePin>
        		HAL_Delay(2000);
 80087c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80087ca:	f7f9 fab1 	bl	8001d30 <HAL_Delay>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2120      	movs	r1, #32
 80087d2:	4822      	ldr	r0, [pc, #136]	; (800885c <Custom_STM_Event_Handler+0x298>)
 80087d4:	f7fa feec 	bl	80035b0 <HAL_GPIO_WritePin>
          break;
 80087d8:	e035      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
        	attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	3302      	adds	r3, #2
 80087de:	61bb      	str	r3, [r7, #24]
    		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 80087e0:	2300      	movs	r3, #0
 80087e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80087e6:	e016      	b.n	8008816 <Custom_STM_Event_Handler+0x252>
    		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 80087e8:	2201      	movs	r2, #1
 80087ea:	2120      	movs	r1, #32
 80087ec:	481b      	ldr	r0, [pc, #108]	; (800885c <Custom_STM_Event_Handler+0x298>)
 80087ee:	f7fa fedf 	bl	80035b0 <HAL_GPIO_WritePin>
    		    HAL_Delay(500);
 80087f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087f6:	f7f9 fa9b 	bl	8001d30 <HAL_Delay>
    		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 80087fa:	2200      	movs	r2, #0
 80087fc:	2120      	movs	r1, #32
 80087fe:	4817      	ldr	r0, [pc, #92]	; (800885c <Custom_STM_Event_Handler+0x298>)
 8008800:	f7fa fed6 	bl	80035b0 <HAL_GPIO_WritePin>
    			HAL_Delay(500);
 8008804:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008808:	f7f9 fa92 	bl	8001d30 <HAL_Delay>
    		for(uint8_t i=0;i<=attribute_modified->Attr_Handle;i++){
 800880c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008810:	3301      	adds	r3, #1
 8008812:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008816:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800881a:	b29a      	uxth	r2, r3
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	885b      	ldrh	r3, [r3, #2]
 8008820:	b29b      	uxth	r3, r3
 8008822:	429a      	cmp	r2, r3
 8008824:	d9e0      	bls.n	80087e8 <Custom_STM_Event_Handler+0x224>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8008826:	2201      	movs	r2, #1
 8008828:	2120      	movs	r1, #32
 800882a:	480c      	ldr	r0, [pc, #48]	; (800885c <Custom_STM_Event_Handler+0x298>)
 800882c:	f7fa fec0 	bl	80035b0 <HAL_GPIO_WritePin>
    		HAL_Delay(2000);
 8008830:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008834:	f7f9 fa7c 	bl	8001d30 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET);
 8008838:	2200      	movs	r2, #0
 800883a:	2120      	movs	r1, #32
 800883c:	4807      	ldr	r0, [pc, #28]	; (800885c <Custom_STM_Event_Handler+0x298>)
 800883e:	f7fa feb7 	bl	80035b0 <HAL_GPIO_WritePin>
          break;
 8008842:	e000      	b.n	8008846 <Custom_STM_Event_Handler+0x282>
          break;
 8008844:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008846:	e000      	b.n	800884a <Custom_STM_Event_Handler+0x286>
    /* USER CODE BEGIN EVENT_PCKT_CASES*/

    /* USER CODE END EVENT_PCKT_CASES*/

    default:
      break;
 8008848:	bf00      	nop

/* USER CODE BEGIN Custom_STM_Event_Handler_2 */

/* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800884a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800884e:	4618      	mov	r0, r3
 8008850:	3728      	adds	r7, #40	; 0x28
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	200000f8 	.word	0x200000f8
 800885c:	48000400 	.word	0x48000400

08008860 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
/* USER CODE BEGIN SVCCTL_InitCustomSvc_1 */
  CustomContext.Bval_Notification_Status=0;
 8008866:	4b28      	ldr	r3, [pc, #160]	; (8008908 <SVCCTL_InitCustomSvc+0xa8>)
 8008868:	2200      	movs	r2, #0
 800886a:	701a      	strb	r2, [r3, #0]
  CustomContext.Val_Notification_Status=0;
 800886c:	4b26      	ldr	r3, [pc, #152]	; (8008908 <SVCCTL_InitCustomSvc+0xa8>)
 800886e:	2200      	movs	r2, #0
 8008870:	705a      	strb	r2, [r3, #1]
/* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008872:	4826      	ldr	r0, [pc, #152]	; (800890c <SVCCTL_InitCustomSvc+0xac>)
 8008874:	f7fe fc48 	bl	8007108 <SVCCTL_RegisterSvcHandler>
     *                                1 for battery_value configuration descriptor +
     *                                1 for battery_value broadcast property +
     *                              = 5
     */

    uuid.Char_UUID_16 = 0x180f;
 8008878:	f641 030f 	movw	r3, #6159	; 0x180f
 800887c:	803b      	strh	r3, [r7, #0]
    aci_gatt_add_service(UUID_TYPE_16,
 800887e:	4639      	mov	r1, r7
 8008880:	4b23      	ldr	r3, [pc, #140]	; (8008910 <SVCCTL_InitCustomSvc+0xb0>)
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	2305      	movs	r3, #5
 8008886:	2201      	movs	r2, #1
 8008888:	2001      	movs	r0, #1
 800888a:	f7fd ffc1 	bl	8006810 <aci_gatt_add_service>
                      &(CustomContext.CustomBservHdle));

    /**
     *  battery_value
     */
    uuid.Char_UUID_16 = 0x2a19;
 800888e:	f642 2319 	movw	r3, #10777	; 0x2a19
 8008892:	803b      	strh	r3, [r7, #0]
    aci_gatt_add_char(CustomContext.CustomBservHdle,
 8008894:	4b1c      	ldr	r3, [pc, #112]	; (8008908 <SVCCTL_InitCustomSvc+0xa8>)
 8008896:	8858      	ldrh	r0, [r3, #2]
 8008898:	2302      	movs	r3, #2
 800889a:	b29b      	uxth	r3, r3
 800889c:	463a      	mov	r2, r7
 800889e:	491d      	ldr	r1, [pc, #116]	; (8008914 <SVCCTL_InitCustomSvc+0xb4>)
 80088a0:	9105      	str	r1, [sp, #20]
 80088a2:	2100      	movs	r1, #0
 80088a4:	9104      	str	r1, [sp, #16]
 80088a6:	2110      	movs	r1, #16
 80088a8:	9103      	str	r1, [sp, #12]
 80088aa:	2100      	movs	r1, #0
 80088ac:	9102      	str	r1, [sp, #8]
 80088ae:	2100      	movs	r1, #0
 80088b0:	9101      	str	r1, [sp, #4]
 80088b2:	2113      	movs	r1, #19
 80088b4:	9100      	str	r1, [sp, #0]
 80088b6:	2101      	movs	r1, #1
 80088b8:	f7fe f859 	bl	800696e <aci_gatt_add_char>
     *                                1 for eeg_value configuration descriptor +
     *                                1 for eeg_value broadcast property +
     *                              = 5
     */

    uuid.Char_UUID_16 = 0x180d;
 80088bc:	f641 030d 	movw	r3, #6157	; 0x180d
 80088c0:	803b      	strh	r3, [r7, #0]
    aci_gatt_add_service(UUID_TYPE_16,
 80088c2:	4639      	mov	r1, r7
 80088c4:	4b14      	ldr	r3, [pc, #80]	; (8008918 <SVCCTL_InitCustomSvc+0xb8>)
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	2305      	movs	r3, #5
 80088ca:	2201      	movs	r2, #1
 80088cc:	2001      	movs	r0, #1
 80088ce:	f7fd ff9f 	bl	8006810 <aci_gatt_add_service>
                      &(CustomContext.CustomEservHdle));

    /**
     *  eeg_value
     */
    uuid.Char_UUID_16 = 0x2a37;
 80088d2:	f642 2337 	movw	r3, #10807	; 0x2a37
 80088d6:	803b      	strh	r3, [r7, #0]
    aci_gatt_add_char(CustomContext.CustomEservHdle,
 80088d8:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <SVCCTL_InitCustomSvc+0xa8>)
 80088da:	88d8      	ldrh	r0, [r3, #6]
 80088dc:	2302      	movs	r3, #2
 80088de:	b29b      	uxth	r3, r3
 80088e0:	463a      	mov	r2, r7
 80088e2:	490e      	ldr	r1, [pc, #56]	; (800891c <SVCCTL_InitCustomSvc+0xbc>)
 80088e4:	9105      	str	r1, [sp, #20]
 80088e6:	2100      	movs	r1, #0
 80088e8:	9104      	str	r1, [sp, #16]
 80088ea:	2110      	movs	r1, #16
 80088ec:	9103      	str	r1, [sp, #12]
 80088ee:	2100      	movs	r1, #0
 80088f0:	9102      	str	r1, [sp, #8]
 80088f2:	2100      	movs	r1, #0
 80088f4:	9101      	str	r1, [sp, #4]
 80088f6:	2113      	movs	r1, #19
 80088f8:	9100      	str	r1, [sp, #0]
 80088fa:	2101      	movs	r1, #1
 80088fc:	f7fe f837 	bl	800696e <aci_gatt_add_char>

/* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

/* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008900:	bf00      	nop
}
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	200000f8 	.word	0x200000f8
 800890c:	080085c5 	.word	0x080085c5
 8008910:	200000fa 	.word	0x200000fa
 8008914:	200000fc 	.word	0x200000fc
 8008918:	200000fe 	.word	0x200000fe
 800891c:	20000100 	.word	0x20000100

08008920 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af02      	add	r7, sp, #8
 8008926:	4603      	mov	r3, r0
 8008928:	6039      	str	r1, [r7, #0]
 800892a:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800892c:	2342      	movs	r3, #66	; 0x42
 800892e:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

/* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <Custom_STM_App_Update_Char+0x1c>
 8008936:	2b01      	cmp	r3, #1
 8008938:	d016      	beq.n	8008968 <Custom_STM_App_Update_Char+0x48>

    /* USER CODE END CUSTOM_STM_VAL*/
      break;

    default:
      break;
 800893a:	e024      	b.n	8008986 <Custom_STM_App_Update_Char+0x66>
      result = aci_gatt_update_char_value(CustomContext.CustomBservHdle,
 800893c:	4b14      	ldr	r3, [pc, #80]	; (8008990 <Custom_STM_App_Update_Char+0x70>)
 800893e:	8858      	ldrh	r0, [r3, #2]
 8008940:	4b13      	ldr	r3, [pc, #76]	; (8008990 <Custom_STM_App_Update_Char+0x70>)
 8008942:	8899      	ldrh	r1, [r3, #4]
 8008944:	2202      	movs	r2, #2
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	4613      	mov	r3, r2
 800894c:	2200      	movs	r2, #0
 800894e:	f7fe f8f8 	bl	8006b42 <aci_gatt_update_char_value>
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
      if(result!=0x00) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET);
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d013      	beq.n	8008984 <Custom_STM_App_Update_Char+0x64>
 800895c:	2201      	movs	r2, #1
 800895e:	2120      	movs	r1, #32
 8008960:	480c      	ldr	r0, [pc, #48]	; (8008994 <Custom_STM_App_Update_Char+0x74>)
 8008962:	f7fa fe25 	bl	80035b0 <HAL_GPIO_WritePin>
      break;
 8008966:	e00d      	b.n	8008984 <Custom_STM_App_Update_Char+0x64>
      result = aci_gatt_update_char_value(CustomContext.CustomEservHdle,
 8008968:	4b09      	ldr	r3, [pc, #36]	; (8008990 <Custom_STM_App_Update_Char+0x70>)
 800896a:	88d8      	ldrh	r0, [r3, #6]
 800896c:	4b08      	ldr	r3, [pc, #32]	; (8008990 <Custom_STM_App_Update_Char+0x70>)
 800896e:	8919      	ldrh	r1, [r3, #8]
 8008970:	2202      	movs	r2, #2
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	4613      	mov	r3, r2
 8008978:	2200      	movs	r2, #0
 800897a:	f7fe f8e2 	bl	8006b42 <aci_gatt_update_char_value>
 800897e:	4603      	mov	r3, r0
 8008980:	73fb      	strb	r3, [r7, #15]
      break;
 8008982:	e000      	b.n	8008986 <Custom_STM_App_Update_Char+0x66>
      break;
 8008984:	bf00      	nop

/* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

/* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200000f8 	.word	0x200000f8
 8008994:	48000400 	.word	0x48000400

08008998 <LL_PWR_EnableBootC2>:
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800899c:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <LL_PWR_EnableBootC2+0x1c>)
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	4a04      	ldr	r2, [pc, #16]	; (80089b4 <LL_PWR_EnableBootC2+0x1c>)
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a6:	60d3      	str	r3, [r2, #12]
}
 80089a8:	bf00      	nop
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	58000400 	.word	0x58000400

080089b8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80089c0:	4b06      	ldr	r3, [pc, #24]	; (80089dc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80089c2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80089c6:	4905      	ldr	r1, [pc, #20]	; (80089dc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	58000800 	.word	0x58000800

080089e0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80089ea:	6a1a      	ldr	r2, [r3, #32]
 80089ec:	4904      	ldr	r1, [pc, #16]	; (8008a00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	620b      	str	r3, [r1, #32]
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	58000800 	.word	0x58000800

08008a04 <LL_AHB3_GRP1_EnableClock>:
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4013      	ands	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008a28:	68fb      	ldr	r3, [r7, #12]
}
 8008a2a:	bf00      	nop
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a42:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a56:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008a60:	68fb      	ldr	r3, [r7, #12]
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	601a      	str	r2, [r3, #0]
}
 8008a82:	bf00      	nop
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f043 0201 	orr.w	r2, r3, #1
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	041b      	lsls	r3, r3, #16
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	401a      	ands	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	605a      	str	r2, [r3, #4]
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	041b      	lsls	r3, r3, #16
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	605a      	str	r2, [r3, #4]
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	401a      	ands	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	605a      	str	r2, [r3, #4]
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	609a      	str	r2, [r3, #8]
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	041a      	lsls	r2, r3, #16
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	609a      	str	r2, [r3, #8]
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	4013      	ands	r3, r2
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d101      	bne.n	8008b72 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69da      	ldr	r2, [r3, #28]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	4013      	ands	r3, r2
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d101      	bne.n	8008b9c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008bb0:	2102      	movs	r1, #2
 8008bb2:	4819      	ldr	r0, [pc, #100]	; (8008c18 <HW_IPCC_Rx_Handler+0x6c>)
 8008bb4:	f7ff ffe4 	bl	8008b80 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <HW_IPCC_Rx_Handler+0x26>
 8008bbe:	4b16      	ldr	r3, [pc, #88]	; (8008c18 <HW_IPCC_Rx_Handler+0x6c>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8008bcc:	f000 f8ea 	bl	8008da4 <HW_IPCC_SYS_EvtHandler>
 8008bd0:	e01f      	b.n	8008c12 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	4810      	ldr	r0, [pc, #64]	; (8008c18 <HW_IPCC_Rx_Handler+0x6c>)
 8008bd6:	f7ff ffd3 	bl	8008b80 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <HW_IPCC_Rx_Handler+0x46>
 8008be0:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <HW_IPCC_Rx_Handler+0x6c>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8008bec:	f000 f89e 	bl	8008d2c <HW_IPCC_BLE_EvtHandler>
 8008bf0:	e00f      	b.n	8008c12 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008bf2:	2108      	movs	r1, #8
 8008bf4:	4808      	ldr	r0, [pc, #32]	; (8008c18 <HW_IPCC_Rx_Handler+0x6c>)
 8008bf6:	f7ff ffc3 	bl	8008b80 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d009      	beq.n	8008c14 <HW_IPCC_Rx_Handler+0x68>
 8008c00:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <HW_IPCC_Rx_Handler+0x6c>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	43db      	mvns	r3, r3
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008c0e:	f000 f915 	bl	8008e3c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
}
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	58000c00 	.word	0x58000c00

08008c1c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008c20:	2102      	movs	r1, #2
 8008c22:	4822      	ldr	r0, [pc, #136]	; (8008cac <HW_IPCC_Tx_Handler+0x90>)
 8008c24:	f7ff ff97 	bl	8008b56 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d109      	bne.n	8008c42 <HW_IPCC_Tx_Handler+0x26>
 8008c2e:	4b1f      	ldr	r3, [pc, #124]	; (8008cac <HW_IPCC_Tx_Handler+0x90>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	43db      	mvns	r3, r3
 8008c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008c3c:	f000 f8a6 	bl	8008d8c <HW_IPCC_SYS_CmdEvtHandler>
 8008c40:	e031      	b.n	8008ca6 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008c42:	2102      	movs	r1, #2
 8008c44:	4819      	ldr	r0, [pc, #100]	; (8008cac <HW_IPCC_Tx_Handler+0x90>)
 8008c46:	f7ff ff86 	bl	8008b56 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d109      	bne.n	8008c64 <HW_IPCC_Tx_Handler+0x48>
 8008c50:	4b16      	ldr	r3, [pc, #88]	; (8008cac <HW_IPCC_Tx_Handler+0x90>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	43db      	mvns	r3, r3
 8008c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008c5e:	f000 f895 	bl	8008d8c <HW_IPCC_SYS_CmdEvtHandler>
 8008c62:	e020      	b.n	8008ca6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008c64:	2108      	movs	r1, #8
 8008c66:	4811      	ldr	r0, [pc, #68]	; (8008cac <HW_IPCC_Tx_Handler+0x90>)
 8008c68:	f7ff ff75 	bl	8008b56 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d109      	bne.n	8008c86 <HW_IPCC_Tx_Handler+0x6a>
 8008c72:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <HW_IPCC_Tx_Handler+0x90>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	43db      	mvns	r3, r3
 8008c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008c80:	f000 f8be 	bl	8008e00 <HW_IPCC_MM_FreeBufHandler>
 8008c84:	e00f      	b.n	8008ca6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008c86:	2120      	movs	r1, #32
 8008c88:	4808      	ldr	r0, [pc, #32]	; (8008cac <HW_IPCC_Tx_Handler+0x90>)
 8008c8a:	f7ff ff64 	bl	8008b56 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d109      	bne.n	8008ca8 <HW_IPCC_Tx_Handler+0x8c>
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <HW_IPCC_Tx_Handler+0x90>)
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d002      	beq.n	8008ca8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008ca2:	f000 f84f 	bl	8008d44 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
}
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	58000c00 	.word	0x58000c00

08008cb0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008cb4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008cb8:	f7ff febd 	bl	8008a36 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008cbc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008cc0:	f7ff fe7a 	bl	80089b8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008cc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008cc8:	f7ff fe8a 	bl	80089e0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008ccc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008cce:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008cd0:	f7ff fe62 	bl	8008998 <LL_PWR_EnableBootC2>

  return;
 8008cd4:	bf00      	nop
}
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008cdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008ce0:	f7ff fe90 	bl	8008a04 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008ce4:	4806      	ldr	r0, [pc, #24]	; (8008d00 <HW_IPCC_Init+0x28>)
 8008ce6:	f7ff fed2 	bl	8008a8e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008cea:	4805      	ldr	r0, [pc, #20]	; (8008d00 <HW_IPCC_Init+0x28>)
 8008cec:	f7ff febf 	bl	8008a6e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008cf0:	202c      	movs	r0, #44	; 0x2c
 8008cf2:	f7fa f834 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008cf6:	202d      	movs	r0, #45	; 0x2d
 8008cf8:	f7fa f831 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  return;
 8008cfc:	bf00      	nop
}
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	58000c00 	.word	0x58000c00

08008d04 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4802      	ldr	r0, [pc, #8]	; (8008d14 <HW_IPCC_BLE_Init+0x10>)
 8008d0c:	f7ff fef4 	bl	8008af8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008d10:	bf00      	nop
}
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	58000c00 	.word	0x58000c00

08008d18 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	4802      	ldr	r0, [pc, #8]	; (8008d28 <HW_IPCC_BLE_SendCmd+0x10>)
 8008d20:	f7ff ff0a 	bl	8008b38 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008d24:	bf00      	nop
}
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	58000c00 	.word	0x58000c00

08008d2c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008d30:	f7fe fde0 	bl	80078f4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008d34:	2101      	movs	r1, #1
 8008d36:	4802      	ldr	r0, [pc, #8]	; (8008d40 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008d38:	f7ff fef0 	bl	8008b1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008d3c:	bf00      	nop
}
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	58000c00 	.word	0x58000c00

08008d44 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008d48:	2120      	movs	r1, #32
 8008d4a:	4803      	ldr	r0, [pc, #12]	; (8008d58 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008d4c:	f7ff fec2 	bl	8008ad4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008d50:	f7fe fe00 	bl	8007954 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008d54:	bf00      	nop
}
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	58000c00 	.word	0x58000c00

08008d5c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008d60:	2102      	movs	r1, #2
 8008d62:	4802      	ldr	r0, [pc, #8]	; (8008d6c <HW_IPCC_SYS_Init+0x10>)
 8008d64:	f7ff fec8 	bl	8008af8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008d68:	bf00      	nop
}
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	58000c00 	.word	0x58000c00

08008d70 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008d74:	2102      	movs	r1, #2
 8008d76:	4804      	ldr	r0, [pc, #16]	; (8008d88 <HW_IPCC_SYS_SendCmd+0x18>)
 8008d78:	f7ff fede 	bl	8008b38 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008d7c:	2102      	movs	r1, #2
 8008d7e:	4802      	ldr	r0, [pc, #8]	; (8008d88 <HW_IPCC_SYS_SendCmd+0x18>)
 8008d80:	f7ff fe95 	bl	8008aae <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008d84:	bf00      	nop
}
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	58000c00 	.word	0x58000c00

08008d8c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008d90:	2102      	movs	r1, #2
 8008d92:	4803      	ldr	r0, [pc, #12]	; (8008da0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008d94:	f7ff fe9e 	bl	8008ad4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008d98:	f7fe fe2c 	bl	80079f4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008d9c:	bf00      	nop
}
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	58000c00 	.word	0x58000c00

08008da4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008da8:	f7fe fe3a 	bl	8007a20 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008dac:	2102      	movs	r1, #2
 8008dae:	4802      	ldr	r0, [pc, #8]	; (8008db8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008db0:	f7ff feb4 	bl	8008b1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008db4:	bf00      	nop
}
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	58000c00 	.word	0x58000c00

08008dbc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008dc4:	2108      	movs	r1, #8
 8008dc6:	480c      	ldr	r0, [pc, #48]	; (8008df8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008dc8:	f7ff fec5 	bl	8008b56 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d007      	beq.n	8008de2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008dd2:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008dd8:	2108      	movs	r1, #8
 8008dda:	4807      	ldr	r0, [pc, #28]	; (8008df8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008ddc:	f7ff fe67 	bl	8008aae <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008de0:	e006      	b.n	8008df0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008de6:	2108      	movs	r1, #8
 8008de8:	4803      	ldr	r0, [pc, #12]	; (8008df8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008dea:	f7ff fea5 	bl	8008b38 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008dee:	bf00      	nop
}
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	58000c00 	.word	0x58000c00
 8008dfc:	20000244 	.word	0x20000244

08008e00 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008e04:	2108      	movs	r1, #8
 8008e06:	4806      	ldr	r0, [pc, #24]	; (8008e20 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008e08:	f7ff fe64 	bl	8008ad4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008e12:	2108      	movs	r1, #8
 8008e14:	4802      	ldr	r0, [pc, #8]	; (8008e20 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008e16:	f7ff fe8f 	bl	8008b38 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008e1a:	bf00      	nop
}
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	58000c00 	.word	0x58000c00
 8008e24:	20000244 	.word	0x20000244

08008e28 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008e2c:	2108      	movs	r1, #8
 8008e2e:	4802      	ldr	r0, [pc, #8]	; (8008e38 <HW_IPCC_TRACES_Init+0x10>)
 8008e30:	f7ff fe62 	bl	8008af8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008e34:	bf00      	nop
}
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	58000c00 	.word	0x58000c00

08008e3c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008e40:	f7fe fe96 	bl	8007b70 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008e44:	2108      	movs	r1, #8
 8008e46:	4802      	ldr	r0, [pc, #8]	; (8008e50 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008e48:	f7ff fe68 	bl	8008b1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008e4c:	bf00      	nop
}
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	58000c00 	.word	0x58000c00

08008e54 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <UTIL_LPM_Init+0x1c>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <UTIL_LPM_Init+0x20>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008e64:	bf00      	nop
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	20000248 	.word	0x20000248
 8008e74:	2000024c 	.word	0x2000024c

08008e78 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e84:	f3ef 8310 	mrs	r3, PRIMASK
 8008e88:	613b      	str	r3, [r7, #16]
  return(result);
 8008e8a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008e8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e8e:	b672      	cpsid	i
}
 8008e90:	bf00      	nop
  
  switch(state)
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d008      	beq.n	8008eaa <UTIL_LPM_SetOffMode+0x32>
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d10e      	bne.n	8008eba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <UTIL_LPM_SetOffMode+0x5c>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	4a0b      	ldr	r2, [pc, #44]	; (8008ed4 <UTIL_LPM_SetOffMode+0x5c>)
 8008ea6:	6013      	str	r3, [r2, #0]
      break;
 8008ea8:	e008      	b.n	8008ebc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	43da      	mvns	r2, r3
 8008eae:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <UTIL_LPM_SetOffMode+0x5c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	4a07      	ldr	r2, [pc, #28]	; (8008ed4 <UTIL_LPM_SetOffMode+0x5c>)
 8008eb6:	6013      	str	r3, [r2, #0]
      break;
 8008eb8:	e000      	b.n	8008ebc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008eba:	bf00      	nop
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f383 8810 	msr	PRIMASK, r3
}
 8008ec6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008ec8:	bf00      	nop
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	2000024c 	.word	0x2000024c

08008ed8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08c      	sub	sp, #48	; 0x30
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008ee0:	4b67      	ldr	r3, [pc, #412]	; (8009080 <UTIL_SEQ_Run+0x1a8>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8008ee6:	4b66      	ldr	r3, [pc, #408]	; (8009080 <UTIL_SEQ_Run+0x1a8>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4013      	ands	r3, r2
 8008eee:	4a64      	ldr	r2, [pc, #400]	; (8009080 <UTIL_SEQ_Run+0x1a8>)
 8008ef0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008ef2:	e083      	b.n	8008ffc <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008ef8:	e002      	b.n	8008f00 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	3301      	adds	r3, #1
 8008efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008f00:	4a60      	ldr	r2, [pc, #384]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008f08:	4b5f      	ldr	r3, [pc, #380]	; (8009088 <UTIL_SEQ_Run+0x1b0>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	401a      	ands	r2, r3
 8008f0e:	4b5c      	ldr	r3, [pc, #368]	; (8009080 <UTIL_SEQ_Run+0x1a8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4013      	ands	r3, r2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0f0      	beq.n	8008efa <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8008f18:	4a5a      	ldr	r2, [pc, #360]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008f20:	4b59      	ldr	r3, [pc, #356]	; (8009088 <UTIL_SEQ_Run+0x1b0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	401a      	ands	r2, r3
 8008f26:	4b56      	ldr	r3, [pc, #344]	; (8009080 <UTIL_SEQ_Run+0x1a8>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008f2e:	4a55      	ldr	r2, [pc, #340]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	4413      	add	r3, r2
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008f40:	4a50      	ldr	r2, [pc, #320]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	4413      	add	r3, r2
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008f4e:	4a4d      	ldr	r2, [pc, #308]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	4413      	add	r3, r2
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 f99d 	bl	800929c <SEQ_BitPosition>
 8008f62:	4603      	mov	r3, r0
 8008f64:	461a      	mov	r2, r3
 8008f66:	4b49      	ldr	r3, [pc, #292]	; (800908c <UTIL_SEQ_Run+0x1b4>)
 8008f68:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008f6a:	4a46      	ldr	r2, [pc, #280]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	4413      	add	r3, r2
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	4b45      	ldr	r3, [pc, #276]	; (800908c <UTIL_SEQ_Run+0x1b4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2101      	movs	r1, #1
 8008f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7e:	43db      	mvns	r3, r3
 8008f80:	401a      	ands	r2, r3
 8008f82:	4940      	ldr	r1, [pc, #256]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	440b      	add	r3, r1
 8008f8a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f90:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f92:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008f94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f96:	b672      	cpsid	i
}
 8008f98:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008f9a:	4b3c      	ldr	r3, [pc, #240]	; (800908c <UTIL_SEQ_Run+0x1b4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa4:	43da      	mvns	r2, r3
 8008fa6:	4b3a      	ldr	r3, [pc, #232]	; (8009090 <UTIL_SEQ_Run+0x1b8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4013      	ands	r3, r2
 8008fac:	4a38      	ldr	r2, [pc, #224]	; (8009090 <UTIL_SEQ_Run+0x1b8>)
 8008fae:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fb4:	e013      	b.n	8008fde <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	4a32      	ldr	r2, [pc, #200]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008fbc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008fc0:	4b32      	ldr	r3, [pc, #200]	; (800908c <UTIL_SEQ_Run+0x1b4>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fca:	43da      	mvns	r2, r3
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	400a      	ands	r2, r1
 8008fd2:	492c      	ldr	r1, [pc, #176]	; (8009084 <UTIL_SEQ_Run+0x1ac>)
 8008fd4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e8      	bne.n	8008fb6 <UTIL_SEQ_Run+0xde>
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f383 8810 	msr	PRIMASK, r3
}
 8008fee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008ff0:	4b26      	ldr	r3, [pc, #152]	; (800908c <UTIL_SEQ_Run+0x1b4>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a27      	ldr	r2, [pc, #156]	; (8009094 <UTIL_SEQ_Run+0x1bc>)
 8008ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ffa:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008ffc:	4b24      	ldr	r3, [pc, #144]	; (8009090 <UTIL_SEQ_Run+0x1b8>)
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	4b21      	ldr	r3, [pc, #132]	; (8009088 <UTIL_SEQ_Run+0x1b0>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	401a      	ands	r2, r3
 8009006:	4b1e      	ldr	r3, [pc, #120]	; (8009080 <UTIL_SEQ_Run+0x1a8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <UTIL_SEQ_Run+0x148>
 8009010:	4b21      	ldr	r3, [pc, #132]	; (8009098 <UTIL_SEQ_Run+0x1c0>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	4b21      	ldr	r3, [pc, #132]	; (800909c <UTIL_SEQ_Run+0x1c4>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4013      	ands	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	f43f af6a 	beq.w	8008ef4 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009020:	4b1a      	ldr	r3, [pc, #104]	; (800908c <UTIL_SEQ_Run+0x1b4>)
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009028:	f000 f92a 	bl	8009280 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800902c:	f3ef 8310 	mrs	r3, PRIMASK
 8009030:	613b      	str	r3, [r7, #16]
  return(result);
 8009032:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009036:	b672      	cpsid	i
}
 8009038:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800903a:	4b15      	ldr	r3, [pc, #84]	; (8009090 <UTIL_SEQ_Run+0x1b8>)
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	4b12      	ldr	r3, [pc, #72]	; (8009088 <UTIL_SEQ_Run+0x1b0>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	401a      	ands	r2, r3
 8009044:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <UTIL_SEQ_Run+0x1a8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4013      	ands	r3, r2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d108      	bne.n	8009060 <UTIL_SEQ_Run+0x188>
 800904e:	4b12      	ldr	r3, [pc, #72]	; (8009098 <UTIL_SEQ_Run+0x1c0>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b12      	ldr	r3, [pc, #72]	; (800909c <UTIL_SEQ_Run+0x1c4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4013      	ands	r3, r2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800905c:	f7f7 fac5 	bl	80005ea <UTIL_SEQ_Idle>
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f383 8810 	msr	PRIMASK, r3
}
 800906a:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800906c:	f000 f90f 	bl	800928e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009070:	4a03      	ldr	r2, [pc, #12]	; (8009080 <UTIL_SEQ_Run+0x1a8>)
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	6013      	str	r3, [r2, #0]

  return;
 8009076:	bf00      	nop
}
 8009078:	3730      	adds	r7, #48	; 0x30
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20000020 	.word	0x20000020
 8009084:	200002e0 	.word	0x200002e0
 8009088:	2000001c 	.word	0x2000001c
 800908c:	2000025c 	.word	0x2000025c
 8009090:	20000250 	.word	0x20000250
 8009094:	20000260 	.word	0x20000260
 8009098:	20000254 	.word	0x20000254
 800909c:	20000258 	.word	0x20000258

080090a0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ac:	f3ef 8310 	mrs	r3, PRIMASK
 80090b0:	617b      	str	r3, [r7, #20]
  return(result);
 80090b2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80090b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80090b6:	b672      	cpsid	i
}
 80090b8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 f8ee 	bl	800929c <SEQ_BitPosition>
 80090c0:	4603      	mov	r3, r0
 80090c2:	4619      	mov	r1, r3
 80090c4:	4a06      	ldr	r2, [pc, #24]	; (80090e0 <UTIL_SEQ_RegTask+0x40>)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	f383 8810 	msr	PRIMASK, r3
}
 80090d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80090d8:	bf00      	nop
}
 80090da:	3720      	adds	r7, #32
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20000260 	.word	0x20000260

080090e4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ee:	f3ef 8310 	mrs	r3, PRIMASK
 80090f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80090f4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80090f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090f8:	b672      	cpsid	i
}
 80090fa:	bf00      	nop

  TaskSet |= TaskId_bm;
 80090fc:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <UTIL_SEQ_SetTask+0x50>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4313      	orrs	r3, r2
 8009104:	4a0b      	ldr	r2, [pc, #44]	; (8009134 <UTIL_SEQ_SetTask+0x50>)
 8009106:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009108:	4a0b      	ldr	r2, [pc, #44]	; (8009138 <UTIL_SEQ_SetTask+0x54>)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	431a      	orrs	r2, r3
 8009114:	4908      	ldr	r1, [pc, #32]	; (8009138 <UTIL_SEQ_SetTask+0x54>)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f383 8810 	msr	PRIMASK, r3
}
 8009126:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009128:	bf00      	nop
}
 800912a:	371c      	adds	r7, #28
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	20000250 	.word	0x20000250
 8009138:	200002e0 	.word	0x200002e0

0800913c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800913c:	b480      	push	{r7}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009144:	f3ef 8310 	mrs	r3, PRIMASK
 8009148:	60fb      	str	r3, [r7, #12]
  return(result);
 800914a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800914c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800914e:	b672      	cpsid	i
}
 8009150:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	43da      	mvns	r2, r3
 8009156:	4b08      	ldr	r3, [pc, #32]	; (8009178 <UTIL_SEQ_PauseTask+0x3c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4013      	ands	r3, r2
 800915c:	4a06      	ldr	r2, [pc, #24]	; (8009178 <UTIL_SEQ_PauseTask+0x3c>)
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f383 8810 	msr	PRIMASK, r3
}
 800916a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800916c:	bf00      	nop
}
 800916e:	371c      	adds	r7, #28
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	2000001c 	.word	0x2000001c

0800917c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009184:	f3ef 8310 	mrs	r3, PRIMASK
 8009188:	60fb      	str	r3, [r7, #12]
  return(result);
 800918a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800918c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800918e:	b672      	cpsid	i
}
 8009190:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009192:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <UTIL_SEQ_ResumeTask+0x3c>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4313      	orrs	r3, r2
 800919a:	4a07      	ldr	r2, [pc, #28]	; (80091b8 <UTIL_SEQ_ResumeTask+0x3c>)
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f383 8810 	msr	PRIMASK, r3
}
 80091a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80091aa:	bf00      	nop
}
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	2000001c 	.word	0x2000001c

080091bc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c4:	f3ef 8310 	mrs	r3, PRIMASK
 80091c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80091ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80091cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091ce:	b672      	cpsid	i
}
 80091d0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80091d2:	4b09      	ldr	r3, [pc, #36]	; (80091f8 <UTIL_SEQ_SetEvt+0x3c>)
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4313      	orrs	r3, r2
 80091da:	4a07      	ldr	r2, [pc, #28]	; (80091f8 <UTIL_SEQ_SetEvt+0x3c>)
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f383 8810 	msr	PRIMASK, r3
}
 80091e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80091ea:	bf00      	nop
}
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	20000254 	.word	0x20000254

080091fc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009204:	4b1b      	ldr	r3, [pc, #108]	; (8009274 <UTIL_SEQ_WaitEvt+0x78>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800920a:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <UTIL_SEQ_WaitEvt+0x78>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009212:	d102      	bne.n	800921a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e005      	b.n	8009226 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800921a:	4b16      	ldr	r3, [pc, #88]	; (8009274 <UTIL_SEQ_WaitEvt+0x78>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2201      	movs	r2, #1
 8009220:	fa02 f303 	lsl.w	r3, r2, r3
 8009224:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009226:	4b14      	ldr	r3, [pc, #80]	; (8009278 <UTIL_SEQ_WaitEvt+0x7c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800922c:	4a12      	ldr	r2, [pc, #72]	; (8009278 <UTIL_SEQ_WaitEvt+0x7c>)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8009232:	e005      	b.n	8009240 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8009234:	4b10      	ldr	r3, [pc, #64]	; (8009278 <UTIL_SEQ_WaitEvt+0x7c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4619      	mov	r1, r3
 800923a:	6978      	ldr	r0, [r7, #20]
 800923c:	f7f7 f9dc 	bl	80005f8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8009240:	4b0e      	ldr	r3, [pc, #56]	; (800927c <UTIL_SEQ_WaitEvt+0x80>)
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <UTIL_SEQ_WaitEvt+0x7c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4013      	ands	r3, r2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0f2      	beq.n	8009234 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800924e:	4a09      	ldr	r2, [pc, #36]	; (8009274 <UTIL_SEQ_WaitEvt+0x78>)
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8009254:	4b08      	ldr	r3, [pc, #32]	; (8009278 <UTIL_SEQ_WaitEvt+0x7c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	43da      	mvns	r2, r3
 800925a:	4b08      	ldr	r3, [pc, #32]	; (800927c <UTIL_SEQ_WaitEvt+0x80>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4013      	ands	r3, r2
 8009260:	4a06      	ldr	r2, [pc, #24]	; (800927c <UTIL_SEQ_WaitEvt+0x80>)
 8009262:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8009264:	4a04      	ldr	r2, [pc, #16]	; (8009278 <UTIL_SEQ_WaitEvt+0x7c>)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6013      	str	r3, [r2, #0]

  return;
 800926a:	bf00      	nop
}
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	2000025c 	.word	0x2000025c
 8009278:	20000258 	.word	0x20000258
 800927c:	20000254 	.word	0x20000254

08009280 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009284:	bf00      	nop
}
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800928e:	b480      	push	{r7}
 8009290:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009292:	bf00      	nop
}
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	0c1b      	lsrs	r3, r3, #16
 80092ac:	041b      	lsls	r3, r3, #16
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <SEQ_BitPosition+0x20>
 80092b2:	2310      	movs	r3, #16
 80092b4:	73fb      	strb	r3, [r7, #15]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	041b      	lsls	r3, r3, #16
 80092ba:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <SEQ_BitPosition+0x36>
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	3308      	adds	r3, #8
 80092ca:	73fb      	strb	r3, [r7, #15]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	021b      	lsls	r3, r3, #8
 80092d0:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d105      	bne.n	80092e8 <SEQ_BitPosition+0x4c>
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	3304      	adds	r3, #4
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	011b      	lsls	r3, r3, #4
 80092e6:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	0f1b      	lsrs	r3, r3, #28
 80092ec:	4a07      	ldr	r2, [pc, #28]	; (800930c <SEQ_BitPosition+0x70>)
 80092ee:	5cd2      	ldrb	r2, [r2, r3]
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	4413      	add	r3, r2
 80092f4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	f1c3 031f 	rsb	r3, r3, #31
 80092fc:	b2db      	uxtb	r3, r3
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	08009630 	.word	0x08009630

08009310 <__libc_init_array>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	4d0d      	ldr	r5, [pc, #52]	; (8009348 <__libc_init_array+0x38>)
 8009314:	4c0d      	ldr	r4, [pc, #52]	; (800934c <__libc_init_array+0x3c>)
 8009316:	1b64      	subs	r4, r4, r5
 8009318:	10a4      	asrs	r4, r4, #2
 800931a:	2600      	movs	r6, #0
 800931c:	42a6      	cmp	r6, r4
 800931e:	d109      	bne.n	8009334 <__libc_init_array+0x24>
 8009320:	4d0b      	ldr	r5, [pc, #44]	; (8009350 <__libc_init_array+0x40>)
 8009322:	4c0c      	ldr	r4, [pc, #48]	; (8009354 <__libc_init_array+0x44>)
 8009324:	f000 f82e 	bl	8009384 <_init>
 8009328:	1b64      	subs	r4, r4, r5
 800932a:	10a4      	asrs	r4, r4, #2
 800932c:	2600      	movs	r6, #0
 800932e:	42a6      	cmp	r6, r4
 8009330:	d105      	bne.n	800933e <__libc_init_array+0x2e>
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	f855 3b04 	ldr.w	r3, [r5], #4
 8009338:	4798      	blx	r3
 800933a:	3601      	adds	r6, #1
 800933c:	e7ee      	b.n	800931c <__libc_init_array+0xc>
 800933e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009342:	4798      	blx	r3
 8009344:	3601      	adds	r6, #1
 8009346:	e7f2      	b.n	800932e <__libc_init_array+0x1e>
 8009348:	08009648 	.word	0x08009648
 800934c:	08009648 	.word	0x08009648
 8009350:	08009648 	.word	0x08009648
 8009354:	0800964c 	.word	0x0800964c

08009358 <memcpy>:
 8009358:	440a      	add	r2, r1
 800935a:	4291      	cmp	r1, r2
 800935c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009360:	d100      	bne.n	8009364 <memcpy+0xc>
 8009362:	4770      	bx	lr
 8009364:	b510      	push	{r4, lr}
 8009366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800936a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936e:	4291      	cmp	r1, r2
 8009370:	d1f9      	bne.n	8009366 <memcpy+0xe>
 8009372:	bd10      	pop	{r4, pc}

08009374 <memset>:
 8009374:	4402      	add	r2, r0
 8009376:	4603      	mov	r3, r0
 8009378:	4293      	cmp	r3, r2
 800937a:	d100      	bne.n	800937e <memset+0xa>
 800937c:	4770      	bx	lr
 800937e:	f803 1b01 	strb.w	r1, [r3], #1
 8009382:	e7f9      	b.n	8009378 <memset+0x4>

08009384 <_init>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr

08009390 <_fini>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr
